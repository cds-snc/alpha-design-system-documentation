{"version":3,"file":"gcds-radio-group.js","sourceRoot":"","sources":["../../../src/components/gcds-radio-group/gcds-radio-group.tsx"],"names":[],"mappings":"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","sourcesContent":["import {\n  Component,\n  Element,\n  Event,\n  EventEmitter,\n  State,\n  Prop,\n  Listen,\n  Watch,\n  Host,\n  h,\n  AttachInternals,\n} from '@stencil/core';\nimport {\n  assignLanguage,\n  inheritAttributes,\n  observerConfig,\n} from '../../utils/utils';\n\nexport type RadioObject = {\n  id: string;\n  label: string;\n  value: string;\n  hint?: string;\n  checked?: boolean;\n  required?: boolean;\n  disabled?: boolean;\n};\n\n@Component({\n  tag: 'gcds-radio-group',\n  styleUrl: 'gcds-radio-group.css',\n  shadow: { delegatesFocus: true },\n  formAssociated: true,\n})\nexport class GcdsRadioGroup {\n  @Element() el: HTMLElement;\n\n  @AttachInternals()\n  internals: ElementInternals;\n\n  private shadowElement?: HTMLInputElement;\n\n  private optionObject;\n\n  /**\n   * Props\n   */\n\n  /**\n   * Options to render radio buttons\n   */\n  @Prop() options!: string | Array<RadioObject>;\n  @Watch('options')\n  validateOptions() {\n    if (typeof this.options == 'object') {\n      this.optionObject = this.options;\n    } else if (typeof this.options == 'string') {\n      this.optionObject = JSON.parse(this.options);\n    }\n  }\n\n  /**\n   * Name attribute for an input element.\n   */\n  @Prop({ reflect: true, mutable: false }) name!: string;\n\n  /**\n   * Specifies if the radio is invalid.\n   */\n  @State() hasError: boolean;\n\n  /**\n   * State to handle when errors are passed down to component\n   */\n  @State() parentError: string;\n\n  /**\n   * Set additional HTML attributes not available in component properties\n   */\n  @State() inheritedAttributes: Object = {};\n\n  /**\n   * Language of rendered component\n   */\n  @State() lang: string;\n\n  /**\n   * Events\n   */\n\n  /**\n   * Emitted when the radio button is checked\n   */\n  @Event() gcdsChange!: EventEmitter<void>;\n\n  /**\n   * Emitted when the radio has focus.\n   */\n  @Event() gcdsFocus!: EventEmitter<void>;\n\n  /**\n   * Emitted when the radio loses focus.\n   */\n  @Event() gcdsBlur!: EventEmitter<void>;\n\n  private onBlur = () => {\n    this.gcdsBlur.emit();\n  };\n\n  /*\n   * Observe lang attribute change\n   */\n  updateLang() {\n    const observer = new MutationObserver(mutations => {\n      if (mutations[0].oldValue != this.el.lang) {\n        this.lang = this.el.lang;\n      }\n    });\n    observer.observe(this.el, observerConfig);\n  }\n\n  async componentWillLoad() {\n    // Define lang attribute\n    this.lang = assignLanguage(this.el);\n\n    this.updateLang();\n    this.validateOptions();\n\n    this.inheritedAttributes = inheritAttributes(this.el, this.shadowElement);\n\n    this.optionObject &&\n      this.optionObject.map(radio => {\n        if (radio.checked) {\n          this.internals.setFormValue(radio.value, 'checked');\n        }\n      });\n  }\n\n  private onChange = e => {\n    this.gcdsChange.emit(e.target.value);\n    this.internals.setFormValue(e.target.value, 'checked');\n\n    const changeEvt = new e.constructor(e.type, e);\n    this.el.dispatchEvent(changeEvt);\n  };\n\n  /**\n   * Event listener for gcds-fieldset errors\n   */\n  @Listen('gcdsGroupError', { target: 'body' })\n  gcdsGroupError(e) {\n    if (e.srcElement.contains(this.el)) {\n      this.hasError = true;\n      this.parentError = e.detail;\n    }\n  }\n  @Listen('gcdsGroupErrorClear', { target: 'body' })\n  gcdsGroupErrorClear(e) {\n    if (e.srcElement.contains(this.el) && this.hasError) {\n      this.hasError = false;\n      this.parentError = '';\n    }\n  }\n\n  render() {\n    const { lang, name, hasError, parentError, inheritedAttributes } = this;\n\n    return (\n      <Host>\n        {this.optionObject &&\n          this.optionObject.map(radio => {\n            const attrsInput = {\n              name,\n              disabled: radio.disabled,\n              required: radio.required,\n              value: radio.value,\n              checked: radio.checked,\n              ...inheritedAttributes,\n            };\n\n            if (radio.hint || parentError) {\n              const hintID = radio.hint ? `hint-${radio.id} ` : '';\n              const errorID = parentError ? `parent-error ` : '';\n              attrsInput['aria-describedby'] = `${hintID}${errorID}${\n                attrsInput['aria-describedby']\n                  ? `${attrsInput['aria-describedby']}`\n                  : ''\n              }`;\n            }\n\n            if (hasError) {\n              attrsInput['aria-invalid'] = 'true';\n            }\n\n            return (\n              <div\n                class={`gcds-radio ${\n                  radio.disabled ? 'gcds-radio--disabled' : ''\n                } ${hasError ? 'gcds-radio--error' : ''}`}\n              >\n                <input\n                  id={radio.id}\n                  type=\"radio\"\n                  {...attrsInput}\n                  onChange={e => this.onChange(e)}\n                  onBlur={() => this.onBlur()}\n                  onFocus={() => this.gcdsFocus.emit()}\n                  ref={element =>\n                    (this.shadowElement = element as HTMLInputElement)\n                  }\n                />\n\n                <gcds-label\n                  label={radio.label}\n                  label-for={radio.id}\n                  lang={lang}\n                ></gcds-label>\n\n                {radio.hint ? (\n                  <gcds-hint hint-id={radio.id}>{radio.hint}</gcds-hint>\n                ) : null}\n              </div>\n            );\n          })}\n        {parentError && (\n          <span id={`parent-error`} hidden>\n            {parentError}\n          </span>\n        )}\n      </Host>\n    );\n  }\n}\n"]}