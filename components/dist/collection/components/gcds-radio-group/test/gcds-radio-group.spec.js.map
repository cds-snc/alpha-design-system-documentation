{"version":3,"file":"gcds-radio-group.spec.js","sourceRoot":"","sources":["../../../../src/components/gcds-radio-group/test/gcds-radio-group.spec.tsx"],"names":[],"mappings":"AAAA,OAAO,EAAE,WAAW,EAAE,MAAM,uBAAuB,CAAC;AACpD,OAAO,EAAE,cAAc,EAAE,MAAM,qBAAqB,CAAC;AAErD,QAAQ,CAAC,kBAAkB,EAAE,GAAG,EAAE;IAChC,EAAE,CAAC,SAAS,EAAE,KAAK,IAAI,EAAE;QACvB,MAAM,IAAI,GAAG,MAAM,WAAW,CAAC;YAC7B,UAAU,EAAE,CAAC,cAAc,CAAC;YAC5B,IAAI,EAAE;;;;4BAIgB;SACvB,CAAC,CAAC;QACH,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,WAAW,CAAC;;;;;;;;;KAS7B,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IACH,EAAE,CAAC,iBAAiB,EAAE,KAAK,IAAI,EAAE;QAC/B,MAAM,IAAI,GAAG,MAAM,WAAW,CAAC;YAC7B,UAAU,EAAE,CAAC,cAAc,CAAC;YAC5B,IAAI,EAAE;;;;4BAIgB;SACvB,CAAC,CAAC;QACH,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,WAAW,CAAC;;;;;;;;;KAS7B,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IACH,EAAE,CAAC,iBAAiB,EAAE,KAAK,IAAI,EAAE;QAC/B,MAAM,IAAI,GAAG,MAAM,WAAW,CAAC;YAC7B,UAAU,EAAE,CAAC,cAAc,CAAC;YAC5B,IAAI,EAAE;;;;4BAIgB;SACvB,CAAC,CAAC;QACH,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,WAAW,CAAC;;;;;;;;;;KAU7B,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IACH,EAAE,CAAC,kBAAkB,EAAE,KAAK,IAAI,EAAE;QAChC,MAAM,IAAI,GAAG,MAAM,WAAW,CAAC;YAC7B,UAAU,EAAE,CAAC,cAAc,CAAC;YAC5B,IAAI,EAAE;;;;4BAIgB;SACvB,CAAC,CAAC;QACH,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,WAAW,CAAC;;;;;;;;;KAS7B,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IACH,EAAE,CAAC,gCAAgC,EAAE,KAAK,IAAI,EAAE;QAC9C,MAAM,IAAI,GAAG,MAAM,WAAW,CAAC;YAC7B,UAAU,EAAE,CAAC,cAAc,CAAC;YAC5B,IAAI,EAAE;;;;4BAIgB;SACvB,CAAC,CAAC;QACH,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,WAAW,CAAC;;;;;;;;;;;;;;;;;KAiB7B,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["import { newSpecPage } from '@stencil/core/testing';\nimport { GcdsRadioGroup } from '../gcds-radio-group';\n\ndescribe('gcds-radio-group', () => {\n  it('renders', async () => {\n    const page = await newSpecPage({\n      components: [GcdsRadioGroup],\n      html: `<gcds-radio-group\n          name=\"radio\"\n          options='[{ \"label\": \"Label\", \"id\": \"radio\", \"value\": \"radio\"}]'\n        >\n        </gcds-radio-group>`,\n    });\n    expect(page.root).toEqualHtml(`\n      <gcds-radio-group name=\"radio\" options='[{ \"label\": \"Label\", \"id\": \"radio\", \"value\": \"radio\"}]'>\n        <mock:shadow-root>\n          <div class=\"gcds-radio\">\n            <input id=\"radio\" name=\"radio\" type=\"radio\" value=\"radio\">\n            <gcds-label label=\"Label\" label-for=\"radio\" lang=\"en\"></gcds-label>\n          </div>\n        </mock:shadow-root>\n      </gcds-radio-group>\n    `);\n  });\n  it('renders checked', async () => {\n    const page = await newSpecPage({\n      components: [GcdsRadioGroup],\n      html: `<gcds-radio-group\n          name=\"radio\"\n          options='[{ \"label\": \"Label\", \"id\": \"radio\", \"value\": \"radio\", \"checked\": true}]'\n        >\n        </gcds-radio-group>`,\n    });\n    expect(page.root).toEqualHtml(`\n      <gcds-radio-group name=\"radio\" options='[{ \"label\": \"Label\", \"id\": \"radio\", \"value\": \"radio\", \"checked\": true}]'>\n        <mock:shadow-root>\n          <div class=\"gcds-radio\">\n            <input checked=\"\" id=\"radio\" name=\"radio\" type=\"radio\" value=\"radio\">\n            <gcds-label label=\"Label\" label-for=\"radio\" lang=\"en\"></gcds-label>\n          </div>\n        </mock:shadow-root>\n      </gcds-radio-group>\n    `);\n  });\n  it('renders w/ hint', async () => {\n    const page = await newSpecPage({\n      components: [GcdsRadioGroup],\n      html: `<gcds-radio-group\n          name=\"radio\"\n          options='[{ \"label\": \"Label\", \"id\": \"radio\", \"value\": \"radio\", \"hint\": \"This is a hint.\"}]'\n        >\n        </gcds-radio-group>`,\n    });\n    expect(page.root).toEqualHtml(`\n      <gcds-radio-group name=\"radio\" options='[{ \"label\": \"Label\", \"id\": \"radio\", \"value\": \"radio\", \"hint\": \"This is a hint.\"}]'>\n        <mock:shadow-root>\n          <div class=\"gcds-radio\">\n            <input aria-describedby=\"hint-radio \" id=\"radio\" name=\"radio\" type=\"radio\" value=\"radio\">\n            <gcds-label label=\"Label\" label-for=\"radio\" lang=\"en\"></gcds-label>\n            <gcds-hint hint-id=\"radio\">This is a hint.</gcds-hint>\n          </div>\n        </mock:shadow-root>\n      </gcds-radio-group>\n    `);\n  });\n  it('renders disabled', async () => {\n    const page = await newSpecPage({\n      components: [GcdsRadioGroup],\n      html: `<gcds-radio-group\n          name=\"radio\"\n          options='[{ \"label\": \"Label\", \"id\": \"radio\", \"value\": \"radio\", \"disabled\": true }]'\n        >\n        </gcds-radio-group>`,\n    });\n    expect(page.root).toEqualHtml(`\n      <gcds-radio-group name=\"radio\" options='[{ \"label\": \"Label\", \"id\": \"radio\", \"value\": \"radio\", \"disabled\": true }]'>\n        <mock:shadow-root>\n          <div class=\"gcds-radio--disabled gcds-radio\">\n            <input disabled=\"\" id=\"radio\" name=\"radio\" type=\"radio\" value=\"radio\">\n            <gcds-label label=\"Label\" label-for=\"radio\" lang=\"en\"></gcds-label>\n          </div>\n        </mock:shadow-root>\n      </gcds-radio-group>\n    `);\n  });\n  it('renders multiple radio buttons', async () => {\n    const page = await newSpecPage({\n      components: [GcdsRadioGroup],\n      html: `<gcds-radio-group\n          name=\"radio\"\n          options='[{ \"label\": \"Label 1\", \"id\": \"radio1\", \"value\": \"radio1\"}, { \"label\": \"Label 2\", \"id\": \"radio2\", \"value\": \"radio2\"}, { \"label\": \"Label 3\", \"id\": \"radio3\", \"value\": \"radio3\"}]'\n        >\n        </gcds-radio-group>`,\n    });\n    expect(page.root).toEqualHtml(`\n      <gcds-radio-group name=\"radio\" options='[{ \"label\": \"Label 1\", \"id\": \"radio1\", \"value\": \"radio1\"}, { \"label\": \"Label 2\", \"id\": \"radio2\", \"value\": \"radio2\"}, { \"label\": \"Label 3\", \"id\": \"radio3\", \"value\": \"radio3\"}]'>\n        <mock:shadow-root>\n          <div class=\"gcds-radio\">\n            <input id=\"radio1\" name=\"radio\" type=\"radio\" value=\"radio1\">\n            <gcds-label label=\"Label 1\" label-for=\"radio1\" lang=\"en\"></gcds-label>\n          </div>\n          <div class=\"gcds-radio\">\n            <input id=\"radio2\" name=\"radio\" type=\"radio\" value=\"radio2\">\n            <gcds-label label=\"Label 2\" label-for=\"radio2\" lang=\"en\"></gcds-label>\n          </div>\n          <div class=\"gcds-radio\">\n            <input id=\"radio3\" name=\"radio\" type=\"radio\" value=\"radio3\">\n            <gcds-label label=\"Label 3\" label-for=\"radio3\" lang=\"en\"></gcds-label>\n          </div>\n        </mock:shadow-root>\n      </gcds-radio-group>\n    `);\n  });\n});\n"]}