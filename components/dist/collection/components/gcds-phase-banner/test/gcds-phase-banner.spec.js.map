{"version":3,"file":"gcds-phase-banner.spec.js","sourceRoot":"","sources":["../../../../src/components/gcds-phase-banner/test/gcds-phase-banner.spec.tsx"],"names":[],"mappings":"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","sourcesContent":["import { newSpecPage } from '@stencil/core/testing';\nimport { GcdsPhaseBanner } from '../gcds-phase-banner';\n\ndescribe('gcds-phase-banner', () => {\n  it('renders', async () => {\n    const page = await newSpecPage({\n      components: [GcdsPhaseBanner],\n      html: `<gcds-phase-banner><p>This is a banner.</p></gcds-phase-banner>`,\n    });\n    expect(page.root).toEqualHtml(`\n      <gcds-phase-banner>\n        <mock:shadow-root>\n          <div aria-label=\"Banner\" class=\"gcds-phase-banner banner--role-primary\" role=\"status\">\n            <gcds-container size=\"xl\" centered=\"\">\n              <div class=\"banner__content\">\n                <figure class=\"banner__icon icon--left\">\n                  <slot name=\"banner-icon-left\"></slot>\n                </figure>\n\n                <div class=\"banner__details\">\n                  <slot name=\"banner-text\"></slot>\n                  <slot name=\"banner-cta\"></slot>\n                </div>\n\n                <figure class=\"banner__icon icon--right\">\n                  <slot name=\"banner-icon-right\"></slot>\n                </figure>\n              </div>\n            </gcds-container>\n          </div>\n        </mock:shadow-root>\n        <p>This is a banner.</p>\n      </gcds-phase-banner>\n    `);\n  });\n\n  /**\n   * Role tests\n   */\n\n  it('renders banner-role=\"primary\"', async () => {\n    const page = await newSpecPage({\n      components: [GcdsPhaseBanner],\n      html: `<gcds-phase-banner banner-role=\"primary\"><p>This is a banner.</p></gcds-phase-banner>`,\n    });\n    expect(page.root).toEqualHtml(`\n      <gcds-phase-banner banner-role=\"primary\">\n        <mock:shadow-root>\n          <div aria-label=\"Banner\" class=\"gcds-phase-banner banner--role-primary\" role=\"status\">\n            <gcds-container size=\"xl\" centered=\"\">\n              <div class=\"banner__content\">\n                <figure class=\"banner__icon icon--left\">\n                  <slot name=\"banner-icon-left\"></slot>\n                </figure>\n\n                <div class=\"banner__details\">\n                  <slot name=\"banner-text\"></slot>\n                  <slot name=\"banner-cta\"></slot>\n                </div>\n\n                <figure class=\"banner__icon icon--right\">\n                  <slot name=\"banner-icon-right\"></slot>\n                </figure>\n              </div>\n            </gcds-container>\n          </div>\n        </mock:shadow-root>\n        <p>This is a banner.</p>\n      </gcds-phase-banner>\n    `);\n  });\n\n  it('renders banner-role=\"secondary\"', async () => {\n    const page = await newSpecPage({\n      components: [GcdsPhaseBanner],\n      html: `<gcds-phase-banner banner-role=\"secondary\"><p>This is a banner.</p></gcds-phase-banner>`,\n    });\n    expect(page.root).toEqualHtml(`\n      <gcds-phase-banner banner-role=\"secondary\">\n        <mock:shadow-root>\n          <div aria-label=\"Banner\" class=\"gcds-phase-banner banner--role-secondary\" role=\"status\">\n            <gcds-container size=\"xl\" centered=\"\">\n              <div class=\"banner__content\">\n                <figure class=\"banner__icon icon--left\">\n                  <slot name=\"banner-icon-left\"></slot>\n                </figure>\n\n                <div class=\"banner__details\">\n                  <slot name=\"banner-text\"></slot>\n                  <slot name=\"banner-cta\"></slot>\n                </div>\n\n                <figure class=\"banner__icon icon--right\">\n                  <slot name=\"banner-icon-right\"></slot>\n                </figure>\n              </div>\n            </gcds-container>\n          </div>\n        </mock:shadow-root>\n        <p>This is a banner.</p>\n      </gcds-phase-banner>\n    `);\n  });\n\n  /**\n   * Fixed position test\n   */\n\n  it('renders fixed position', async () => {\n    const page = await newSpecPage({\n      components: [GcdsPhaseBanner],\n      html: `<gcds-phase-banner is-fixed><p>This is a banner.</p></gcds-phase-banner>`,\n    });\n    expect(page.root).toEqualHtml(`\n      <gcds-phase-banner is-fixed>\n        <mock:shadow-root>\n          <div aria-label=\"Banner\" class=\"gcds-phase-banner banner--role-primary banner--is-fixed\" role=\"status\">\n            <gcds-container size=\"xl\" centered=\"\">\n              <div class=\"banner__content\">\n                <figure class=\"banner__icon icon--left\">\n                  <slot name=\"banner-icon-left\"></slot>\n                </figure>\n\n                <div class=\"banner__details\">\n                  <slot name=\"banner-text\"></slot>\n                  <slot name=\"banner-cta\"></slot>\n                </div>\n\n                <figure class=\"banner__icon icon--right\">\n                  <slot name=\"banner-icon-right\"></slot>\n                </figure>\n              </div>\n            </gcds-container>\n          </div>\n        </mock:shadow-root>\n        <p>This is a banner.</p>\n      </gcds-phase-banner>\n    `);\n  });\n\n  /**\n   * Container width tests\n   */\n\n  it('renders container width full', async () => {\n    const page = await newSpecPage({\n      components: [GcdsPhaseBanner],\n      html: `<gcds-phase-banner container=\"full\"><p>This is a banner.</p></gcds-phase-banner>`,\n    });\n    expect(page.root).toEqualHtml(`\n      <gcds-phase-banner container=\"full\">\n        <mock:shadow-root>\n          <div aria-label=\"Banner\" class=\"gcds-phase-banner banner--role-primary\" role=\"status\">\n            <gcds-container size=\"full\" centered=\"\">\n              <div class=\"banner__content\">\n                <figure class=\"banner__icon icon--left\">\n                  <slot name=\"banner-icon-left\"></slot>\n                </figure>\n\n                <div class=\"banner__details\">\n                  <slot name=\"banner-text\"></slot>\n                  <slot name=\"banner-cta\"></slot>\n                </div>\n\n                <figure class=\"banner__icon icon--right\">\n                  <slot name=\"banner-icon-right\"></slot>\n                </figure>\n              </div>\n            </gcds-container>\n          </div>\n        </mock:shadow-root>\n        <p>This is a banner.</p>\n      </gcds-phase-banner>\n    `);\n  });\n\n  it('renders container width xl', async () => {\n    const page = await newSpecPage({\n      components: [GcdsPhaseBanner],\n      html: `<gcds-phase-banner container=\"xl\"><p>This is a banner.</p></gcds-phase-banner>`,\n    });\n    expect(page.root).toEqualHtml(`\n      <gcds-phase-banner container=\"xl\">\n        <mock:shadow-root>\n          <div aria-label=\"Banner\" class=\"gcds-phase-banner banner--role-primary\" role=\"status\">\n            <gcds-container size=\"xl\" centered=\"\">\n              <div class=\"banner__content\">\n                <figure class=\"banner__icon icon--left\">\n                  <slot name=\"banner-icon-left\"></slot>\n                </figure>\n\n                <div class=\"banner__details\">\n                  <slot name=\"banner-text\"></slot>\n                  <slot name=\"banner-cta\"></slot>\n                </div>\n\n                <figure class=\"banner__icon icon--right\">\n                  <slot name=\"banner-icon-right\"></slot>\n                </figure>\n              </div>\n            </gcds-container>\n          </div>\n        </mock:shadow-root>\n        <p>This is a banner.</p>\n      </gcds-phase-banner>\n    `);\n  });\n\n  it('renders container width lg', async () => {\n    const page = await newSpecPage({\n      components: [GcdsPhaseBanner],\n      html: `<gcds-phase-banner container=\"lg\"><p>This is a banner.</p></gcds-phase-banner>`,\n    });\n    expect(page.root).toEqualHtml(`\n      <gcds-phase-banner container=\"lg\">\n        <mock:shadow-root>\n          <div aria-label=\"Banner\" class=\"gcds-phase-banner banner--role-primary\" role=\"status\">\n            <gcds-container size=\"lg\" centered=\"\">\n              <div class=\"banner__content\">\n                <figure class=\"banner__icon icon--left\">\n                  <slot name=\"banner-icon-left\"></slot>\n                </figure>\n\n                <div class=\"banner__details\">\n                  <slot name=\"banner-text\"></slot>\n                  <slot name=\"banner-cta\"></slot>\n                </div>\n\n                <figure class=\"banner__icon icon--right\">\n                  <slot name=\"banner-icon-right\"></slot>\n                </figure>\n              </div>\n            </gcds-container>\n          </div>\n        </mock:shadow-root>\n        <p>This is a banner.</p>\n      </gcds-phase-banner>\n    `);\n  });\n\n  it('renders container width md', async () => {\n    const page = await newSpecPage({\n      components: [GcdsPhaseBanner],\n      html: `<gcds-phase-banner container=\"md\"><p>This is a banner.</p></gcds-phase-banner>`,\n    });\n    expect(page.root).toEqualHtml(`\n      <gcds-phase-banner container=\"md\">\n        <mock:shadow-root>\n          <div aria-label=\"Banner\" class=\"gcds-phase-banner banner--role-primary\" role=\"status\">\n            <gcds-container size=\"md\" centered=\"\">\n              <div class=\"banner__content\">\n                <figure class=\"banner__icon icon--left\">\n                  <slot name=\"banner-icon-left\"></slot>\n                </figure>\n\n                <div class=\"banner__details\">\n                  <slot name=\"banner-text\"></slot>\n                  <slot name=\"banner-cta\"></slot>\n                </div>\n\n                <figure class=\"banner__icon icon--right\">\n                  <slot name=\"banner-icon-right\"></slot>\n                </figure>\n              </div>\n            </gcds-container>\n          </div>\n        </mock:shadow-root>\n        <p>This is a banner.</p>\n      </gcds-phase-banner>\n    `);\n  });\n\n  it('renders container width sm', async () => {\n    const page = await newSpecPage({\n      components: [GcdsPhaseBanner],\n      html: `<gcds-phase-banner container=\"sm\"><p>This is a banner.</p></gcds-phase-banner>`,\n    });\n    expect(page.root).toEqualHtml(`\n      <gcds-phase-banner container=\"sm\">\n        <mock:shadow-root>\n          <div aria-label=\"Banner\" class=\"gcds-phase-banner banner--role-primary\" role=\"status\">\n            <gcds-container size=\"sm\" centered=\"\">\n              <div class=\"banner__content\">\n                <figure class=\"banner__icon icon--left\">\n                  <slot name=\"banner-icon-left\"></slot>\n                </figure>\n\n                <div class=\"banner__details\">\n                  <slot name=\"banner-text\"></slot>\n                  <slot name=\"banner-cta\"></slot>\n                </div>\n\n                <figure class=\"banner__icon icon--right\">\n                  <slot name=\"banner-icon-right\"></slot>\n                </figure>\n              </div>\n            </gcds-container>\n          </div>\n        </mock:shadow-root>\n        <p>This is a banner.</p>\n      </gcds-phase-banner>\n    `);\n  });\n\n  it('renders container width xs', async () => {\n    const page = await newSpecPage({\n      components: [GcdsPhaseBanner],\n      html: `<gcds-phase-banner container=\"xs\"><p>This is a banner.</p></gcds-phase-banner>`,\n    });\n    expect(page.root).toEqualHtml(`\n      <gcds-phase-banner container=\"xs\">\n        <mock:shadow-root>\n          <div aria-label=\"Banner\" class=\"gcds-phase-banner banner--role-primary\" role=\"status\">\n            <gcds-container size=\"xs\" centered=\"\">\n              <div class=\"banner__content\">\n                <figure class=\"banner__icon icon--left\">\n                  <slot name=\"banner-icon-left\"></slot>\n                </figure>\n\n                <div class=\"banner__details\">\n                  <slot name=\"banner-text\"></slot>\n                  <slot name=\"banner-cta\"></slot>\n                </div>\n\n                <figure class=\"banner__icon icon--right\">\n                  <slot name=\"banner-icon-right\"></slot>\n                </figure>\n              </div>\n            </gcds-container>\n          </div>\n        </mock:shadow-root>\n        <p>This is a banner.</p>\n      </gcds-phase-banner>\n    `);\n  });\n});\n"]}