{"version":3,"file":"gcds-container.spec.js","sourceRoot":"","sources":["../../../../src/components/gcds-container/test/gcds-container.spec.ts"],"names":[],"mappings":"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","sourcesContent":["import { newSpecPage } from '@stencil/core/testing';\nimport { GcdsContainer } from '../gcds-container';\n\ndescribe('gcds-grid', () => {\n  it('renders container size full by default', async () => {\n    const { root } = await newSpecPage({\n      components: [GcdsContainer],\n      html: `\n        <gcds-container />\n      `,\n    });\n    expect(root).toEqualHtml(`\n      <gcds-container>\n        <mock:shadow-root>\n          <div class=\"gcds-container size-full\">\n            <slot></slot>\n          </div>\n        </mock:shadow-root>\n      </gcds-container>\n    `);\n  });\n\n  it('renders container size xl', async () => {\n    const { root } = await newSpecPage({\n      components: [GcdsContainer],\n      html: `\n        <gcds-container size=\"xl\" />\n      `,\n    });\n    expect(root).toEqualHtml(`\n      <gcds-container size=\"xl\">\n        <mock:shadow-root>\n          <div class=\"gcds-container size-xl\">\n            <slot></slot>\n          </div>\n        </mock:shadow-root>\n      </gcds-container>\n    `);\n  });\n\n  it('renders container size lg', async () => {\n    const { root } = await newSpecPage({\n      components: [GcdsContainer],\n      html: `\n        <gcds-container size=\"lg\" />\n      `,\n    });\n    expect(root).toEqualHtml(`\n      <gcds-container size=\"lg\">\n        <mock:shadow-root>\n          <div class=\"gcds-container size-lg\">\n            <slot></slot>\n          </div>\n        </mock:shadow-root>\n      </gcds-container>\n    `);\n  });\n\n  it('renders container size md', async () => {\n    const { root } = await newSpecPage({\n      components: [GcdsContainer],\n      html: `\n        <gcds-container size=\"md\" />\n      `,\n    });\n    expect(root).toEqualHtml(`\n      <gcds-container size=\"md\">\n        <mock:shadow-root>\n          <div class=\"gcds-container size-md\">\n            <slot></slot>\n          </div>\n        </mock:shadow-root>\n      </gcds-container>\n    `);\n  });\n\n  it('renders container size sm', async () => {\n    const { root } = await newSpecPage({\n      components: [GcdsContainer],\n      html: `\n        <gcds-container size=\"sm\" />\n      `,\n    });\n    expect(root).toEqualHtml(`\n      <gcds-container size=\"sm\">\n        <mock:shadow-root>\n          <div class=\"gcds-container size-sm\">\n            <slot></slot>\n          </div>\n        </mock:shadow-root>\n      </gcds-container>\n    `);\n  });\n\n  it('renders container size xs', async () => {\n    const { root } = await newSpecPage({\n      components: [GcdsContainer],\n      html: `\n        <gcds-container size=\"xs\" />\n      `,\n    });\n    expect(root).toEqualHtml(`\n      <gcds-container size=\"xs\">\n        <mock:shadow-root>\n          <div class=\"gcds-container size-xs\">\n            <slot></slot>\n          </div>\n        </mock:shadow-root>\n      </gcds-container>\n    `);\n  });\n\n  it('renders container centered', async () => {\n    const { root } = await newSpecPage({\n      components: [GcdsContainer],\n      html: `\n        <gcds-container size=\"lg\" centered />\n      `,\n    });\n    expect(root).toEqualHtml(`\n      <gcds-container size=\"lg\" centered>\n        <mock:shadow-root>\n          <div class=\"gcds-container size-lg container-centered\">\n            <slot></slot>\n          </div>\n        </mock:shadow-root>\n      </gcds-container>\n    `);\n  });\n\n  /**\n   * Spacing tests\n   */\n  it('renders container with margin', async () => {\n    const { root } = await newSpecPage({\n      components: [GcdsContainer],\n      html: `\n        <gcds-container margin=\"400\" />\n      `,\n    });\n    expect(root).toEqualHtml(`\n      <gcds-container margin=\"400\">\n        <mock:shadow-root>\n          <div class=\"gcds-container size-full m-400\">\n            <slot></slot>\n          </div>\n        </mock:shadow-root>\n      </gcds-container>\n    `);\n  });\n\n  it('renders container with padding', async () => {\n    const { root } = await newSpecPage({\n      components: [GcdsContainer],\n      html: `\n        <gcds-container padding=\"400\" />\n      `,\n    });\n    expect(root).toEqualHtml(`\n      <gcds-container padding=\"400\">\n        <mock:shadow-root>\n          <div class=\"gcds-container size-full p-400\">\n            <slot></slot>\n          </div>\n        </mock:shadow-root>\n      </gcds-container>\n    `);\n  });\n\n  /**\n   * Border test\n   */\n  it('renders container with border', async () => {\n    const { root } = await newSpecPage({\n      components: [GcdsContainer],\n      html: `\n        <gcds-container border />\n      `,\n    });\n    expect(root).toEqualHtml(`\n      <gcds-container border>\n        <mock:shadow-root>\n          <div class=\"gcds-container size-full container-border\">\n            <slot></slot>\n          </div>\n        </mock:shadow-root>\n      </gcds-container>\n    `);\n  });\n});\n"]}