{"version":3,"file":"gcds-link.spec.js","sourceRoot":"","sources":["../../../../src/components/gcds-link/test/gcds-link.spec.ts"],"names":[],"mappings":"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","sourcesContent":["import { newSpecPage } from '@stencil/core/testing';\nimport { GcdsLink } from '../gcds-link';\nimport i18n from '../i18n/i18n';\n\ndescribe('gcds-link', () => {\n  it('renders with no passed properties', async () => {\n    const { root } = await newSpecPage({\n      components: [GcdsLink],\n      html: '<gcds-link href=\"#\">Link text</gcds-link>',\n    });\n    expect(root).toEqualHtml(`\n      <gcds-link href=\"#\">\n        <mock:shadow-root>\n          <a class=\"gcds-link link--inherit\" part=\"link\" href=\"#\" role=\"link\" tabindex=\"0\" target=\"_self\">\n            <slot></slot>\n          </a>\n        </mock:shadow-root>\n        Link text\n      </gcds-link>\n    `);\n  });\n\n  /*\n   * Variant tests\n   */\n\n  it('[english] renders external link with label + icon', async () => {\n    const { root } = await newSpecPage({\n      components: [GcdsLink],\n      html: `<gcds-link href=\"https://google.com\" target=\"_blank\">External Link</gcds-link>`,\n    });\n    expect(root).toEqualHtml(`\n      <gcds-link href=\"https://google.com\" target=\"_blank\">\n        <mock:shadow-root>\n          <a class=\"gcds-link link--inherit\" href=\"https://google.com\" part=\"link\" target=\"_blank\" rel=\"noopener noreferrer\" role=\"link\" tabindex=\"0\">\n            <slot></slot>\n            <gcds-icon name=\"external-link\" label=\"${i18n.en.external}\" margin-left=\"100\" />\n          </a>\n        </mock:shadow-root>\n        External Link\n      </gcds-link>\n    `);\n  });\n\n  it('[french] renders external link with label + icon', async () => {\n    const { root } = await newSpecPage({\n      components: [GcdsLink],\n      html: `<gcds-link href=\"https://google.com\" target=\"_blank\" lang=\"fr\">External Link</gcds-link>`,\n    });\n    expect(root).toEqualHtml(`\n      <gcds-link href=\"https://google.com\" target=\"_blank\" lang=\"fr\">\n        <mock:shadow-root>\n          <a class=\"gcds-link link--inherit\" href=\"https://google.com\" part=\"link\" target=\"_blank\" rel=\"noopener noreferrer\" role=\"link\" tabindex=\"0\">\n            <slot></slot>\n            <gcds-icon name=\"external-link\" label=\"${i18n.fr.external}\" margin-left=\"100\" />\n          </a>\n        </mock:shadow-root>\n        External Link\n      </gcds-link>\n    `);\n  });\n\n  it('[english] renders download attribute + icon', async () => {\n    const { root } = await newSpecPage({\n      components: [GcdsLink],\n      html: `<gcds-link href=\"https://google.com\" download>Download file</gcds-link>`,\n    });\n    expect(root).toEqualHtml(`\n      <gcds-link href=\"https://google.com\" download>\n        <mock:shadow-root>\n          <a class=\"gcds-link link--inherit\" href=\"https://google.com\" part=\"link\" download role=\"link\" tabindex=\"0\" target=\"_self\">\n            <slot></slot>\n            <gcds-icon name=\"download\" label=\"${i18n.en.download}\" margin-left=\"100\" />\n          </a>\n        </mock:shadow-root>\n        Download file\n      </gcds-link>\n    `);\n  });\n\n  it('[french] renders download attribute + icon', async () => {\n    const { root } = await newSpecPage({\n      components: [GcdsLink],\n      html: `<gcds-link href=\"https://google.com\" download lang=\"fr\">Download file</gcds-link>`,\n    });\n    expect(root).toEqualHtml(`\n      <gcds-link href=\"https://google.com\" download lang=\"fr\">\n        <mock:shadow-root>\n          <a class=\"gcds-link link--inherit\" href=\"https://google.com\" part=\"link\" download role=\"link\" tabindex=\"0\" target=\"_self\">\n            <slot></slot>\n            <gcds-icon name=\"download\" label=\"${i18n.fr.download}\" margin-left=\"100\" />\n          </a>\n        </mock:shadow-root>\n        Download file\n      </gcds-link>\n    `);\n  });\n\n  it('[english] renders download attribute - named file', async () => {\n    const { root } = await newSpecPage({\n      components: [GcdsLink],\n      html: `<gcds-link href=\"https://google.com\" download=\"myfile.pdf\">Download file</gcds-link>`,\n    });\n    expect(root).toEqualHtml(`\n      <gcds-link href=\"https://google.com\" download=\"myfile.pdf\">\n        <mock:shadow-root>\n          <a class=\"gcds-link link--inherit\" href=\"https://google.com\" part=\"link\" download=\"myfile.pdf\" role=\"link\" tabindex=\"0\" target=\"_self\">\n            <slot></slot>\n            <gcds-icon name=\"download\" label=\"${i18n.en.download}\" margin-left=\"100\" />\n          </a>\n        </mock:shadow-root>\n        Download file\n      </gcds-link>\n    `);\n  });\n\n  it('[french] renders download attribute - named file', async () => {\n    const { root } = await newSpecPage({\n      components: [GcdsLink],\n      html: `<gcds-link href=\"https://google.com\" download=\"myfile.pdf\" lang=\"fr\">Download file</gcds-link>`,\n    });\n    expect(root).toEqualHtml(`\n      <gcds-link href=\"https://google.com\" download=\"myfile.pdf\" lang=\"fr\">\n        <mock:shadow-root>\n          <a class=\"gcds-link link--inherit\" href=\"https://google.com\" part=\"link\" download=\"myfile.pdf\" role=\"link\" tabindex=\"0\" target=\"_self\">\n            <slot></slot>\n            <gcds-icon name=\"download\" label=\"${i18n.fr.download}\" margin-left=\"100\" />\n          </a>\n        </mock:shadow-root>\n        Download file\n      </gcds-link>\n    `);\n  });\n\n  it('[english] renders phone label + icon', async () => {\n    const { root } = await newSpecPage({\n      components: [GcdsLink],\n      html: `<gcds-link href=\"tel:1234567890\">123-456-7890</gcds-link>`,\n    });\n    expect(root).toEqualHtml(`\n      <gcds-link href=\"tel:1234567890\">\n        <mock:shadow-root>\n          <a class=\"gcds-link link--inherit\" href=\"tel:1234567890\" part=\"link\" role=\"link\" tabindex=\"0\" target=\"_self\">\n            <slot></slot>\n            <gcds-icon name=\"phone\" label=\"${i18n.en.phone}\" margin-left=\"100\" />\n          </a>\n        </mock:shadow-root>\n        123-456-7890\n      </gcds-link>\n    `);\n  });\n\n  it('[french] renders phone label + icon', async () => {\n    const { root } = await newSpecPage({\n      components: [GcdsLink],\n      html: `<gcds-link href=\"tel:1234567890\" lang=\"fr\">123-456-7890</gcds-link>`,\n    });\n    expect(root).toEqualHtml(`\n      <gcds-link href=\"tel:1234567890\" lang=\"fr\">\n        <mock:shadow-root>\n          <a class=\"gcds-link link--inherit\" href=\"tel:1234567890\" part=\"link\" role=\"link\" tabindex=\"0\" target=\"_self\">\n            <slot></slot>\n            <gcds-icon name=\"phone\" label=\"${i18n.fr.phone}\" margin-left=\"100\" />\n          </a>\n        </mock:shadow-root>\n        123-456-7890\n      </gcds-link>\n    `);\n  });\n\n  it('[english] renders email label + icon', async () => {\n    const { root } = await newSpecPage({\n      components: [GcdsLink],\n      html: `<gcds-link href=\"mailto:test@test.com\">test@test.com</gcds-link>`,\n    });\n    expect(root).toEqualHtml(`\n      <gcds-link href=\"mailto:test@test.com\">\n        <mock:shadow-root>\n          <a class=\"gcds-link link--inherit\" href=\"mailto:test@test.com\" part=\"link\" role=\"link\" tabindex=\"0\" target=\"_self\">\n            <slot></slot>\n            <gcds-icon icon-style=\"regular\" name=\"envelope\" label=\"${i18n.en.email}\" margin-left=\"100\" />\n          </a>\n        </mock:shadow-root>\n        test@test.com\n      </gcds-link>\n    `);\n  });\n\n  it('[french] renders email label + icon', async () => {\n    const { root } = await newSpecPage({\n      components: [GcdsLink],\n      html: `<gcds-link href=\"mailto:test@test.com\" lang=\"fr\">test@test.com</gcds-link>`,\n    });\n    expect(root).toEqualHtml(`\n      <gcds-link href=\"mailto:test@test.com\" lang=\"fr\">\n        <mock:shadow-root>\n          <a class=\"gcds-link link--inherit\" href=\"mailto:test@test.com\" part=\"link\" role=\"link\" tabindex=\"0\" target=\"_self\">\n            <slot></slot>\n            <gcds-icon icon-style=\"regular\" name=\"envelope\" label=\"${i18n.fr.email}\" margin-left=\"100\" />\n          </a>\n        </mock:shadow-root>\n        test@test.com\n      </gcds-link>\n    `);\n  });\n\n  it('renders a small sized link', async () => {\n    const { root } = await newSpecPage({\n      components: [GcdsLink],\n      html: '<gcds-link href=\"#\" size=\"small\">Link text</gcds-link>',\n    });\n    expect(root).toEqualHtml(`\n      <gcds-link href=\"#\" size=\"small\">\n        <mock:shadow-root>\n          <a class=\"gcds-link link--small\" part=\"link\" href=\"#\" role=\"link\" tabindex=\"0\" target=\"_self\">\n            <slot></slot>\n          </a>\n        </mock:shadow-root>\n        Link text\n      </gcds-link>\n    `);\n  });\n\n  it('renders a regular sized link', async () => {\n    const { root } = await newSpecPage({\n      components: [GcdsLink],\n      html: '<gcds-link href=\"#\" size=\"regular\">Link text</gcds-link>',\n    });\n    expect(root).toEqualHtml(`\n      <gcds-link href=\"#\" size=\"regular\">\n        <mock:shadow-root>\n          <a class=\"gcds-link link--regular\" part=\"link\" href=\"#\" role=\"link\" tabindex=\"0\" target=\"_self\">\n            <slot></slot>\n          </a>\n        </mock:shadow-root>\n        Link text\n      </gcds-link>\n    `);\n  });\n\n  it('renders a inherited size link', async () => {\n    const { root } = await newSpecPage({\n      components: [GcdsLink],\n      html: '<gcds-link href=\"#\" size=\"inherit\">Link text</gcds-link>',\n    });\n    expect(root).toEqualHtml(`\n      <gcds-link href=\"#\" size=\"inherit\">\n        <mock:shadow-root>\n          <a class=\"gcds-link link--inherit\" part=\"link\" href=\"#\" role=\"link\" tabindex=\"0\" target=\"_self\">\n            <slot></slot>\n          </a>\n        </mock:shadow-root>\n        Link text\n      </gcds-link>\n    `);\n  });\n\n  it('renders a light link variant', async () => {\n    const { root } = await newSpecPage({\n      components: [GcdsLink],\n      html: '<gcds-link href=\"#\" variant=\"light\">Link text</gcds-link>',\n    });\n    expect(root).toEqualHtml(`\n      <gcds-link href=\"#\" variant=\"light\">\n        <mock:shadow-root>\n          <a class=\"gcds-link link--inherit variant-light\" part=\"link\" href=\"#\" role=\"link\" tabindex=\"0\" target=\"_self\">\n            <slot></slot>\n          </a>\n        </mock:shadow-root>\n        Link text\n      </gcds-link>\n    `);\n  });\n});\n"]}