{"version":3,"file":"gcds-label.js","sourceRoot":"","sources":["../../../src/components/gcds-label/gcds-label.tsx"],"names":[],"mappings":"AAAA,OAAO,EAAE,SAAS,EAAE,OAAO,EAAE,IAAI,EAAE,IAAI,EAAE,KAAK,EAAE,CAAC,EAAE,MAAM,eAAe,CAAC;AACzE,OAAO,EAAE,cAAc,EAAE,cAAc,EAAE,MAAM,mBAAmB,CAAC;AACnE,OAAO,IAAI,MAAM,aAAa,CAAC;AAQ/B,MAAM,OAAO,SAAS;;IA8DZ,YAAO,GAAG,CAAC,EAAO,EAAE,EAAE;MAC5B,IAAI,EAAE,CAAC,UAAU,CAAC,OAAO,IAAI,YAAY,EAAE;QACzC,IAAI,CAAC,OAAO,EAAE,CAAC;OAChB;IACH,CAAC,CAAC;;;;;;;EAhCF;;KAEG;EACH,UAAU;IACR,MAAM,QAAQ,GAAG,IAAI,gBAAgB,CAAC,SAAS,CAAC,EAAE;MAChD,IAAI,SAAS,CAAC,CAAC,CAAC,CAAC,QAAQ,IAAI,IAAI,CAAC,EAAE,CAAC,IAAI,EAAE;QACzC,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,EAAE,CAAC,IAAI,CAAC;OAC1B;IACH,CAAC,CAAC,CAAC;IACH,QAAQ,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE,EAAE,cAAc,CAAC,CAAC;EAC5C,CAAC;EAED,KAAK,CAAC,iBAAiB;IACrB,wBAAwB;IACxB,IAAI,CAAC,IAAI,GAAG,cAAc,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;IAEpC,IAAI,CAAC,UAAU,EAAE,CAAC;EACpB,CAAC;EAED;;KAEG;EACK,OAAO;IACb,IAAI,IAAI,CAAC,OAAO,EAAE;MAChB,IAAI,CAAC,OAAO,CAAC,KAAK,EAAE,CAAC;KACtB;EACH,CAAC;EAQD,MAAM;IACJ,MAAM,EAAE,SAAS,EAAE,QAAQ,EAAE,KAAK,EAAE,QAAQ,EAAE,IAAI,EAAE,GAAG,IAAI,CAAC;IAE5D,OAAO,CACL,EAAC,IAAI,IAAC,EAAE,EAAE,aAAa,QAAQ,EAAE,EAAE,OAAO,EAAE,IAAI,CAAC,OAAO;MACtD,aACE,OAAO,EAAE,QAAQ,EACjB,KAAK,EAAE,cAAc,SAAS,CAAC,CAAC,CAAC,eAAe,CAAC,CAAC,CAAC,EAAE,EAAE,EACvD,GAAG,EAAE,OAAO,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;QAExC,gBAAO,KAAK,CAAQ;QACnB,QAAQ,CAAC,CAAC,CAAC,CACV,2BAAkB,MAAM,EAAC,KAAK,EAAC,iBAAiB;;UAC5C,IAAI,CAAC,IAAI,CAAC,CAAC,QAAQ;cAChB,CACR,CAAC,CAAC,CAAC,IAAI,CACF,CACH,CACR,CAAC;EACJ,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CACF","sourcesContent":["import { Component, Element, Host, Prop, State, h } from '@stencil/core';\nimport { assignLanguage, observerConfig } from '../../utils/utils';\nimport i18n from './i18n/i18n';\n\n@Component({\n  tag: 'gcds-label',\n  styleUrl: 'gcds-label.css',\n  shadow: false,\n  scoped: true,\n})\nexport class GcdsLabel {\n  @Element() el: HTMLElement;\n\n  private focusEl?: HTMLElement;\n\n  /**\n   * Props\n   */\n\n  /**\n   * Specifies if the label is hidden or not.\n   */\n  @Prop() hideLabel?: boolean;\n\n  /**\n   * Form field label\n   */\n  @Prop() label: string;\n\n  /**\n   * Defines the label's for attribute.\n   */\n  @Prop() labelFor: string;\n\n  /**\n   * Specifies if a form field is required or not.\n   */\n  @Prop() required?: boolean;\n\n  /**\n   * Language of rendered component\n   */\n  @State() lang: string;\n\n  /*\n   * Observe lang attribute change\n   */\n  updateLang() {\n    const observer = new MutationObserver(mutations => {\n      if (mutations[0].oldValue != this.el.lang) {\n        this.lang = this.el.lang;\n      }\n    });\n    observer.observe(this.el, observerConfig);\n  }\n\n  async componentWillLoad() {\n    // Define lang attribute\n    this.lang = assignLanguage(this.el);\n\n    this.updateLang();\n  }\n\n  /**\n   * Click label if host element is clicked\n   */\n  private clickEl() {\n    if (this.focusEl) {\n      this.focusEl.click();\n    }\n  }\n\n  private onClick = (ev: any) => {\n    if (ev.srcElement.tagName == 'GCDS-LABEL') {\n      this.clickEl();\n    }\n  };\n\n  render() {\n    const { hideLabel, labelFor, label, required, lang } = this;\n\n    return (\n      <Host id={`label-for-${labelFor}`} onClick={this.onClick}>\n        <label\n          htmlFor={labelFor}\n          class={`gcds-label ${hideLabel ? 'label--hidden' : ''}`}\n          ref={focusEl => (this.focusEl = focusEl)}\n        >\n          <span>{label}</span>\n          {required ? (\n            <span aria-hidden=\"true\" class=\"label--required\">\n              ({i18n[lang].required})\n            </span>\n          ) : null}\n        </label>\n      </Host>\n    );\n  }\n}\n"]}