{"version":3,"file":"gcds-label.spec.js","sourceRoot":"","sources":["../../../../src/components/gcds-label/test/gcds-label.spec.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,WAAW,EAAE,MAAM,uBAAuB,CAAC;AACpD,OAAO,EAAE,SAAS,EAAE,MAAM,eAAe,CAAC;AAE1C,QAAQ,CAAC,YAAY,EAAE,GAAG,EAAE;IAC1B,EAAE,CAAC,SAAS,EAAE,KAAK,IAAI,EAAE;QACvB,MAAM,EAAE,IAAI,EAAE,GAAG,MAAM,WAAW,CAAC;YACjC,UAAU,EAAE,CAAC,SAAS,CAAC;YACvB,IAAI,EAAE,wDAAwD;SAC/D,CAAC,CAAC;QACH,MAAM,CAAC,IAAI,CAAC,CAAC,WAAW,CAAC;;;;;;KAMxB,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH;;OAEG;IACH,EAAE,CAAC,sBAAsB,EAAE,KAAK,IAAI,EAAE;QACpC,MAAM,EAAE,IAAI,EAAE,GAAG,MAAM,WAAW,CAAC;YACjC,UAAU,EAAE,CAAC,SAAS,CAAC;YACvB,IAAI,EAAE,mEAAmE;SAC1E,CAAC,CAAC;QACH,MAAM,CAAC,IAAI,CAAC,CAAC,WAAW,CAAC;;;;;;KAMxB,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH;;OAEG;IAEH,EAAE,CAAC,8BAA8B,EAAE,KAAK,IAAI,EAAE;QAC5C,MAAM,EAAE,IAAI,EAAE,GAAG,MAAM,WAAW,CAAC;YACjC,UAAU,EAAE,CAAC,SAAS,CAAC;YACvB,IAAI,EAAE,iEAAiE;SACxE,CAAC,CAAC;QACH,MAAM,CAAC,IAAI,CAAC,CAAC,WAAW,CAAC;;;;;;;KAOxB,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,8BAA8B,EAAE,KAAK,IAAI,EAAE;QAC5C,MAAM,EAAE,IAAI,EAAE,GAAG,MAAM,WAAW,CAAC;YACjC,UAAU,EAAE,CAAC,SAAS,CAAC;YACvB,IAAI,EAAE,2EAA2E;SAClF,CAAC,CAAC;QACH,MAAM,CAAC,IAAI,CAAC,CAAC,WAAW,CAAC;;;;;;;KAOxB,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["import { newSpecPage } from '@stencil/core/testing';\nimport { GcdsLabel } from '../gcds-label';\n\ndescribe('gcds-label', () => {\n  it('renders', async () => {\n    const { root } = await newSpecPage({\n      components: [GcdsLabel],\n      html: '<gcds-label label-for=\"input-renders\" label=\"Label\" />',\n    });\n    expect(root).toEqualHtml(`\n      <gcds-label id=\"label-for-input-renders\" label=\"Label\" label-for=\"input-renders\">\n        <label class=\"gcds-label\" htmlFor=\"input-renders\">\n          <span>Label</span>\n        </label>\n      </gcds-label>\n    `);\n  });\n\n  /**\n   * Hidden label tests\n   */\n  it('renders hidden label', async () => {\n    const { root } = await newSpecPage({\n      components: [GcdsLabel],\n      html: '<gcds-label label-for=\"input-renders\" label=\"Label\" hide-label />',\n    });\n    expect(root).toEqualHtml(`\n      <gcds-label id=\"label-for-input-renders\" label=\"Label\" label-for=\"input-renders\" hide-label>\n        <label class=\"gcds-label label--hidden\" htmlFor=\"input-renders\">\n          <span>Label</span>\n        </label>\n      </gcds-label>\n    `);\n  });\n\n  /**\n   * Required tests\n   */\n\n  it('renders required label in EN', async () => {\n    const { root } = await newSpecPage({\n      components: [GcdsLabel],\n      html: '<gcds-label label-for=\"input-renders\" label=\"Label\" required />',\n    });\n    expect(root).toEqualHtml(`\n      <gcds-label id=\"label-for-input-renders\" label=\"Label\" label-for=\"input-renders\" required=\"\">\n        <label class=\"gcds-label\" htmlFor=\"input-renders\">\n          <span>Label</span>\n          <span aria-hidden=\"true\" class=\"label--required\">(required)</span>\n        </label>\n      </gcds-label>\n    `);\n  });\n\n  it('renders required label in FR', async () => {\n    const { root } = await newSpecPage({\n      components: [GcdsLabel],\n      html: '<gcds-label label-for=\"input-renders\" label=\"Label\" lang=\"fr\" required />',\n    });\n    expect(root).toEqualHtml(`\n      <gcds-label id=\"label-for-input-renders\" label=\"Label\" label-for=\"input-renders\" lang=\"fr\" required=\"\">\n        <label class=\"gcds-label\" htmlFor=\"input-renders\">\n          <span>Label</span>\n          <span aria-hidden=\"true\" class=\"label--required\">(obligatoire)</span>\n        </label>\n      </gcds-label>\n    `);\n  });\n});\n"]}