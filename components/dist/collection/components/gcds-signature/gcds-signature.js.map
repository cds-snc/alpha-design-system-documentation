{"version":3,"file":"gcds-signature.js","sourceRoot":"","sources":["../../../src/components/gcds-signature/gcds-signature.tsx"],"names":[],"mappings":"AAAA,OAAO,EAAE,SAAS,EAAE,IAAI,EAAE,OAAO,EAAE,KAAK,EAAE,KAAK,EAAE,IAAI,EAAE,CAAC,EAAE,MAAM,eAAe,CAAC;AAChF,OAAO,EAAE,cAAc,EAAE,cAAc,EAAE,MAAM,mBAAmB,CAAC;AACnE,OAAO,IAAI,MAAM,aAAa,CAAC;AAE/B,OAAO,WAAW,MAAM,yBAAyB,CAAC;AAClD,OAAO,WAAW,MAAM,yBAAyB,CAAC;AAClD,OAAO,UAAU,MAAM,0BAA0B,CAAC;AAClD,OAAO,UAAU,MAAM,0BAA0B,CAAC;AAMlD,MAAM,OAAO,aAAa;;gBAWtB,WAAW;mBAaX,QAAQ;mBAYkC,KAAK;;;EAtBjD,YAAY,CAAC,QAAgB;IAC3B,IAAI,QAAQ,IAAI,WAAW,IAAI,QAAQ,IAAI,UAAU,EAAE;MACrD,IAAI,CAAC,IAAI,GAAG,WAAW,CAAC;KACzB;EACH,CAAC;EASD,eAAe,CAAC,QAAgB;IAC9B,IAAI,QAAQ,IAAI,QAAQ,IAAI,QAAQ,IAAI,OAAO,EAAE;MAC/C,IAAI,CAAC,OAAO,GAAG,QAAQ,CAAC;KACzB;EACH,CAAC;EAYD;;KAEG;EACH,UAAU;IACR,MAAM,QAAQ,GAAG,IAAI,gBAAgB,CAAC,SAAS,CAAC,EAAE;MAChD,IAAI,SAAS,CAAC,CAAC,CAAC,CAAC,QAAQ,IAAI,IAAI,CAAC,EAAE,CAAC,IAAI,EAAE;QACzC,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,EAAE,CAAC,IAAI,CAAC;OAC1B;IACH,CAAC,CAAC,CAAC;IACH,QAAQ,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE,EAAE,cAAc,CAAC,CAAC;EAC5C,CAAC;EAED,KAAK,CAAC,iBAAiB;IACrB,wBAAwB;IACxB,IAAI,CAAC,IAAI,GAAG,cAAc,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;IAEpC,IAAI,CAAC,YAAY,CAAC;IAClB,IAAI,CAAC,eAAe,CAAC;IAErB,IAAI,CAAC,UAAU,EAAE,CAAC;EACpB,CAAC;EAED,IAAY,SAAS;IACnB,QAAQ,IAAI,CAAC,IAAI,EAAE;MACjB,KAAK,UAAU;QACb,IAAI,IAAI,CAAC,IAAI,IAAI,IAAI,EAAE;UACrB,OAAO,UAAU,CAAC;SACnB;aAAM;UACL,OAAO,UAAU,CAAC;SACnB;MACH,KAAK,WAAW,CAAC;MACjB;QACE,IAAI,IAAI,CAAC,IAAI,IAAI,IAAI,EAAE;UACrB,OAAO,WAAW,CAAC;SACpB;aAAM;UACL,OAAO,WAAW,CAAC;SACpB;KACJ;EACH,CAAC;EAED,MAAM;IACJ,MAAM,EAAE,IAAI,EAAE,OAAO,EAAE,IAAI,EAAE,SAAS,EAAE,GAAG,IAAI,CAAC;IAEhD,OAAO,CACL,EAAC,IAAI,QACF,OAAO,IAAI,IAAI,KAAK,WAAW,CAAC,CAAC,CAAC;IACjC,uDAAuD;IACvD,SAAG,IAAI,EAAE,IAAI,CAAC,IAAI,CAAC,CAAC,IAAI,EAAE,SAAS,EAAE,SAAS,GAAM,CACrD,CAAC,CAAC,CAAC,CACF,WAAK,KAAK,EAAC,gBAAgB,EAAC,SAAS,EAAE,SAAS,GAAQ,CACzD,CACI,CACR,CAAC;EACJ,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CACF","sourcesContent":["import { Component, Host, Element, Watch, State, Prop, h } from '@stencil/core';\nimport { assignLanguage, observerConfig } from '../../utils/utils';\nimport i18n from './i18n/i18n';\n\nimport SignatureEn from './assets/sig-blk-en.svg';\nimport SignatureFr from './assets/sig-blk-fr.svg';\nimport WordmarkEn from './assets/wmms-spl-en.svg';\nimport WordmarkFr from './assets/wmms-spl-fr.svg';\n\n@Component({\n  tag: 'gcds-signature',\n  styleUrl: 'gcds-signature.css',\n})\nexport class GcdsSignature {\n  @Element() el: HTMLElement;\n\n  /**\n   * Props\n   */\n\n  /**\n   * The type of graphic to render\n   */\n  @Prop({ reflect: true, mutable: true }) type: 'signature' | 'wordmark' =\n    'signature';\n\n  @Watch('type')\n  validateType(newValue: string) {\n    if (newValue != 'signature' && newValue != 'wordmark') {\n      this.type = 'signature';\n    }\n  }\n\n  /**\n   * The colour variant to render\n   */\n  @Prop({ reflect: true, mutable: true }) variant: 'colour' | 'white' =\n    'colour';\n\n  @Watch('variant')\n  validateVariant(newValue: string) {\n    if (newValue != 'colour' && newValue != 'white') {\n      this.variant = 'colour';\n    }\n  }\n\n  /**\n   * Has link to canada.ca. Only applies to signature\n   */\n  @Prop({ mutable: true }) hasLink: boolean = false;\n\n  /**\n   * Language of rendered component\n   */\n  @State() lang: string;\n\n  /*\n   * Observe lang attribute change\n   */\n  updateLang() {\n    const observer = new MutationObserver(mutations => {\n      if (mutations[0].oldValue != this.el.lang) {\n        this.lang = this.el.lang;\n      }\n    });\n    observer.observe(this.el, observerConfig);\n  }\n\n  async componentWillLoad() {\n    // Define lang attribute\n    this.lang = assignLanguage(this.el);\n\n    this.validateType;\n    this.validateVariant;\n\n    this.updateLang();\n  }\n\n  private get selectSVG() {\n    switch (this.type) {\n      case 'wordmark':\n        if (this.lang == 'en') {\n          return WordmarkEn;\n        } else {\n          return WordmarkFr;\n        }\n      case 'signature':\n      default:\n        if (this.lang == 'en') {\n          return SignatureEn;\n        } else {\n          return SignatureFr;\n        }\n    }\n  }\n\n  render() {\n    const { type, hasLink, lang, selectSVG } = this;\n\n    return (\n      <Host>\n        {hasLink && type === 'signature' ? (\n          // eslint-disable-next-line jsx-a11y/anchor-has-content\n          <a href={i18n[lang].link} innerHTML={selectSVG}></a>\n        ) : (\n          <div class=\"gcds-signature\" innerHTML={selectSVG}></div>\n        )}\n      </Host>\n    );\n  }\n}\n"]}