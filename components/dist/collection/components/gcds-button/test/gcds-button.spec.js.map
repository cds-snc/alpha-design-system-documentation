{"version":3,"file":"gcds-button.spec.js","sourceRoot":"","sources":["../../../../src/components/gcds-button/test/gcds-button.spec.ts"],"names":[],"mappings":"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","sourcesContent":["import { newSpecPage } from '@stencil/core/testing';\nimport { GcdsButton } from '../gcds-button';\n\ndescribe('gcds-button', () => {\n  it('renders with no passed properties', async () => {\n    const { root } = await newSpecPage({\n      components: [GcdsButton],\n      html: '<gcds-button>Button Label</gcds-button>',\n    });\n    expect(root).toEqualHtml(`\n      <gcds-button>\n        <mock:shadow-root>\n          <button class=\"gcds-button button--regular button--role-primary\" part=\"button\" type=\"button\">\n            <slot></slot>\n          </button>\n        </mock:shadow-root>\n        Button Label\n      </gcds-button>\n    `);\n  });\n\n  /*\n   * Type tests\n   */\n\n  it('renders type button', async () => {\n    const { root } = await newSpecPage({\n      components: [GcdsButton],\n      html: `<gcds-button type=\"button\">Button Label</gcds-button>`,\n    });\n    expect(root).toEqualHtml(`\n      <gcds-button type=\"button\">\n        <mock:shadow-root>\n          <button class=\"gcds-button button--role-primary button--regular\" part=\"button\" type=\"button\">\n            <slot></slot>\n          </button>\n        </mock:shadow-root>\n        Button Label\n      </gcds-button>\n    `);\n  });\n\n  it('renders type reset', async () => {\n    const { root } = await newSpecPage({\n      components: [GcdsButton],\n      html: `<gcds-button type=\"reset\">Button Label</gcds-button>`,\n    });\n    expect(root).toEqualHtml(`\n      <gcds-button type=\"reset\">\n        <mock:shadow-root>\n          <button class=\"gcds-button button--role-primary button--regular\" part=\"button\" type=\"reset\">\n            <slot></slot>\n          </button>\n        </mock:shadow-root>\n        Button Label\n      </gcds-button>\n    `);\n  });\n\n  it('renders type submit', async () => {\n    const { root } = await newSpecPage({\n      components: [GcdsButton],\n      html: `<gcds-button type=\"submit\">Button Label</gcds-button>`,\n    });\n    expect(root).toEqualHtml(`\n      <gcds-button type=\"submit\">\n        <mock:shadow-root>\n          <button class=\"gcds-button button--role-primary button--regular\" part=\"button\" type=\"submit\">\n            <slot></slot>\n          </button>\n        </mock:shadow-root>\n        Button Label\n      </gcds-button>\n    `);\n  });\n\n  it('renders type link', async () => {\n    const { root } = await newSpecPage({\n      components: [GcdsButton],\n      html: `<gcds-button type=\"link\" href=\"#\">Link Label</gcds-button>`,\n    });\n    expect(root).toEqualHtml(`\n      <gcds-button href=\"#\" type=\"link\">\n        <mock:shadow-root>\n          <a class=\"gcds-button button--role-primary button--regular\" part=\"button\" href=\"#\">\n            <slot></slot>\n          </a>\n        </mock:shadow-root>\n        Link Label\n      </gcds-button>\n    `);\n  });\n\n  /*\n   * Task tests\n   */\n\n  it('renders button-role primary', async () => {\n    const { root } = await newSpecPage({\n      components: [GcdsButton],\n      html: `<gcds-button button-role=\"primary\">Button Label</gcds-button>`,\n    });\n    expect(root).toEqualHtml(`\n      <gcds-button button-role=\"primary\">\n        <mock:shadow-root>\n          <button class=\"gcds-button button--role-primary button--regular\" part=\"button\" type=\"button\">\n            <slot></slot>\n          </button>\n        </mock:shadow-root>\n        Button Label\n      </gcds-button>\n    `);\n  });\n\n  it('renders button-role secondary', async () => {\n    const { root } = await newSpecPage({\n      components: [GcdsButton],\n      html: `<gcds-button button-role=\"secondary\">Button Label</gcds-button>`,\n    });\n    expect(root).toEqualHtml(`\n      <gcds-button button-role=\"secondary\">\n        <mock:shadow-root>\n          <button class=\"gcds-button button--role-secondary button--regular\" part=\"button\" type=\"button\">\n            <slot></slot>\n          </button>\n        </mock:shadow-root>\n        Button Label\n      </gcds-button>\n    `);\n  });\n\n  it('renders button-role danger', async () => {\n    const { root } = await newSpecPage({\n      components: [GcdsButton],\n      html: `<gcds-button button-role=\"danger\">Button Label</gcds-button>`,\n    });\n    expect(root).toEqualHtml(`\n      <gcds-button button-role=\"danger\">\n        <mock:shadow-root>\n          <button class=\"gcds-button button--role-danger button--regular\" part=\"button\" type=\"button\">\n            <slot></slot>\n          </button>\n        </mock:shadow-root>\n        Button Label\n      </gcds-button>\n    `);\n  });\n\n  /*\n   * Variant tests\n   */\n\n  it('renders external link with label + icon', async () => {\n    const { root } = await newSpecPage({\n      components: [GcdsButton],\n      html: `<gcds-button type=\"link\" button-style=\"text-only\" href=\"https://google.com\" target=\"_blank\">Button Label</gcds-button>`,\n    });\n    expect(root).toEqualHtml(`\n      <gcds-button type=\"link\" button-style=\"text-only\" href=\"https://google.com\" target=\"_blank\">\n        <mock:shadow-root>\n          <a class=\"gcds-button button--role-primary button--regular\" href=\"https://google.com\" part=\"button\" target=\"_blank\">\n            <slot></slot>\n            <gcds-icon name=\"external-link\" label=\"Opens in a new tab.\" margin-left=\"200\" />\n          </a>\n        </mock:shadow-root>\n        Button Label\n      </gcds-button>\n    `);\n  });\n});\n"]}