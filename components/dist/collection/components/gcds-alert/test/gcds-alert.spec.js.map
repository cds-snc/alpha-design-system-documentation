{"version":3,"file":"gcds-alert.spec.js","sourceRoot":"","sources":["../../../../src/components/gcds-alert/test/gcds-alert.spec.tsx"],"names":[],"mappings":"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","sourcesContent":["import { newSpecPage } from '@stencil/core/testing';\nimport { GcdsAlert } from '../gcds-alert';\n\ndescribe('gcds-alert', () => {\n  it('renders', async () => {\n    const page = await newSpecPage({\n      components: [GcdsAlert],\n      html: `<gcds-alert heading=\"Main notification title\"></gcds-alert>`,\n    });\n    expect(page.root).toEqualHtml(`\n      <gcds-alert heading=\"Main notification title\">\n        <mock:shadow-root>\n          <div aria-label=\"This is an info alert.\" class=\"gcds-alert alert--role-info\" role=\"alert\">\n            <gcds-container centered=\"\" size=\"full\">\n              <div class=\"alert__container\">\n                <gcds-icon aria-hidden=\"true\" class=\"alert__icon\" name=\"info-circle\" size=\"h5\"></gcds-icon>\n\n                <div class=\"alert__content\">\n                  <p class=\"alert__heading\"><strong>Main notification title</strong></p>\n                  <slot></slot>\n                </div>\n\n                <button class=\"alert__close-btn\" aria-label=\"Close alert.\">\n                  <gcds-icon aria-hidden=\"true\" name=\"times\" size=\"text\"></gcds-icon>\n                </button>\n              </div>\n            </gcds-container>\n          </div>\n        </mock:shadow-root>\n      </gcds-alert>\n    `);\n  });\n\n  /**\n   * Role tests\n   */\n\n  it('renders alert-role=\"danger\"', async () => {\n    const page = await newSpecPage({\n      components: [GcdsAlert],\n      html: `<gcds-alert heading=\"Main notification title\" alert-role=\"danger\"></gcds-alert>`,\n    });\n    expect(page.root).toEqualHtml(`\n      <gcds-alert heading=\"Main notification title\" alert-role=\"danger\">\n        <mock:shadow-root>\n          <div aria-label=\"This is a critical alert.\" class=\"gcds-alert alert--role-danger\" role=\"alert\">\n            <gcds-container centered=\"\" size=\"full\">\n              <div class=\"alert__container\">\n                <gcds-icon aria-hidden=\"true\" class=\"alert__icon\" name=\"exclamation-circle\" size=\"h5\"></gcds-icon>\n\n                <div class=\"alert__content\">\n                  <p class=\"alert__heading\"><strong>Main notification title</strong></p>\n                  <slot></slot>\n                </div>\n\n                <button class=\"alert__close-btn\" aria-label=\"Close alert.\">\n                  <gcds-icon aria-hidden=\"true\" name=\"times\" size=\"text\"></gcds-icon>\n                </button>\n              </div>\n            </gcds-container>\n          </div>\n        </mock:shadow-root>\n      </gcds-alert>\n    `);\n  });\n\n  it('renders alert-role=\"info\"', async () => {\n    const page = await newSpecPage({\n      components: [GcdsAlert],\n      html: `<gcds-alert heading=\"Main notification title\" alert-role=\"info\"></gcds-alert>`,\n    });\n    expect(page.root).toEqualHtml(`\n      <gcds-alert heading=\"Main notification title\" alert-role=\"info\">\n        <mock:shadow-root>\n          <div aria-label=\"This is an info alert.\" class=\"gcds-alert alert--role-info\" role=\"alert\">\n            <gcds-container centered=\"\" size=\"full\">\n              <div class=\"alert__container\">\n                <gcds-icon aria-hidden=\"true\" class=\"alert__icon\" name=\"info-circle\" size=\"h5\"></gcds-icon>\n\n                <div class=\"alert__content\">\n                  <p class=\"alert__heading\"><strong>Main notification title</strong></p>\n                  <slot></slot>\n                </div>\n\n                <button class=\"alert__close-btn\" aria-label=\"Close alert.\">\n                  <gcds-icon aria-hidden=\"true\" name=\"times\" size=\"text\"></gcds-icon>\n                </button>\n              </div>\n            </gcds-container>\n          </div>\n        </mock:shadow-root>\n      </gcds-alert>\n    `);\n  });\n\n  it('renders alert-role=\"success\"', async () => {\n    const page = await newSpecPage({\n      components: [GcdsAlert],\n      html: `<gcds-alert heading=\"Main notification title\" alert-role=\"success\"></gcds-alert>`,\n    });\n    expect(page.root).toEqualHtml(`\n      <gcds-alert heading=\"Main notification title\" alert-role=\"success\">\n        <mock:shadow-root>\n          <div aria-label=\"This is a success alert.\" class=\"gcds-alert alert--role-success\" role=\"alert\">\n            <gcds-container centered=\"\" size=\"full\">\n              <div class=\"alert__container\">\n                <gcds-icon aria-hidden=\"true\" class=\"alert__icon\" name=\"check-circle\" size=\"h5\"></gcds-icon>\n\n                <div class=\"alert__content\">\n                  <p class=\"alert__heading\"><strong>Main notification title</strong></p>\n                  <slot></slot>\n                </div>\n\n                <button class=\"alert__close-btn\" aria-label=\"Close alert.\">\n                  <gcds-icon aria-hidden=\"true\" name=\"times\" size=\"text\"></gcds-icon>\n                </button>\n              </div>\n            </gcds-container>\n          </div>\n        </mock:shadow-root>\n      </gcds-alert>\n    `);\n  });\n\n  it('renders alert-role=\"warning\"', async () => {\n    const page = await newSpecPage({\n      components: [GcdsAlert],\n      html: `<gcds-alert heading=\"Main notification title\" alert-role=\"warning\"></gcds-alert>`,\n    });\n    expect(page.root).toEqualHtml(`\n      <gcds-alert heading=\"Main notification title\" alert-role=\"warning\">\n        <mock:shadow-root>\n          <div aria-label=\"This is a warning alert.\" class=\"gcds-alert alert--role-warning\" role=\"alert\">\n            <gcds-container centered=\"\" size=\"full\">\n              <div class=\"alert__container\">\n                <gcds-icon aria-hidden=\"true\" class=\"alert__icon\" name=\"exclamation-triangle\" size=\"h5\"></gcds-icon>\n\n                <div class=\"alert__content\">\n                  <p class=\"alert__heading\"><strong>Main notification title</strong></p>\n                  <slot></slot>\n                </div>\n\n                <button class=\"alert__close-btn\" aria-label=\"Close alert.\">\n                  <gcds-icon aria-hidden=\"true\" name=\"times\" size=\"text\"></gcds-icon>\n                </button>\n              </div>\n            </gcds-container>\n          </div>\n        </mock:shadow-root>\n      </gcds-alert>\n    `);\n  });\n\n  /**\n   * Role tests french\n   */\n\n  it('renders alert-role=\"danger\" in french', async () => {\n    const page = await newSpecPage({\n      components: [GcdsAlert],\n      html: `<gcds-alert lang=\"fr\" heading=\"Main notification title\" alert-role=\"danger\"></gcds-alert>`,\n    });\n    expect(page.root).toEqualHtml(`\n      <gcds-alert lang=\"fr\" heading=\"Main notification title\" alert-role=\"danger\">\n        <mock:shadow-root>\n          <div aria-label=\"Ceci est une alerte d'effacement.\" class=\"gcds-alert alert--role-danger\" role=\"alert\">\n            <gcds-container centered=\"\" size=\"full\">\n              <div class=\"alert__container\">\n                <gcds-icon aria-hidden=\"true\" class=\"alert__icon\" name=\"exclamation-circle\" size=\"h5\"></gcds-icon>\n\n                <div class=\"alert__content\">\n                  <p class=\"alert__heading\"><strong>Main notification title</strong></p>\n                  <slot></slot>\n                </div>\n\n                <button class=\"alert__close-btn\" aria-label=\"Fermer l'alerte.\">\n                  <gcds-icon aria-hidden=\"true\" name=\"times\" size=\"text\"></gcds-icon>\n                </button>\n              </div>\n            </gcds-container>\n          </div>\n        </mock:shadow-root>\n      </gcds-alert>\n    `);\n  });\n\n  it('renders alert-role=\"info\" in french', async () => {\n    const page = await newSpecPage({\n      components: [GcdsAlert],\n      html: `<gcds-alert lang=\"fr\" heading=\"Main notification title\" alert-role=\"info\"></gcds-alert>`,\n    });\n    expect(page.root).toEqualHtml(`\n      <gcds-alert lang=\"fr\" heading=\"Main notification title\" alert-role=\"info\">\n        <mock:shadow-root>\n          <div aria-label=\"Ceci est une alerte d'information.\" class=\"gcds-alert alert--role-info\" role=\"alert\">\n            <gcds-container centered=\"\" size=\"full\">\n              <div class=\"alert__container\">\n                <gcds-icon aria-hidden=\"true\" class=\"alert__icon\" name=\"info-circle\" size=\"h5\"></gcds-icon>\n\n                <div class=\"alert__content\">\n                  <p class=\"alert__heading\"><strong>Main notification title</strong></p>\n                  <slot></slot>\n                </div>\n\n                <button class=\"alert__close-btn\" aria-label=\"Fermer l'alerte.\">\n                  <gcds-icon aria-hidden=\"true\" name=\"times\" size=\"text\"></gcds-icon>\n                </button>\n              </div>\n            </gcds-container>\n          </div>\n        </mock:shadow-root>\n      </gcds-alert>\n    `);\n  });\n\n  it('renders alert-role=\"success\" in french', async () => {\n    const page = await newSpecPage({\n      components: [GcdsAlert],\n      html: `<gcds-alert lang=\"fr\" heading=\"Main notification title\" alert-role=\"success\"></gcds-alert>`,\n    });\n    expect(page.root).toEqualHtml(`\n      <gcds-alert lang=\"fr\" heading=\"Main notification title\" alert-role=\"success\">\n        <mock:shadow-root>\n          <div aria-label=\"Ceci est une alerte de succès.\" class=\"gcds-alert alert--role-success\" role=\"alert\">\n            <gcds-container centered=\"\" size=\"full\">\n              <div class=\"alert__container\">\n                <gcds-icon aria-hidden=\"true\" class=\"alert__icon\" name=\"check-circle\" size=\"h5\"></gcds-icon>\n\n                <div class=\"alert__content\">\n                  <p class=\"alert__heading\"><strong>Main notification title</strong></p>\n                  <slot></slot>\n                </div>\n\n                <button class=\"alert__close-btn\" aria-label=\"Fermer l'alerte.\">\n                  <gcds-icon aria-hidden=\"true\" name=\"times\" size=\"text\"></gcds-icon>\n                </button>\n              </div>\n            </gcds-container>\n          </div>\n        </mock:shadow-root>\n      </gcds-alert>\n    `);\n  });\n\n  it('renders alert-role=\"warning\" in french', async () => {\n    const page = await newSpecPage({\n      components: [GcdsAlert],\n      html: `<gcds-alert lang=\"fr\" heading=\"Main notification title\" alert-role=\"warning\"></gcds-alert>`,\n    });\n    expect(page.root).toEqualHtml(`\n      <gcds-alert lang=\"fr\" heading=\"Main notification title\" alert-role=\"warning\">\n        <mock:shadow-root>\n          <div aria-label=\"Ceci est une alerte d'avertissement.\" class=\"gcds-alert alert--role-warning\" role=\"alert\">\n            <gcds-container centered=\"\" size=\"full\">\n              <div class=\"alert__container\">\n                <gcds-icon aria-hidden=\"true\" class=\"alert__icon\" name=\"exclamation-triangle\" size=\"h5\"></gcds-icon>\n\n                <div class=\"alert__content\">\n                  <p class=\"alert__heading\"><strong>Main notification title</strong></p>\n                  <slot></slot>\n                </div>\n\n                <button class=\"alert__close-btn\" aria-label=\"Fermer l'alerte.\">\n                  <gcds-icon aria-hidden=\"true\" name=\"times\" size=\"text\"></gcds-icon>\n                </button>\n              </div>\n            </gcds-container>\n          </div>\n        </mock:shadow-root>\n      </gcds-alert>\n    `);\n  });\n\n  /**\n   * Fixed position test\n   */\n\n  it('renders with position fixed', async () => {\n    const page = await newSpecPage({\n      components: [GcdsAlert],\n      html: `<gcds-alert heading=\"Main notification title\" is-fixed></gcds-alert>`,\n    });\n    expect(page.root).toEqualHtml(`\n      <gcds-alert heading=\"Main notification title\" is-fixed>\n        <mock:shadow-root>\n          <div aria-label=\"This is an info alert.\" class=\"gcds-alert alert--role-info alert--is-fixed\" role=\"alert\">\n            <gcds-container centered=\"\" size=\"full\">\n              <div class=\"alert__container\">\n                <gcds-icon aria-hidden=\"true\" class=\"alert__icon\" name=\"info-circle\" size=\"h5\"></gcds-icon>\n\n                <div class=\"alert__content\">\n                  <p class=\"alert__heading\"><strong>Main notification title</strong></p>\n                  <slot></slot>\n                </div>\n\n                <button class=\"alert__close-btn\" aria-label=\"Close alert.\">\n                  <gcds-icon aria-hidden=\"true\" name=\"times\" size=\"text\"></gcds-icon>\n                </button>\n              </div>\n            </gcds-container>\n          </div>\n        </mock:shadow-root>\n      </gcds-alert>\n    `);\n  });\n\n  it('renders without position fixed', async () => {\n    const page = await newSpecPage({\n      components: [GcdsAlert],\n      html: `<gcds-alert heading=\"Main notification title\"></gcds-alert>`,\n    });\n    expect(page.root).toEqualHtml(`\n      <gcds-alert heading=\"Main notification title\">\n        <mock:shadow-root>\n          <div aria-label=\"This is an info alert.\" class=\"gcds-alert alert--role-info\" role=\"alert\">\n            <gcds-container centered=\"\" size=\"full\">\n              <div class=\"alert__container\">\n                <gcds-icon aria-hidden=\"true\" class=\"alert__icon\" name=\"info-circle\" size=\"h5\"></gcds-icon>\n\n                <div class=\"alert__content\">\n                  <p class=\"alert__heading\"><strong>Main notification title</strong></p>\n                  <slot></slot>\n                </div>\n\n                <button class=\"alert__close-btn\" aria-label=\"Close alert.\">\n                  <gcds-icon aria-hidden=\"true\" name=\"times\" size=\"text\"></gcds-icon>\n                </button>\n              </div>\n            </gcds-container>\n          </div>\n        </mock:shadow-root>\n      </gcds-alert>\n    `);\n  });\n\n  /**\n   * Container width tests\n   */\n\n  it('renders container width full if position is fixed', async () => {\n    const page = await newSpecPage({\n      components: [GcdsAlert],\n      html: `<gcds-alert heading=\"Main notification title\" container=\"full\" is-fixed></gcds-alert>`,\n    });\n    expect(page.root).toEqualHtml(`\n      <gcds-alert heading=\"Main notification title\" container=\"full\" is-fixed>\n        <mock:shadow-root>\n          <div aria-label=\"This is an info alert.\" class=\"gcds-alert alert--role-info alert--is-fixed\" role=\"alert\">\n            <gcds-container centered=\"\" size=\"full\">\n              <div class=\"alert__container\">\n                <gcds-icon aria-hidden=\"true\" class=\"alert__icon\" name=\"info-circle\" size=\"h5\"></gcds-icon>\n\n                <div class=\"alert__content\">\n                  <p class=\"alert__heading\"><strong>Main notification title</strong></p>\n                  <slot></slot>\n                </div>\n\n                <button class=\"alert__close-btn\" aria-label=\"Close alert.\">\n                  <gcds-icon aria-hidden=\"true\" name=\"times\" size=\"text\"></gcds-icon>\n                </button>\n              </div>\n            </gcds-container>\n          </div>\n        </mock:shadow-root>\n      </gcds-alert>\n    `);\n  });\n\n  it('renders container width xl if position is fixed', async () => {\n    const page = await newSpecPage({\n      components: [GcdsAlert],\n      html: `<gcds-alert heading=\"Main notification title\" container=\"xl\" is-fixed></gcds-alert>`,\n    });\n    expect(page.root).toEqualHtml(`\n      <gcds-alert heading=\"Main notification title\" container=\"xl\" is-fixed>\n        <mock:shadow-root>\n          <div aria-label=\"This is an info alert.\" class=\"gcds-alert alert--role-info alert--is-fixed\" role=\"alert\">\n            <gcds-container centered=\"\" size=\"xl\">\n              <div class=\"alert__container\">\n                <gcds-icon aria-hidden=\"true\" class=\"alert__icon\" name=\"info-circle\" size=\"h5\"></gcds-icon>\n\n                <div class=\"alert__content\">\n                  <p class=\"alert__heading\"><strong>Main notification title</strong></p>\n                  <slot></slot>\n                </div>\n\n                <button class=\"alert__close-btn\" aria-label=\"Close alert.\">\n                  <gcds-icon aria-hidden=\"true\" name=\"times\" size=\"text\"></gcds-icon>\n                </button>\n              </div>\n            </gcds-container>\n          </div>\n        </mock:shadow-root>\n      </gcds-alert>\n    `);\n  });\n\n  it('renders container width lg if position is fixed', async () => {\n    const page = await newSpecPage({\n      components: [GcdsAlert],\n      html: `<gcds-alert heading=\"Main notification title\" container=\"lg\" is-fixed></gcds-alert>`,\n    });\n    expect(page.root).toEqualHtml(`\n      <gcds-alert heading=\"Main notification title\" container=\"lg\" is-fixed>\n        <mock:shadow-root>\n          <div aria-label=\"This is an info alert.\" class=\"gcds-alert alert--role-info alert--is-fixed\" role=\"alert\">\n            <gcds-container centered=\"\" size=\"lg\">\n              <div class=\"alert__container\">\n                <gcds-icon aria-hidden=\"true\" class=\"alert__icon\" name=\"info-circle\" size=\"h5\"></gcds-icon>\n\n                <div class=\"alert__content\">\n                  <p class=\"alert__heading\"><strong>Main notification title</strong></p>\n                  <slot></slot>\n                </div>\n\n                <button class=\"alert__close-btn\" aria-label=\"Close alert.\">\n                  <gcds-icon aria-hidden=\"true\" name=\"times\" size=\"text\"></gcds-icon>\n                </button>\n              </div>\n            </gcds-container>\n          </div>\n        </mock:shadow-root>\n      </gcds-alert>\n    `);\n  });\n\n  it('renders container width md if position is fixed', async () => {\n    const page = await newSpecPage({\n      components: [GcdsAlert],\n      html: `<gcds-alert heading=\"Main notification title\" container=\"md\" is-fixed></gcds-alert>`,\n    });\n    expect(page.root).toEqualHtml(`\n      <gcds-alert heading=\"Main notification title\" container=\"md\" is-fixed>\n        <mock:shadow-root>\n          <div aria-label=\"This is an info alert.\" class=\"gcds-alert alert--role-info alert--is-fixed\" role=\"alert\">\n            <gcds-container centered=\"\" size=\"md\">\n              <div class=\"alert__container\">\n                <gcds-icon aria-hidden=\"true\" class=\"alert__icon\" name=\"info-circle\" size=\"h5\"></gcds-icon>\n\n                <div class=\"alert__content\">\n                  <p class=\"alert__heading\"><strong>Main notification title</strong></p>\n                  <slot></slot>\n                </div>\n\n                <button class=\"alert__close-btn\" aria-label=\"Close alert.\">\n                  <gcds-icon aria-hidden=\"true\" name=\"times\" size=\"text\"></gcds-icon>\n                </button>\n              </div>\n            </gcds-container>\n          </div>\n        </mock:shadow-root>\n      </gcds-alert>\n    `);\n  });\n\n  it('renders container width sm if position is fixed', async () => {\n    const page = await newSpecPage({\n      components: [GcdsAlert],\n      html: `<gcds-alert heading=\"Main notification title\" container=\"sm\" is-fixed></gcds-alert>`,\n    });\n    expect(page.root).toEqualHtml(`\n      <gcds-alert heading=\"Main notification title\" container=\"sm\" is-fixed>\n        <mock:shadow-root>\n          <div aria-label=\"This is an info alert.\" class=\"gcds-alert alert--role-info alert--is-fixed\" role=\"alert\">\n            <gcds-container centered=\"\" size=\"sm\">\n              <div class=\"alert__container\">\n                <gcds-icon aria-hidden=\"true\" class=\"alert__icon\" name=\"info-circle\" size=\"h5\"></gcds-icon>\n\n                <div class=\"alert__content\">\n                  <p class=\"alert__heading\"><strong>Main notification title</strong></p>\n                  <slot></slot>\n                </div>\n\n                <button class=\"alert__close-btn\" aria-label=\"Close alert.\">\n                  <gcds-icon aria-hidden=\"true\" name=\"times\" size=\"text\"></gcds-icon>\n                </button>\n              </div>\n            </gcds-container>\n          </div>\n        </mock:shadow-root>\n      </gcds-alert>\n    `);\n  });\n\n  it('renders container width xs if position is fixed', async () => {\n    const page = await newSpecPage({\n      components: [GcdsAlert],\n      html: `<gcds-alert heading=\"Main notification title\" container=\"xs\" is-fixed></gcds-alert>`,\n    });\n    expect(page.root).toEqualHtml(`\n      <gcds-alert heading=\"Main notification title\" container=\"xs\" is-fixed>\n        <mock:shadow-root>\n          <div aria-label=\"This is an info alert.\" class=\"gcds-alert alert--role-info alert--is-fixed\" role=\"alert\">\n            <gcds-container centered=\"\" size=\"xs\">\n              <div class=\"alert__container\">\n                <gcds-icon aria-hidden=\"true\" class=\"alert__icon\" name=\"info-circle\" size=\"h5\"></gcds-icon>\n\n                <div class=\"alert__content\">\n                  <p class=\"alert__heading\"><strong>Main notification title</strong></p>\n                  <slot></slot>\n                </div>\n\n                <button class=\"alert__close-btn\" aria-label=\"Close alert.\">\n                  <gcds-icon aria-hidden=\"true\" name=\"times\" size=\"text\"></gcds-icon>\n                </button>\n              </div>\n            </gcds-container>\n          </div>\n        </mock:shadow-root>\n      </gcds-alert>\n    `);\n  });\n\n  /**\n   * Hide close button test\n   */\n\n  it('renders with close button hidden', async () => {\n    const page = await newSpecPage({\n      components: [GcdsAlert],\n      html: `<gcds-alert heading=\"Main notification title\" hide-close-btn></gcds-alert>`,\n    });\n    expect(page.root).toEqualHtml(`\n      <gcds-alert heading=\"Main notification title\" hide-close-btn>\n        <mock:shadow-root>\n          <div aria-label=\"This is an info alert.\" class=\"gcds-alert alert--role-info\" role=\"alert\">\n            <gcds-container centered=\"\" size=\"full\">\n              <div class=\"alert__container\">\n                <gcds-icon aria-hidden=\"true\" class=\"alert__icon\" name=\"info-circle\" size=\"h5\"></gcds-icon>\n\n                <div class=\"alert__content\">\n                  <p class=\"alert__heading\"><strong>Main notification title</strong></p>\n                  <slot></slot>\n                </div>\n              </div>\n            </gcds-container>\n          </div>\n        </mock:shadow-root>\n      </gcds-alert>\n    `);\n  });\n\n  /**\n   * Hide role icon test\n   */\n\n  it('renders with role icon hidden', async () => {\n    const page = await newSpecPage({\n      components: [GcdsAlert],\n      html: `<gcds-alert heading=\"Main notification title\" hide-role-icon></gcds-alert>`,\n    });\n    expect(page.root).toEqualHtml(`\n      <gcds-alert heading=\"Main notification title\" hide-role-icon>\n        <mock:shadow-root>\n          <div aria-label=\"This is an info alert.\" class=\"gcds-alert alert--role-info\" role=\"alert\">\n            <gcds-container centered=\"\" size=\"full\">\n              <div class=\"alert__container\">\n                <div class=\"alert__content\">\n                  <p class=\"alert__heading\"><strong>Main notification title</strong></p>\n                  <slot></slot>\n                </div>\n\n                <button class=\"alert__close-btn\" aria-label=\"Close alert.\">\n                  <gcds-icon aria-hidden=\"true\" name=\"times\" size=\"text\"></gcds-icon>\n                </button>\n              </div>\n            </gcds-container>\n          </div>\n        </mock:shadow-root>\n      </gcds-alert>\n    `);\n  });\n\n  /**\n   * Slot content test\n   */\n\n  it('renders with slot content', async () => {\n    const page = await newSpecPage({\n      components: [GcdsAlert],\n      html: `\n        <gcds-alert heading=\"Main notification title\">\n          <p>Testing slot content.</p>\n        </gcds-alert>\n      `,\n    });\n    expect(page.root).toEqualHtml(`\n      <gcds-alert heading=\"Main notification title\">\n        <mock:shadow-root>\n          <div aria-label=\"This is an info alert.\" class=\"gcds-alert alert--role-info\" role=\"alert\">\n            <gcds-container centered=\"\" size=\"full\">\n              <div class=\"alert__container\">\n                <gcds-icon aria-hidden=\"true\" class=\"alert__icon\" name=\"info-circle\" size=\"h5\"></gcds-icon>\n\n                <div class=\"alert__content\">\n                  <p class=\"alert__heading\"><strong>Main notification title</strong></p>\n                  <slot></slot>\n                </div>\n\n                <button class=\"alert__close-btn\" aria-label=\"Close alert.\">\n                  <gcds-icon aria-hidden=\"true\" name=\"times\" size=\"text\"></gcds-icon>\n                </button>\n              </div>\n            </gcds-container>\n          </div>\n        </mock:shadow-root>\n        <p>Testing slot content.</p>\n      </gcds-alert>\n    `);\n  });\n});\n"]}