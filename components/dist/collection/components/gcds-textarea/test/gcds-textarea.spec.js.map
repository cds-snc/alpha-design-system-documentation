{"version":3,"file":"gcds-textarea.spec.js","sourceRoot":"","sources":["../../../../src/components/gcds-textarea/test/gcds-textarea.spec.ts"],"names":[],"mappings":"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","sourcesContent":["import { newSpecPage } from '@stencil/core/testing';\nimport { GcdsTextarea } from '../gcds-textarea';\n\ndescribe('gcds-textarea', () => {\n  it('renders with minimum required properties', async () => {\n    const { root } = await newSpecPage({\n      components: [GcdsTextarea],\n      html: '<gcds-textarea label=\"Label\" textarea-id=\"textarea-renders\" />',\n    });\n    expect(root).toEqualHtml(`\n      <gcds-textarea label=\"Label\" textarea-id=\"textarea-renders\">\n        <div class=\"gcds-textarea-wrapper\">\n          <gcds-label label-for=\"textarea-renders\" label=\"Label\" lang=\"en\"></gcds-label>\n          <textarea\n            id=\"textarea-renders\"\n            name=\"textarea-renders\"\n            aria-labelledby=\"label-for-textarea-renders\"\n            aria-invalid=\"false\"\n            rows=\"5\"\n          ></textarea>\n        </div>\n      </gcds-textarea>\n    `);\n  });\n\n  /**\n   * Character count\n   */\n  it('renders textarea with character count in EN', async () => {\n    const { root } = await newSpecPage({\n      components: [GcdsTextarea],\n      html: '<gcds-textarea label=\"Label\" textarea-id=\"character-count\" value=\"Value Test\" character-count=\"22\" />',\n    });\n    expect(root).toEqualHtml(`\n      <gcds-textarea label=\"Label\" textarea-id=\"character-count\" value=\"Value Test\" character-count=\"22\">\n        <div class=\"gcds-textarea-wrapper\">\n          <gcds-label label-for=\"character-count\" label=\"Label\" lang=\"en\"></gcds-label>\n          <textarea\n            id=\"character-count\"\n            name=\"character-count\"\n            aria-labelledby=\"label-for-character-count\"\n            aria-describedby=\"textarea__count-character-count \"\n            aria-invalid=\"false\"\n            rows=\"5\"\n            maxlength=\"22\"\n          >Value Test</textarea>\n          <p id=\"textarea__count-character-count\" aria-live=\"polite\">12 characters left</p>\n        </div>\n      </gcds-textarea>\n    `);\n  });\n\n  it('renders textarea with character count in FR', async () => {\n    const { root } = await newSpecPage({\n      components: [GcdsTextarea],\n      html: '<gcds-textarea lang=\"fr\" label=\"Label\" textarea-id=\"character-count\" value=\"Value Test\" character-count=\"22\" />',\n    });\n    expect(root).toEqualHtml(`\n      <gcds-textarea lang=\"fr\" label=\"Label\" textarea-id=\"character-count\" value=\"Value Test\" character-count=\"22\">\n        <div class=\"gcds-textarea-wrapper\">\n          <gcds-label label-for=\"character-count\" label=\"Label\" lang=\"fr\"></gcds-label>\n          <textarea\n            id=\"character-count\"\n            name=\"character-count\"\n            aria-labelledby=\"label-for-character-count\"\n            aria-describedby=\"textarea__count-character-count \"\n            aria-invalid=\"false\"\n            rows=\"5\"\n            maxlength=\"22\"\n          >Value Test</textarea>\n          <p id=\"textarea__count-character-count\" aria-live=\"polite\">12 caract√®res restants</p>\n        </div>\n      </gcds-textarea>\n    `);\n  });\n\n  /**\n   * Disabled test\n   */\n  it('renders disabled', async () => {\n    const { root } = await newSpecPage({\n      components: [GcdsTextarea],\n      html: '<gcds-textarea label=\"Label\" textarea-id=\"textarea-disabled\" disabled />',\n    });\n    expect(root).toEqualHtml(`\n      <gcds-textarea label=\"Label\" textarea-id=\"textarea-disabled\" disabled=\"\">\n        <div class=\"gcds-textarea-wrapper gcds-disabled\">\n          <gcds-label label-for=\"textarea-disabled\" label=\"Label\" lang=\"en\"></gcds-label>\n          <textarea\n            id=\"textarea-disabled\"\n            name=\"textarea-disabled\"\n            aria-labelledby=\"label-for-textarea-disabled\"\n            aria-invalid=\"false\"\n            rows=\"5\"\n            disabled=\"\"\n          ></textarea>\n        </div>\n      </gcds-textarea>\n    `);\n  });\n\n  /**\n   * Error message test\n   */\n  it('renders error message', async () => {\n    const { root } = await newSpecPage({\n      components: [GcdsTextarea],\n      html: '<gcds-textarea label=\"Label\" textarea-id=\"textarea-with-error\" error-message=\"This is an error message.\" />',\n    });\n    expect(root).toEqualHtml(`\n      <gcds-textarea label=\"Label\" textarea-id=\"textarea-with-error\" error-message=\"This is an error message.\">\n        <div class=\"gcds-textarea-wrapper gcds-error\">\n          <gcds-label label-for=\"textarea-with-error\" label=\"Label\" lang=\"en\"></gcds-label>\n          <gcds-error-message messageId=\"textarea-with-error\" message=\"This is an error message.\"></gcds-error-message>\n          <textarea\n            id=\"textarea-with-error\"\n            class=\"gcds-error\"\n            name=\"textarea-with-error\"\n            aria-labelledby=\"label-for-textarea-with-error\"\n            aria-describedby=\"error-message-textarea-with-error \"\n            aria-invalid=\"true\"\n            rows=\"5\"\n          ></textarea>\n        </div>\n      </gcds-textarea>\n    `);\n  });\n\n  /**\n   * Hide label\n   */\n  it('renders with label hidden', async () => {\n    const { root } = await newSpecPage({\n      components: [GcdsTextarea],\n      html: '<gcds-textarea label=\"Label\" textarea-id=\"textarea-label-hidden\" hide-label />',\n    });\n    expect(root).toEqualHtml(`\n      <gcds-textarea label=\"Label\" textarea-id=\"textarea-label-hidden\" hide-label>\n        <div class=\"gcds-textarea-wrapper\">\n          <gcds-label label-for=\"textarea-label-hidden\" label=\"Label\" hide-label lang=\"en\"></gcds-label>\n          <textarea\n            id=\"textarea-label-hidden\"\n            name=\"textarea-label-hidden\"\n            aria-labelledby=\"label-for-textarea-label-hidden\"\n            aria-invalid=\"false\"\n            rows=\"5\"\n          ></textarea>\n        </div>\n      </gcds-textarea>\n    `);\n  });\n\n  /**\n   * Label test\n   */\n  it('renders label', async () => {\n    const { root } = await newSpecPage({\n      components: [GcdsTextarea],\n      html: '<gcds-textarea label=\"Label\" textarea-id=\"textarea-renders-label\" />',\n    });\n    expect(root).toEqualHtml(`\n      <gcds-textarea label=\"Label\" textarea-id=\"textarea-renders-label\">\n        <div class=\"gcds-textarea-wrapper\">\n          <gcds-label label-for=\"textarea-renders-label\" label=\"Label\" lang=\"en\"></gcds-label>\n          <textarea\n            id=\"textarea-renders-label\"\n            name=\"textarea-renders-label\"\n            aria-labelledby=\"label-for-textarea-renders-label\"\n            aria-invalid=\"false\"\n            rows=\"5\"\n          ></textarea>\n        </div>\n      </gcds-textarea>\n    `);\n  });\n\n  /**\n   * Required test\n   */\n  it('renders required', async () => {\n    const { root } = await newSpecPage({\n      components: [GcdsTextarea],\n      html: '<gcds-textarea label=\"Label\" textarea-id=\"textarea-required\" required />',\n    });\n    expect(root).toEqualHtml(`\n      <gcds-textarea label=\"Label\" textarea-id=\"textarea-required\" required>\n        <div class=\"gcds-textarea-wrapper\">\n          <gcds-label label-for=\"textarea-required\" label=\"Label\" required lang=\"en\"></gcds-label>\n          <textarea\n            id=\"textarea-required\"\n            name=\"textarea-required\"\n            aria-labelledby=\"label-for-textarea-required\"\n            aria-invalid=\"false\"\n            rows=\"5\"\n            required\n          ></textarea>\n        </div>\n      </gcds-textarea>\n    `);\n  });\n\n  /**\n   * Textarea cols test\n   */\n  it('renders textarea cols', async () => {\n    const { root } = await newSpecPage({\n      components: [GcdsTextarea],\n      html: '<gcds-textarea label=\"Label\" textarea-id=\"textarea-cols\" cols=\"10\" />',\n    });\n    expect(root).toEqualHtml(`\n      <gcds-textarea label=\"Label\" textarea-id=\"textarea-cols\" cols=\"10\">\n        <div class=\"gcds-textarea-wrapper\">\n          <gcds-label label-for=\"textarea-cols\" label=\"Label\" lang=\"en\"></gcds-label>\n          <textarea\n            id=\"textarea-cols\"\n            name=\"textarea-cols\"\n            aria-labelledby=\"label-for-textarea-cols\"\n            aria-invalid=\"false\"\n            rows=\"5\"\n            style=\"max-width: 15ch;\"\n          ></textarea>\n        </div>\n      </gcds-textarea>\n    `);\n  });\n\n  /**\n   * Textarea hint test\n   */\n  it('renders textarea hint', async () => {\n    const { root } = await newSpecPage({\n      components: [GcdsTextarea],\n      html: '<gcds-textarea label=\"Label\" textarea-id=\"textarea-with-hint\" hint=\"This is a textarea hint.\" />',\n    });\n    expect(root).toEqualHtml(`\n      <gcds-textarea label=\"Label\" textarea-id=\"textarea-with-hint\" hint=\"This is a textarea hint.\">\n        <div class=\"gcds-textarea-wrapper\">\n          <gcds-label label-for=\"textarea-with-hint\" label=\"Label\" lang=\"en\"></gcds-label>\n          <gcds-hint hint=\"This is a textarea hint.\" hint-id=\"textarea-with-hint\"></gcds-hint>\n          <textarea\n            id=\"textarea-with-hint\"\n            name=\"textarea-with-hint\"\n            aria-labelledby=\"label-for-textarea-with-hint\"\n            aria-describedby=\"hint-textarea-with-hint \"\n            aria-invalid=\"false\"\n            rows=\"5\"\n          ></textarea>\n        </div>\n      </gcds-textarea>\n    `);\n  });\n\n  /**\n   * Textarea ID test\n   */\n  it('renders textarea id', async () => {\n    const { root } = await newSpecPage({\n      components: [GcdsTextarea],\n      html: '<gcds-textarea label=\"Label\" textarea-id=\"textarea-renders-id\" />',\n    });\n    expect(root).toEqualHtml(`\n      <gcds-textarea label=\"Label\" textarea-id=\"textarea-renders-id\">\n        <div class=\"gcds-textarea-wrapper\">\n          <gcds-label label-for=\"textarea-renders-id\" label=\"Label\" lang=\"en\"></gcds-label>\n          <textarea\n            id=\"textarea-renders-id\"\n            name=\"textarea-renders-id\"\n            aria-labelledby=\"label-for-textarea-renders-id\"\n            aria-invalid=\"false\"\n            rows=\"5\"\n          ></textarea>\n        </div>\n      </gcds-textarea>\n    `);\n  });\n\n  /**\n   * Textarea rows test\n   */\n  it('renders textarea rows', async () => {\n    const { root } = await newSpecPage({\n      components: [GcdsTextarea],\n      html: '<gcds-textarea label=\"Label\" textarea-id=\"textarea-rows\" rows=\"2\" />',\n    });\n    expect(root).toEqualHtml(`\n      <gcds-textarea label=\"Label\" textarea-id=\"textarea-rows\" rows=\"2\">\n        <div class=\"gcds-textarea-wrapper\">\n          <gcds-label label-for=\"textarea-rows\" label=\"Label\" lang=\"en\"></gcds-label>\n          <textarea\n            id=\"textarea-rows\"\n            name=\"textarea-rows\"\n            aria-labelledby=\"label-for-textarea-rows\"\n            aria-invalid=\"false\"\n            rows=\"2\"\n          ></textarea>\n        </div>\n      </gcds-textarea>\n    `);\n  });\n\n  /**\n   * Textarea value test\n   */\n  it('renders textarea value', async () => {\n    const { root } = await newSpecPage({\n      components: [GcdsTextarea],\n      html: '<gcds-textarea label=\"Label\" textarea-id=\"textarea-with-value\" value=\"Textarea value\" />',\n    });\n    expect(root).toEqualHtml(`\n      <gcds-textarea label=\"Label\" textarea-id=\"textarea-with-value\" value=\"Textarea value\">\n        <div class=\"gcds-textarea-wrapper\">\n          <gcds-label label-for=\"textarea-with-value\" label=\"Label\" lang=\"en\"></gcds-label>\n          <textarea\n            id=\"textarea-with-value\"\n            name=\"textarea-with-value\"\n            aria-labelledby=\"label-for-textarea-with-value\"\n            aria-invalid=\"false\"\n            rows=\"5\"\n          >Textarea value</textarea>\n        </div>\n      </gcds-textarea>\n    `);\n  });\n});\n"]}