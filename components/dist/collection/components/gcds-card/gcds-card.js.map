{"version":3,"file":"gcds-card.js","sourceRoot":"","sources":["../../../src/components/gcds-card/gcds-card.tsx"],"names":[],"mappings":"AAAA,OAAO,EAAE,OAAO,EAAE,SAAS,EAAE,IAAI,EAAE,IAAI,EAAE,CAAC,EAAE,QAAQ,EAAE,MAAM,eAAe,CAAC;AAO5E,MAAM,OAAO,QAAQ;;gBAMgC,MAAM;;wBAUD,GAAG;;;;;;;EA2B3D,IAAY,aAAa;IACvB,OAAO,CAAC,CAAC,IAAI,CAAC,EAAE,CAAC,aAAa,CAAC,iBAAiB,CAAC,CAAC;EACpD,CAAC;EAED,MAAM;IACJ,MAAM,EACJ,IAAI,EACJ,SAAS,EACT,YAAY,EACZ,IAAI,EACJ,WAAW,EACX,GAAG,EACH,MAAM,EACN,MAAM,EACN,aAAa,GACd,GAAG,IAAI,CAAC;IAET,MAAM,OAAO,GAAG,YAAY,CAAC;IAE7B,OAAO,CACL,EAAC,IAAI;MACH,WAAK,KAAK,EAAE,wBAAwB,IAAI,EAAE;QACvC,MAAM,IAAI,CACT,WACE,GAAG,EAAE,MAAM,EACX,GAAG,EAAE,MAAM,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,EACzB,KAAK,EAAC,kBAAkB,GACxB,CACH;QACA,GAAG,IAAI,YAAM,KAAK,EAAC,gBAAgB,IAAE,GAAG,CAAQ;QAChD,OAAO,IAAI,GAAG,CAAC,CAAC,CAAC,CAChB,EAAC,OAAO,IAAC,KAAK,EAAC,kBAAkB;UAC/B,SAAG,IAAI,EAAE,IAAI,IAAG,SAAS,CAAK,CACtB,CACX,CAAC,CAAC,CAAC,CACF,SAAG,IAAI,EAAE,IAAI,EAAE,KAAK,EAAC,kBAAkB,IACpC,SAAS,CACR,CACL;QAEA,WAAW,IAAI,SAAG,KAAK,EAAC,wBAAwB,IAAE,WAAW,CAAK;QAClE,aAAa,IAAI,CAChB;UACE,WAAK,KAAK,EAAC,mBAAmB,GAAO;UACrC,YAAM,IAAI,EAAC,QAAQ,GAAQ,CAC1B,CACJ,CACG,CACD,CACR,CAAC;EACJ,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CACF","sourcesContent":["import { Element, Component, Host, Prop, h, Fragment } from '@stencil/core';\n\n@Component({\n  tag: 'gcds-card',\n  styleUrl: 'gcds-card.css',\n  shadow: true,\n})\nexport class GcdsCard {\n  @Element() el: HTMLElement;\n\n  /**\n   * The type attribute specifies how the card renders as a link\n   */\n  @Prop({ reflect: true }) type: 'link' | 'action' = 'link';\n\n  /**\n   * The card title attribute specifies the title that appears on the card\n   */\n  @Prop({ reflect: true }) cardTitle!: string;\n\n  /**\n   * The title element attribute specifies HTML element the title renders as\n   */\n  @Prop() titleElement: 'h3' | 'h4' | 'h5' | 'h6' | 'a' = 'a';\n\n  /**\n   * The href attribute specifies the URL of the page the link goes to\n   */\n  @Prop({ reflect: true }) href!: string;\n\n  /**\n   * The description attribute specifies the body of text that appears on the card\n   */\n  @Prop({ reflect: true }) description: string;\n\n  /**\n   * The tag attribute specifies the tag text that appears above the card title\n   */\n  @Prop({ reflect: true }) tag: string;\n\n  /**\n   * The img src attribute specifies the path to the image\n   */\n  @Prop({ reflect: true }) imgSrc: string;\n\n  /**\n   * The img alt attribute specifies the alt text for the image provided, if none, image will be decorative\n   */\n  @Prop({ reflect: true }) imgAlt: string;\n\n  private get hasCardFooter() {\n    return !!this.el.querySelector('[slot=\"footer\"]');\n  }\n\n  render() {\n    const {\n      type,\n      cardTitle,\n      titleElement,\n      href,\n      description,\n      tag,\n      imgSrc,\n      imgAlt,\n      hasCardFooter,\n    } = this;\n\n    const Element = titleElement;\n\n    return (\n      <Host>\n        <div class={`gcds-card gcds-card--${type}`}>\n          {imgSrc && (\n            <img\n              src={imgSrc}\n              alt={imgAlt ? imgAlt : ''}\n              class=\"gcds-card__image\"\n            />\n          )}\n          {tag && <span class=\"gcds-card__tag\">{tag}</span>}\n          {Element != 'a' ? (\n            <Element class=\"gcds-card__title\">\n              <a href={href}>{cardTitle}</a>\n            </Element>\n          ) : (\n            <a href={href} class=\"gcds-card__title\">\n              {cardTitle}\n            </a>\n          )}\n\n          {description && <p class=\"gcds-card__description\">{description}</p>}\n          {hasCardFooter && (\n            <>\n              <div class=\"gcds-card__spacer\"></div>\n              <slot name=\"footer\"></slot>\n            </>\n          )}\n        </div>\n      </Host>\n    );\n  }\n}\n"]}