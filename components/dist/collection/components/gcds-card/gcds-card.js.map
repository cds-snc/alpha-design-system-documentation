{"version":3,"file":"gcds-card.js","sourceRoot":"","sources":["../../../src/components/gcds-card/gcds-card.tsx"],"names":[],"mappings":"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","sourcesContent":["import {\n  Element,\n  Component,\n  Host,\n  Prop,\n  h,\n  Fragment,\n  State,\n} from '@stencil/core';\nimport { assignLanguage, observerConfig } from '../../utils/utils';\nimport i18n from './i18n/i18n';\n\n@Component({\n  tag: 'gcds-card',\n  styleUrl: 'gcds-card.css',\n  shadow: true,\n})\nexport class GcdsCard {\n  @Element() el: HTMLElement;\n\n  /**\n   * The type attribute specifies how the card renders as a link\n   */\n  @Prop({ reflect: true }) type: 'link' | 'action' = 'link';\n\n  /**\n   * The card title attribute specifies the title that appears on the card\n   */\n  @Prop({ reflect: true }) cardTitle!: string;\n\n  /**\n   * The title element attribute specifies HTML element the title renders as\n   */\n  @Prop() titleElement: 'h3' | 'h4' | 'h5' | 'h6' | 'a' = 'a';\n\n  /**\n   * The href attribute specifies the URL of the page the link goes to\n   */\n  @Prop({ reflect: true }) href!: string;\n\n  /**\n   * The description attribute specifies the body of text that appears on the card\n   */\n  @Prop({ reflect: true }) description: string;\n\n  /**\n   * The tag attribute specifies the tag text that appears above the card title\n   */\n  @Prop({ reflect: true }) tag: string;\n\n  /**\n   * The img src attribute specifies the path to the image\n   */\n  @Prop({ reflect: true }) imgSrc: string;\n\n  /**\n   * The img alt attribute specifies the alt text for the image provided, if none, image will be decorative\n   */\n  @Prop({ reflect: true }) imgAlt: string;\n\n  /**\n   * Language of rendered component\n   */\n  @State() lang: string;\n\n  /*\n   * Observe lang attribute change\n   */\n  updateLang() {\n    const observer = new MutationObserver(mutations => {\n      if (mutations[0].oldValue != this.el.lang) {\n        this.lang = this.el.lang;\n      }\n    });\n    observer.observe(this.el, observerConfig);\n  }\n\n  async componentWillLoad() {\n    // Define lang attribute\n    this.lang = assignLanguage(this.el);\n\n    this.updateLang();\n  }\n\n  private get hasCardFooter() {\n    return !!this.el.querySelector('[slot=\"footer\"]');\n  }\n\n  render() {\n    const {\n      type,\n      cardTitle,\n      titleElement,\n      href,\n      description,\n      tag,\n      imgSrc,\n      imgAlt,\n      hasCardFooter,\n      lang,\n    } = this;\n\n    const Element = titleElement;\n\n    const taggedAttr = {};\n\n    if (tag) {\n      taggedAttr['aria-describedby'] = 'gcds-card__tag';\n    }\n\n    return (\n      <Host>\n        <div class={`gcds-card gcds-card--${type}`}>\n          {imgSrc && (\n            <img\n              src={imgSrc}\n              alt={imgAlt ? imgAlt : ''}\n              class=\"gcds-card__image\"\n            />\n          )}\n          {tag && (\n            <gcds-text\n              id=\"gcds-card__tag\"\n              class=\"gcds-card__tag\"\n              text-role=\"secondary\"\n              size=\"caption\"\n            >\n              <gcds-sr-only>{i18n[lang].tagged}</gcds-sr-only>\n              {tag}\n            </gcds-text>\n          )}\n          {Element != 'a' ? (\n            <Element class=\"gcds-card__title\" {...taggedAttr}>\n              <gcds-link href={href}>{cardTitle}</gcds-link>\n            </Element>\n          ) : (\n            <gcds-link href={href} class=\"gcds-card__title\" {...taggedAttr}>\n              {cardTitle}\n            </gcds-link>\n          )}\n          {description && (\n            <gcds-text class=\"gcds-card__description\">{description}</gcds-text>\n          )}\n          {hasCardFooter && (\n            <>\n              <div class=\"gcds-card__spacer\"></div>\n              <slot name=\"footer\"></slot>\n            </>\n          )}\n        </div>\n      </Host>\n    );\n  }\n}\n"]}