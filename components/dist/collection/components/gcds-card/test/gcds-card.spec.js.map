{"version":3,"file":"gcds-card.spec.js","sourceRoot":"","sources":["../../../../src/components/gcds-card/test/gcds-card.spec.tsx"],"names":[],"mappings":"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","sourcesContent":["import { newSpecPage } from '@stencil/core/testing';\nimport { GcdsCard } from '../gcds-card';\n\ndescribe('gcds-card', () => {\n  it('renders - type link', async () => {\n    const page = await newSpecPage({\n      components: [GcdsCard],\n      html: `<gcds-card\n        type=\"link\"\n        card-title=\"Card\"\n        href=\"#card\"\n      ></gcds-card>`,\n    });\n    expect(page.root).toEqualHtml(`\n    <gcds-card card-title=\"Card\" href=\"#card\" type=\"link\">\n      <mock:shadow-root>\n        <div class=\"gcds-card gcds-card--link\">\n          <gcds-link class=\"gcds-card__title\" href=\"#card\">\n            Card\n          </gcds-link>\n        </div>\n      </mock:shadow-root>\n    </gcds-card\n    `);\n  });\n\n  it('renders - type action', async () => {\n    const page = await newSpecPage({\n      components: [GcdsCard],\n      html: `<gcds-card\n        type=\"action\"\n        card-title=\"Card\"\n        href=\"#card\"\n      ></gcds-card>`,\n    });\n    expect(page.root).toEqualHtml(`\n    <gcds-card card-title=\"Card\" href=\"#card\" type=\"action\">\n      <mock:shadow-root>\n        <div class=\"gcds-card gcds-card--action\">\n          <gcds-link class=\"gcds-card__title\" href=\"#card\">\n            Card\n          </gcds-link>\n        </div>\n      </mock:shadow-root>\n    </gcds-card\n    `);\n  });\n\n  it('renders w/ h3 element', async () => {\n    const page = await newSpecPage({\n      components: [GcdsCard],\n      html: `<gcds-card\n        type=\"link\"\n        card-title=\"Card\"\n        href=\"#card\"\n        title-element=\"h3\"\n      ></gcds-card>`,\n    });\n    expect(page.root).toEqualHtml(`\n    <gcds-card card-title=\"Card\" href=\"#card\" title-element=\"h3\" type=\"link\">\n      <mock:shadow-root>\n        <div class=\"gcds-card gcds-card--link\">\n          <h3 class=\"gcds-card__title\">\n            <gcds-link href=\"#card\">\n                Card\n            </gcds-link>\n          </h3>\n        </div>\n      </mock:shadow-root>\n    </gcds-card\n    `);\n  });\n\n  it('renders w/ tag', async () => {\n    const page = await newSpecPage({\n      components: [GcdsCard],\n      html: `<gcds-card\n        type=\"link\"\n        card-title=\"Card\"\n        href=\"#card\"\n        tag=\"Tag\"\n      ></gcds-card>`,\n    });\n    expect(page.root).toEqualHtml(`\n    <gcds-card card-title=\"Card\" href=\"#card\" tag=\"Tag\" type=\"link\">\n      <mock:shadow-root>\n        <div class=\"gcds-card gcds-card--link\">\n          <gcds-text id=\"gcds-card__tag\" class=\"gcds-card__tag\" size=\"caption\" text-role=\"secondary\">\n            <gcds-sr-only>Tagged:</gcds-sr-only>\n            Tag\n          </gcds-text>\n          <gcds-link aria-describedby=\"gcds-card__tag\" class=\"gcds-card__title\" href=\"#card\">\n            Card\n          </gcds-link>\n        </div>\n      </mock:shadow-root>\n    </gcds-card\n    `);\n  });\n\n  it('renders w/ description', async () => {\n    const page = await newSpecPage({\n      components: [GcdsCard],\n      html: `<gcds-card\n        type=\"link\"\n        card-title=\"Card\"\n        href=\"#card\"\n        description=\"This is the card description\"\n      ></gcds-card>`,\n    });\n    expect(page.root).toEqualHtml(`\n    <gcds-card card-title=\"Card\" href=\"#card\" description=\"This is the card description\" type=\"link\">\n      <mock:shadow-root>\n        <div class=\"gcds-card gcds-card--link\">\n          <gcds-link class=\"gcds-card__title\" href=\"#card\">\n            Card\n          </gcds-link>\n          <gcds-text class=\"gcds-card__description\">\n            This is the card description\n          </gcds-text>\n        </div>\n      </mock:shadow-root>\n    </gcds-card\n    `);\n  });\n\n  it('renders w/ img', async () => {\n    const page = await newSpecPage({\n      components: [GcdsCard],\n      html: `<gcds-card\n        card-title=\"Card\"\n        href=\"#card\"\n        img-src=\"https://picsum.photos/480/270\"\n      ></gcds-card>`,\n    });\n    expect(page.root).toEqualHtml(`\n    <gcds-card card-title=\"Card\" href=\"#card\" img-src=\"https://picsum.photos/480/270\" type=\"link\">\n      <mock:shadow-root>\n        <div class=\"gcds-card gcds-card--link\">\n          <img alt=\"\" class=\"gcds-card__image\" src=\"https://picsum.photos/480/270\">\n          <gcds-link class=\"gcds-card__title\" href=\"#card\">\n            Card\n          </gcds-link>\n        </div>\n      </mock:shadow-root>\n    </gcds-card>\n    `);\n  });\n\n  it('renders w/ img and alt', async () => {\n    const page = await newSpecPage({\n      components: [GcdsCard],\n      html: `<gcds-card\n        card-title=\"Card\"\n        href=\"#card\"\n        img-src=\"https://picsum.photos/480/270\"\n        img-alt=\"Alt text for image from picsum\"\n      ></gcds-card>`,\n    });\n    expect(page.root).toEqualHtml(`\n    <gcds-card card-title=\"Card\" href=\"#card\" img-src=\"https://picsum.photos/480/270\" img-alt=\"Alt text for image from picsum\" type=\"link\">\n      <mock:shadow-root>\n        <div class=\"gcds-card gcds-card--link\">\n          <img alt=\"Alt text for image from picsum\" class=\"gcds-card__image\" src=\"https://picsum.photos/480/270\">\n          <gcds-link class=\"gcds-card__title\" href=\"#card\">\n            Card\n          </gcds-link>\n        </div>\n      </mock:shadow-root>\n    </gcds-card>\n    `);\n  });\n\n  it('renders w/ footer slot', async () => {\n    const page = await newSpecPage({\n      components: [GcdsCard],\n      html: `<gcds-card\n        type=\"link\"\n        card-title=\"Card\"\n        href=\"#card\"\n      >\n        <p slot=\"footer\">Additional Metadata</p>\n      </gcds-card>`,\n    });\n    expect(page.root).toEqualHtml(`\n    <gcds-card card-title=\"Card\" href=\"#card\" type=\"link\">\n      <mock:shadow-root>\n        <div class=\"gcds-card gcds-card--link\">\n          <gcds-link class=\"gcds-card__title\" href=\"#card\">\n            Card\n          </gcds-link>\n          <div class=\"gcds-card__spacer\"></div>\n          <slot name=\"footer\"></slot>\n        </div>\n      </mock:shadow-root>\n      <p slot=\"footer\">\n        Additional Metadata\n      </p>\n    </gcds-card\n    `);\n  });\n});\n"]}