{"version":3,"file":"gcds-card.spec.js","sourceRoot":"","sources":["../../../../src/components/gcds-card/test/gcds-card.spec.tsx"],"names":[],"mappings":"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","sourcesContent":["import { newSpecPage } from '@stencil/core/testing';\nimport { GcdsCard } from '../gcds-card';\n\ndescribe('gcds-card', () => {\n  it('renders', async () => {\n    const page = await newSpecPage({\n      components: [GcdsCard],\n      html: `<gcds-card\n        card-title=\"Card\"\n        href=\"#card\"\n      ></gcds-card>`,\n    });\n    expect(page.root).toEqualHtml(`\n    <gcds-card card-title=\"Card\" href=\"#card\">\n      <mock:shadow-root>\n        <div class=\"gcds-card\">\n          <gcds-link class=\"gcds-card__title\" href=\"#card\">\n            Card\n          </gcds-link>\n        </div>\n      </mock:shadow-root>\n    </gcds-card\n    `);\n  });\n\n  it('renders w/ badge', async () => {\n    const page = await newSpecPage({\n      components: [GcdsCard],\n      html: `<gcds-card\n        card-title=\"Card\"\n        href=\"#card\"\n        badge=\"new\"\n      ></gcds-card>`,\n    });\n    expect(page.root).toEqualHtml(`\n    <gcds-card card-title=\"Card\" href=\"#card\" badge=\"new\">\n      <mock:shadow-root>\n        <div class=\"gcds-card\">\n          <gcds-text class=\"gcds-badge\" id=\"gcds-badge\" margin-bottom=\"0\" size=\"caption\" text-role=\"light\">\n            <strong>\n              <gcds-sr-only>\n                Tagged:\n              </gcds-sr-only>\n              new\n            </strong>\n          </gcds-text>\n          <gcds-link aria-describedby=\"gcds-badge\" class=\"gcds-card__title\" href=\"#card\">\n            Card\n          </gcds-link>\n        </div>\n      </mock:shadow-root>\n    </gcds-card\n    `);\n  });\n\n  it('renders w/ img no alt text', async () => {\n    const page = await newSpecPage({\n      components: [GcdsCard],\n      html: `<gcds-card\n        card-title=\"Card\"\n        href=\"#card\"\n        img-src=\"https://picsum.photos/480/270\"\n      ></gcds-card>`,\n    });\n    expect(page.root).toEqualHtml(`\n    <gcds-card card-title=\"Card\" href=\"#card\" img-src=\"https://picsum.photos/480/270\">\n      <mock:shadow-root>\n        <div class=\"gcds-card\">\n          <img alt=\"\" class=\"gcds-card__image\" src=\"https://picsum.photos/480/270\">\n          <gcds-link class=\"gcds-card__title\" href=\"#card\">\n            Card\n          </gcds-link>\n        </div>\n      </mock:shadow-root>\n    </gcds-card\n    `);\n  });\n\n  it('renders w/ img and alt text', async () => {\n    const page = await newSpecPage({\n      components: [GcdsCard],\n      html: `<gcds-card\n        card-title=\"Card\"\n        href=\"#card\"\n        img-src=\"https://picsum.photos/480/270\"\n        img-alt=\"Randomly generated picture\"\n      ></gcds-card>`,\n    });\n    expect(page.root).toEqualHtml(`\n    <gcds-card card-title=\"Card\" href=\"#card\" img-src=\"https://picsum.photos/480/270\" img-alt=\"Randomly generated picture\">\n      <mock:shadow-root>\n        <div class=\"gcds-card\">\n          <img alt=\"Randomly generated picture\" class=\"gcds-card__image\" src=\"https://picsum.photos/480/270\">\n          <gcds-link class=\"gcds-card__title\" href=\"#card\">\n            Card\n          </gcds-link>\n        </div>\n      </mock:shadow-root>\n    </gcds-card\n    `);\n  });\n\n  it('renders w/ description', async () => {\n    const page = await newSpecPage({\n      components: [GcdsCard],\n      html: `<gcds-card\n        card-title=\"Card\"\n        href=\"#card\"\n        description=\"Card description\"\n      ></gcds-card>`,\n    });\n    expect(page.root).toEqualHtml(`\n    <gcds-card card-title=\"Card\" href=\"#card\" description=\"Card description\">\n      <mock:shadow-root>\n        <div class=\"gcds-card\">\n          <gcds-link class=\"gcds-card__title\" href=\"#card\">\n            Card\n          </gcds-link>\n          <div class=\"gcds-card__description\">\n            <gcds-text margin-bottom=\"0\">\n              Card description\n            </gcds-text>\n          </div>\n        </div>\n      </mock:shadow-root>\n    </gcds-card\n    `);\n  });\n\n  it('renders w/ default slot', async () => {\n    const page = await newSpecPage({\n      components: [GcdsCard],\n      html: `<gcds-card\n        card-title=\"Card\"\n        href=\"#card\"\n      >\n        <p>Card description</p>\n      </gcds-card>`,\n    });\n    expect(page.root).toEqualHtml(`\n    <gcds-card card-title=\"Card\" href=\"#card\">\n      <mock:shadow-root>\n        <div class=\"gcds-card\">\n          <gcds-link class=\"gcds-card__title\" href=\"#card\">\n            Card\n          </gcds-link>\n          <div class=\"gcds-card__description\">\n            <slot></slot>\n          </div>\n        </div>\n      </mock:shadow-root>\n      <p>Card description</p>\n    </gcds-card\n    `);\n  });\n\n  it('renders w/ h3 title element', async () => {\n    const page = await newSpecPage({\n      components: [GcdsCard],\n      html: `<gcds-card\n        card-title=\"Card\"\n        href=\"#card\"\n        card-title-tag=\"h3\"\n      ></gcds-card>`,\n    });\n    expect(page.root).toEqualHtml(`\n    <gcds-card card-title=\"Card\" href=\"#card\" card-title-tag=\"h3\">\n      <mock:shadow-root>\n        <div class=\"gcds-card\">\n          <h3 class=\"gcds-card__title\">\n            <gcds-link href=\"#card\">\n              Card\n            </gcds-link>\n          </h3>\n          </div>\n        </div>\n      </mock:shadow-root>\n    </gcds-card\n    `);\n  });\n\n  it('renders w/ h4 title element', async () => {\n    const page = await newSpecPage({\n      components: [GcdsCard],\n      html: `<gcds-card\n        card-title=\"Card\"\n        href=\"#card\"\n        card-title-tag=\"h4\"\n      ></gcds-card>`,\n    });\n    expect(page.root).toEqualHtml(`\n    <gcds-card card-title=\"Card\" href=\"#card\" card-title-tag=\"h4\">\n      <mock:shadow-root>\n        <div class=\"gcds-card\">\n          <h4 class=\"gcds-card__title\">\n            <gcds-link href=\"#card\">\n              Card\n            </gcds-link>\n          </h4>\n          </div>\n        </div>\n      </mock:shadow-root>\n    </gcds-card\n    `);\n  });\n\n  it('renders w/ h5 title element', async () => {\n    const page = await newSpecPage({\n      components: [GcdsCard],\n      html: `<gcds-card\n        card-title=\"Card\"\n        href=\"#card\"\n        card-title-tag=\"h5\"\n      ></gcds-card>`,\n    });\n    expect(page.root).toEqualHtml(`\n    <gcds-card card-title=\"Card\" href=\"#card\" card-title-tag=\"h5\">\n      <mock:shadow-root>\n        <div class=\"gcds-card\">\n          <h5 class=\"gcds-card__title\">\n            <gcds-link href=\"#card\">\n              Card\n            </gcds-link>\n          </h5>\n          </div>\n        </div>\n      </mock:shadow-root>\n    </gcds-card\n    `);\n  });\n\n  it('renders w/ h6 title element', async () => {\n    const page = await newSpecPage({\n      components: [GcdsCard],\n      html: `<gcds-card\n        card-title=\"Card\"\n        href=\"#card\"\n        card-title-tag=\"h6\"\n      ></gcds-card>`,\n    });\n    expect(page.root).toEqualHtml(`\n    <gcds-card card-title=\"Card\" href=\"#card\" card-title-tag=\"h6\">\n      <mock:shadow-root>\n        <div class=\"gcds-card\">\n          <h6 class=\"gcds-card__title\">\n            <gcds-link href=\"#card\">\n              Card\n            </gcds-link>\n          </h6>\n        </div>\n      </mock:shadow-root>\n    </gcds-card\n    `);\n  });\n\n  it('renders - badge too long error', async () => {\n    const page = await newSpecPage({\n      components: [GcdsCard],\n      html: `<gcds-card\n        card-title=\"Card\"\n        href=\"#card\"\n        badge=\"Badge that is too long to render\"\n      ></gcds-card>`,\n    });\n    expect(page.root).toEqualHtml(`\n    <gcds-card card-title=\"Card\" href=\"#card\" badge=\"Badge that is too long to render\">\n      <mock:shadow-root>\n        <div class=\"gcds-card\">\n          <gcds-link aria-describedby=\"gcds-badge\" class=\"gcds-card__title\" href=\"#card\">\n            Card\n          </gcds-link>\n        </div>\n      </mock:shadow-root>\n    </gcds-card\n    `);\n  });\n\n  it('does not render - no href attribute', async () => {\n    const page = await newSpecPage({\n      components: [GcdsCard],\n      html: `<gcds-card\n        card-title=\"Card\"\n      ></gcds-card>`,\n    });\n    expect(page.root).toEqualHtml(`\n    <gcds-card card-title=\"Card\">\n      <mock:shadow-root>\n      </mock:shadow-root>\n    </gcds-card\n    `);\n  });\n\n  it('does not render - no card-title attribute', async () => {\n    const page = await newSpecPage({\n      components: [GcdsCard],\n      html: `<gcds-card\n        href=\"#card\"\n      ></gcds-card>`,\n    });\n    expect(page.root).toEqualHtml(`\n    <gcds-card href=\"#card\">\n      <mock:shadow-root>\n      </mock:shadow-root>\n    </gcds-card\n    `);\n  });\n});\n"]}