{"version":3,"file":"gcds-date-modified.spec.js","sourceRoot":"","sources":["../../../../src/components/gcds-date-modified/test/gcds-date-modified.spec.tsx"],"names":[],"mappings":"AAAA,OAAO,EAAE,WAAW,EAAE,MAAM,uBAAuB,CAAC;AACpD,OAAO,EAAE,gBAAgB,EAAE,MAAM,uBAAuB,CAAC;AAEzD,QAAQ,CAAC,oBAAoB,EAAE,GAAG,EAAE;IAClC,EAAE,CAAC,mBAAmB,EAAE,KAAK,IAAI,EAAE;QACjC,MAAM,IAAI,GAAG,MAAM,WAAW,CAAC;YAC7B,UAAU,EAAE,CAAC,gBAAgB,CAAC;YAC9B,IAAI,EAAE,+DAA+D;SACtE,CAAC,CAAC;QACH,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,WAAW,CAAC;;;;;;;;;;;;;;;;KAgB7B,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,kBAAkB,EAAE,KAAK,IAAI,EAAE;QAChC,MAAM,IAAI,GAAG,MAAM,WAAW,CAAC;YAC7B,UAAU,EAAE,CAAC,gBAAgB,CAAC;YAC9B,IAAI,EAAE,+DAA+D;SACtE,CAAC,CAAC;QACH,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,WAAW,CAAC;;;;;;;;;;;;;;;;KAgB7B,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,sBAAsB,EAAE,KAAK,IAAI,EAAE;QACpC,MAAM,IAAI,GAAG,MAAM,WAAW,CAAC;YAC7B,UAAU,EAAE,CAAC,gBAAgB,CAAC;YAC9B,IAAI,EAAE,+DAA+D;SACtE,CAAC,CAAC;QACH,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,WAAW,CAAC;;;;;;;;;;;;;;;;KAgB7B,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["import { newSpecPage } from '@stencil/core/testing';\nimport { GcdsDateModified } from '../gcds-date-modified';\n\ndescribe('gcds-date-modified', () => {\n  it('renders - English', async () => {\n    const page = await newSpecPage({\n      components: [GcdsDateModified],\n      html: `<gcds-date-modified lang=\"en\">2022-03-03</gcds-date-modified>`,\n    });\n    expect(page.root).toEqualHtml(`\n      <gcds-date-modified lang=\"en\">\n        <mock:shadow-root>\n          <dl class=\"gcds-date-modified\">\n            <dt>\n              <gcds-text display=\"inline\" margin-bottom=\"0\">Date modified:</gcds-text>\n            </dt>\n            <dd>\n              <gcds-text display=\"inline\" margin-bottom=\"0\">\n                <time><slot></slot></time>\n              </gcds-text>\n            </dd>\n          </dl>\n        </mock:shadow-root>\n        2022-03-03\n      </gcds-date-modified>\n    `);\n  });\n\n  it('renders - French', async () => {\n    const page = await newSpecPage({\n      components: [GcdsDateModified],\n      html: `<gcds-date-modified lang=\"fr\">2022-03-03</gcds-date-modified>`,\n    });\n    expect(page.root).toEqualHtml(`\n      <gcds-date-modified lang=\"fr\">\n        <mock:shadow-root>\n          <dl class=\"gcds-date-modified\">\n            <dt>\n              <gcds-text display=\"inline\" margin-bottom=\"0\">Date de modification :</gcds-text>\n            </dt>\n            <dd>\n              <gcds-text display=\"inline\" margin-bottom=\"0\">\n                <time><slot></slot></time>\n              </gcds-text>\n            </dd>\n          </dl>\n        </mock:shadow-root>\n        2022-03-03\n      </gcds-date-modified>\n    `);\n  });\n\n  it('renders type version', async () => {\n    const page = await newSpecPage({\n      components: [GcdsDateModified],\n      html: `<gcds-date-modified type=\"version\">1.2.3</gcds-date-modified>`,\n    });\n    expect(page.root).toEqualHtml(`\n      <gcds-date-modified type=\"version\">\n        <mock:shadow-root>\n          <dl class=\"gcds-date-modified\">\n            <dt>\n              <gcds-text display=\"inline\" margin-bottom=\"0\">Version</gcds-text>\n            </dt>\n            <dd>\n              <gcds-text display=\"inline\" margin-bottom=\"0\">\n                <slot></slot>\n              </gcds-text>\n            </dd>\n          </dl>\n        </mock:shadow-root>\n        1.2.3\n      </gcds-date-modified>\n    `);\n  });\n});\n"]}