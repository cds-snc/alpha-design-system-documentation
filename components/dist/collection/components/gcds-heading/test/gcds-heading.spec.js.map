{"version":3,"file":"gcds-heading.spec.js","sourceRoot":"","sources":["../../../../src/components/gcds-heading/test/gcds-heading.spec.ts"],"names":[],"mappings":"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","sourcesContent":["import { newSpecPage } from '@stencil/core/testing';\nimport { GcdsHeading } from '../gcds-heading';\n\ndescribe('gcds-heading', () => {\n  it('renders heading level 1', async () => {\n    const { root } = await newSpecPage({\n      components: [GcdsHeading],\n      html: `\n        <gcds-heading tag=\"h1\">Heading level 1</gcds-heading>\n      `,\n    });\n    expect(root).toEqualHtml(`\n      <gcds-heading tag=\"h1\">\n        <mock:shadow-root>\n          <h1 class=\"gcds-heading limit mt-0 mb-400\">\n            <slot></slot>\n          </h1>\n        </mock:shadow-root>\n        Heading level 1\n      </gcds-heading>\n    `);\n  });\n\n  it('renders heading level 2', async () => {\n    const { root } = await newSpecPage({\n      components: [GcdsHeading],\n      html: `\n        <gcds-heading tag=\"h2\">Heading level 2</gcds-heading>\n      `,\n    });\n    expect(root).toEqualHtml(`\n      <gcds-heading tag=\"h2\">\n        <mock:shadow-root>\n          <h2 class=\"gcds-heading limit mt-500 mb-400\">\n            <slot></slot>\n          </h2>\n        </mock:shadow-root>\n        Heading level 2\n      </gcds-heading>\n    `);\n  });\n\n  it('renders heading level 3', async () => {\n    const { root } = await newSpecPage({\n      components: [GcdsHeading],\n      html: `\n        <gcds-heading tag=\"h3\">Heading level 3</gcds-heading>\n      `,\n    });\n    expect(root).toEqualHtml(`\n      <gcds-heading tag=\"h3\">\n        <mock:shadow-root>\n          <h3 class=\"gcds-heading limit mt-500 mb-400\">\n            <slot></slot>\n          </h3>\n        </mock:shadow-root>\n        Heading level 3\n      </gcds-heading>\n    `);\n  });\n\n  it('renders heading level 4', async () => {\n    const { root } = await newSpecPage({\n      components: [GcdsHeading],\n      html: `\n        <gcds-heading tag=\"h4\">Heading level 4</gcds-heading>\n      `,\n    });\n    expect(root).toEqualHtml(`\n      <gcds-heading tag=\"h4\">\n        <mock:shadow-root>\n          <h4 class=\"gcds-heading limit mt-500 mb-400\">\n            <slot></slot>\n          </h4>\n        </mock:shadow-root>\n        Heading level 4\n      </gcds-heading>\n    `);\n  });\n\n  it('renders heading level 5', async () => {\n    const { root } = await newSpecPage({\n      components: [GcdsHeading],\n      html: `\n        <gcds-heading tag=\"h5\">Heading level 5</gcds-heading>\n      `,\n    });\n    expect(root).toEqualHtml(`\n      <gcds-heading tag=\"h5\">\n        <mock:shadow-root>\n          <h5 class=\"gcds-heading limit mt-500 mb-400\">\n            <slot></slot>\n          </h5>\n        </mock:shadow-root>\n        Heading level 5\n      </gcds-heading>\n    `);\n  });\n\n  it('renders heading level 6', async () => {\n    const { root } = await newSpecPage({\n      components: [GcdsHeading],\n      html: `\n        <gcds-heading tag=\"h6\">Heading level 6</gcds-heading>\n      `,\n    });\n    expect(root).toEqualHtml(`\n      <gcds-heading tag=\"h6\">\n        <mock:shadow-root>\n          <h6 class=\"gcds-heading limit mt-500 mb-400\">\n            <slot></slot>\n          </h6>\n        </mock:shadow-root>\n        Heading level 6\n      </gcds-heading>\n    `);\n  });\n\n  /**\n   * Spacing tests\n   */\n  it('renders margin top', async () => {\n    const { root } = await newSpecPage({\n      components: [GcdsHeading],\n      html: `\n        <gcds-heading tag=\"h2\" margin-top=\"400\">Margin top</gcds-heading>\n      `,\n    });\n    expect(root).toEqualHtml(`\n      <gcds-heading tag=\"h2\" margin-top=\"400\">\n        <mock:shadow-root>\n          <h2 class=\"gcds-heading limit mt-400 mb-400\">\n            <slot></slot>\n          </h2>\n        </mock:shadow-root>\n        Margin top\n      </gcds-heading>\n    `);\n  });\n\n  it('renders default margin top if incorrect value is passed', async () => {\n    const { root } = await newSpecPage({\n      components: [GcdsHeading],\n      html: `\n        <gcds-heading tag=\"h2\" margin-top=\"22\">Margin top</gcds-heading>\n      `,\n    });\n    expect(root).toEqualHtml(`\n      <gcds-heading tag=\"h2\" margin-top=\"22\">\n        <mock:shadow-root>\n          <h2 class=\"gcds-heading limit mt-500 mb-400\">\n            <slot></slot>\n          </h2>\n        </mock:shadow-root>\n        Margin top\n      </gcds-heading>\n    `);\n  });\n\n  it('renders default margin top for h1 if incorrect value is passed', async () => {\n    const { root } = await newSpecPage({\n      components: [GcdsHeading],\n      html: `\n        <gcds-heading tag=\"h1\" margin-top=\"22\">Margin top</gcds-heading>\n      `,\n    });\n    expect(root).toEqualHtml(`\n      <gcds-heading tag=\"h1\" margin-top=\"22\">\n        <mock:shadow-root>\n          <h1 class=\"gcds-heading limit mt-0 mb-400\">\n            <slot></slot>\n          </h1>\n        </mock:shadow-root>\n        Margin top\n      </gcds-heading>\n    `);\n  });\n\n  it('renders margin bottom', async () => {\n    const { root } = await newSpecPage({\n      components: [GcdsHeading],\n      html: `\n        <gcds-heading tag=\"h2\" margin-bottom=\"200\">Margin bottom</gcds-heading>\n      `,\n    });\n    expect(root).toEqualHtml(`\n      <gcds-heading tag=\"h2\" margin-bottom=\"200\">\n        <mock:shadow-root>\n          <h2 class=\"gcds-heading limit mt-500 mb-200\">\n            <slot></slot>\n          </h2>\n        </mock:shadow-root>\n        Margin bottom\n      </gcds-heading>\n    `);\n  });\n\n  it('renders default margin bottom if incorrect value is passed', async () => {\n    const { root } = await newSpecPage({\n      components: [GcdsHeading],\n      html: `\n        <gcds-heading tag=\"h2\" margin-bottom=\"22\">Margin bottom</gcds-heading>\n      `,\n    });\n    expect(root).toEqualHtml(`\n      <gcds-heading tag=\"h2\" margin-bottom=\"22\">\n        <mock:shadow-root>\n          <h2 class=\"gcds-heading limit mt-500 mb-400\">\n            <slot></slot>\n          </h2>\n        </mock:shadow-root>\n        Margin bottom\n      </gcds-heading>\n    `);\n  });\n\n  /**\n   * Character limits\n   */\n  it('renders heading with character limits', async () => {\n    const { root } = await newSpecPage({\n      components: [GcdsHeading],\n      html: `\n        <gcds-heading tag=\"h2\">Character limits</gcds-heading>\n      `,\n    });\n    expect(root).toEqualHtml(`\n      <gcds-heading tag=\"h2\">\n        <mock:shadow-root>\n          <h2 class=\"gcds-heading limit mt-500 mb-400\">\n            <slot></slot>\n          </h2>\n        </mock:shadow-root>\n        Character limits\n      </gcds-heading>\n    `);\n  });\n\n  it('renders heading without character limits', async () => {\n    const { root } = await newSpecPage({\n      components: [GcdsHeading],\n      html: `\n        <gcds-heading tag=\"h2\" character-limit=\"false\">No character limits</gcds-heading>\n      `,\n    });\n    expect(root).toEqualHtml(`\n      <gcds-heading tag=\"h2\" character-limit=\"false\">\n        <mock:shadow-root>\n          <h2 class=\"gcds-heading mt-500 mb-400\">\n            <slot></slot>\n          </h2>\n        </mock:shadow-root>\n        No character limits\n      </gcds-heading>\n    `);\n  });\n});\n"]}