{"version":3,"file":"gcds-checkbox.spec.js","sourceRoot":"","sources":["../../../../src/components/gcds-checkbox/test/gcds-checkbox.spec.tsx"],"names":[],"mappings":"AAAA,OAAO,EAAE,WAAW,EAAE,MAAM,uBAAuB,CAAC;AACpD,OAAO,EAAE,YAAY,EAAE,MAAM,kBAAkB,CAAC;AAEhD,QAAQ,CAAC,eAAe,EAAE,GAAG,EAAE;IAC7B,EAAE,CAAC,SAAS,EAAE,KAAK,IAAI,EAAE;QACvB,MAAM,IAAI,GAAG,MAAM,WAAW,CAAC;YAC7B,UAAU,EAAE,CAAC,YAAY,CAAC;YAC1B,IAAI,EAAE;;;;0BAIc;SACrB,CAAC,CAAC;QACH,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,WAAW,CAAC;;;;;;;;;KAS7B,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IACH,EAAE,CAAC,0BAA0B,EAAE,KAAK,IAAI,EAAE;QACxC,MAAM,IAAI,GAAG,MAAM,WAAW,CAAC;YAC7B,UAAU,EAAE,CAAC,YAAY,CAAC;YAC1B,IAAI,EAAE;;;;;;0BAMc;SACrB,CAAC,CAAC;QACH,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,WAAW,CAAC;;;;;;;;;KAS7B,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IACH,EAAE,CAAC,iBAAiB,EAAE,KAAK,IAAI,EAAE;QAC/B,MAAM,IAAI,GAAG,MAAM,WAAW,CAAC;YAC7B,UAAU,EAAE,CAAC,YAAY,CAAC;YAC1B,IAAI,EAAE;;;;;0BAKc;SACrB,CAAC,CAAC;QACH,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,WAAW,CAAC;;;;;;;;;;KAU7B,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IACH,EAAE,CAAC,0BAA0B,EAAE,KAAK,IAAI,EAAE;QACxC,MAAM,IAAI,GAAG,MAAM,WAAW,CAAC;YAC7B,UAAU,EAAE,CAAC,YAAY,CAAC;YAC1B,IAAI,EAAE;;;;;0BAKc;SACrB,CAAC,CAAC;QACH,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,WAAW,CAAC;;;;;;;;;;;;KAY7B,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IACH,EAAE,CAAC,kBAAkB,EAAE,KAAK,IAAI,EAAE;QAChC,MAAM,IAAI,GAAG,MAAM,WAAW,CAAC;YAC7B,UAAU,EAAE,CAAC,YAAY,CAAC;YAC1B,IAAI,EAAE;;;;;0BAKc;SACrB,CAAC,CAAC;QACH,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,WAAW,CAAC;;;;;;;;;KAS7B,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["import { newSpecPage } from '@stencil/core/testing';\nimport { GcdsCheckbox } from '../gcds-checkbox';\n\ndescribe('gcds-checkbox', () => {\n  it('renders', async () => {\n    const page = await newSpecPage({\n      components: [GcdsCheckbox],\n      html: `<gcds-checkbox\n          label=\"checkbox\"\n          name=\"checkbox\"\n          checkbox-id=\"checkbox\"\n        ></gcds-checkbox>`,\n    });\n    expect(page.root).toEqualHtml(`\n      <gcds-checkbox checkbox-id=\"checkbox\" label=\"checkbox\" name=\"checkbox\">\n        <mock:shadow-root>\n          <div class=\"gcds-checkbox\">\n            <input id=\"checkbox\" name=\"checkbox\" type=\"checkbox\">\n            <gcds-label label=\"checkbox\" label-for=\"checkbox\" lang=\"en\"></gcds-label>\n          </div>\n        </mock:shadow-root>\n      </gcds-checkbox>\n    `);\n  });\n  it('renders checked w/ value', async () => {\n    const page = await newSpecPage({\n      components: [GcdsCheckbox],\n      html: `<gcds-checkbox\n          label=\"checkbox\"\n          name=\"checkbox\"\n          checkbox-id=\"checkbox\"\n          value=\"terms\"\n          checked\n        ></gcds-checkbox>`,\n    });\n    expect(page.root).toEqualHtml(`\n      <gcds-checkbox checkbox-id=\"checkbox\" checked=\"\" label=\"checkbox\" name=\"checkbox\" value=\"terms\">\n        <mock:shadow-root>\n          <div class=\"gcds-checkbox\">\n            <input checked=\"\" id=\"checkbox\" name=\"checkbox\" type=\"checkbox\" value=\"terms\">\n            <gcds-label label=\"checkbox\" label-for=\"checkbox\" lang=\"en\"></gcds-label>\n          </div>\n        </mock:shadow-root>\n      </gcds-checkbox>\n    `);\n  });\n  it('renders w/ hint', async () => {\n    const page = await newSpecPage({\n      components: [GcdsCheckbox],\n      html: `<gcds-checkbox\n          label=\"checkbox\"\n          name=\"checkbox\"\n          checkbox-id=\"checkbox\"\n          hint=\"This is a hint.\"\n        ></gcds-checkbox>`,\n    });\n    expect(page.root).toEqualHtml(`\n      <gcds-checkbox checkbox-id=\"checkbox\" hint=\"This is a hint.\" label=\"checkbox\" name=\"checkbox\">\n        <mock:shadow-root>\n          <div class=\"gcds-checkbox\">\n            <input aria-describedby=\"hint-checkbox \" id=\"checkbox\" name=\"checkbox\" type=\"checkbox\">\n            <gcds-label label=\"checkbox\" label-for=\"checkbox\" lang=\"en\"></gcds-label>\n            <gcds-hint hint-id=\"checkbox\">This is a hint.</gcds-hint>\n          </div>\n        </mock:shadow-root>\n      </gcds-checkbox>\n    `);\n  });\n  it('renders w/ error message', async () => {\n    const page = await newSpecPage({\n      components: [GcdsCheckbox],\n      html: `<gcds-checkbox\n          label=\"checkbox\"\n          name=\"checkbox\"\n          checkbox-id=\"checkbox\"\n          error-message=\"This needs to be checked\"\n        ></gcds-checkbox>`,\n    });\n    expect(page.root).toEqualHtml(`\n      <gcds-checkbox checkbox-id=\"checkbox\" error-message=\"This needs to be checked\" label=\"checkbox\" name=\"checkbox\">\n        <mock:shadow-root>\n          <div class=\"gcds-checkbox gcds-checkbox--error\">\n            <input aria-describedby=\"error-message-checkbox \" aria-invalid=\"true\" id=\"checkbox\" name=\"checkbox\" type=\"checkbox\">\n            <gcds-label label=\"checkbox\" label-for=\"checkbox\" lang=\"en\"></gcds-label>\n            <gcds-error-message messageId=\"checkbox\">\n              This needs to be checked\n            </gcds-error-message>\n          </div>\n        </mock:shadow-root>\n      </gcds-checkbox>\n    `);\n  });\n  it('renders disabled', async () => {\n    const page = await newSpecPage({\n      components: [GcdsCheckbox],\n      html: `<gcds-checkbox\n          label=\"checkbox\"\n          name=\"checkbox\"\n          checkbox-id=\"checkbox\"\n          disabled\n        ></gcds-checkbox>`,\n    });\n    expect(page.root).toEqualHtml(`\n      <gcds-checkbox checkbox-id=\"checkbox\" disabled=\"\" error-message=\"\" label=\"checkbox\" name=\"checkbox\">\n        <mock:shadow-root>\n          <div class=\"gcds-checkbox gcds-checkbox--disabled\">\n            <input disabled=\"\" id=\"checkbox\" name=\"checkbox\" type=\"checkbox\">\n            <gcds-label label=\"checkbox\" label-for=\"checkbox\" lang=\"en\"></gcds-label>\n          </div>\n        </mock:shadow-root>\n      </gcds-checkbox>\n    `);\n  });\n});\n"]}