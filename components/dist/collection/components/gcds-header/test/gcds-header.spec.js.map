{"version":3,"file":"gcds-header.spec.js","sourceRoot":"","sources":["../../../../src/components/gcds-header/test/gcds-header.spec.tsx"],"names":[],"mappings":"AAAA,OAAO,EAAE,WAAW,EAAE,MAAM,uBAAuB,CAAC;AACpD,OAAO,EAAE,UAAU,EAAE,MAAM,gBAAgB,CAAC;AAE5C,QAAQ,CAAC,aAAa,EAAE,GAAG,EAAE;IAC3B,EAAE,CAAC,SAAS,EAAE,KAAK,IAAI,EAAE;QACvB,MAAM,IAAI,GAAG,MAAM,WAAW,CAAC;YAC7B,UAAU,EAAE,CAAC,UAAU,CAAC;YACxB,IAAI,EAAE,6BAA6B;SACpC,CAAC,CAAC;QACH,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,WAAW,CAAC;;;;;;;;;;;;;KAa7B,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,+BAA+B,EAAE,KAAK,IAAI,EAAE;QAC7C,MAAM,IAAI,GAAG,MAAM,WAAW,CAAC;YAC7B,UAAU,EAAE,CAAC,UAAU,CAAC;YACxB,IAAI,EAAE,wHAAwH;SAC/H,CAAC,CAAC;QACH,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,WAAW,CAAC;;;;;;;;;;;;;;;;;;;;;KAqB7B,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,+BAA+B,EAAE,KAAK,IAAI,EAAE;QAC7C,MAAM,IAAI,GAAG,MAAM,WAAW,CAAC;YAC7B,UAAU,EAAE,CAAC,UAAU,CAAC;YACxB,IAAI,EAAE;;;;;;qBAMS;SAChB,CAAC,CAAC;QACH,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,WAAW,CAAC;;;;;;;;;;;;;;;;;;;;;KAqB7B,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,8BAA8B,EAAE,KAAK,IAAI,EAAE;QAC5C,MAAM,IAAI,GAAG,MAAM,WAAW,CAAC;YAC7B,UAAU,EAAE,CAAC,UAAU,CAAC;YACxB,IAAI,EAAE;;;;;;;;;qBASS;SAChB,CAAC,CAAC;QACH,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,WAAW,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;KA0B7B,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["import { newSpecPage } from '@stencil/core/testing';\nimport { GcdsHeader } from '../gcds-header';\n\ndescribe('gcds-header', () => {\n  it('renders', async () => {\n    const page = await newSpecPage({\n      components: [GcdsHeader],\n      html: `<gcds-header></gcds-header>`,\n    });\n    expect(page.root).toEqualHtml(`\n      <gcds-header role=\"banner\">\n        <mock:shadow-root>\n          <div class=\"gcds-header__brand\">\n            <div class=\"brand__container container--simple\">\n              <div class=\"brand__signature\">\n                <gcds-signature has-link=\"\" lang=\"en\" type=\"signature\" variant=\"colour\"></gcds-signature>\n              </div>\n            </div>\n          </div>\n          <slot name=\"menu\"></slot>\n        </mock:shadow-root>\n      </gcds-header>\n    `);\n  });\n\n  it('renders interfaced components', async () => {\n    const page = await newSpecPage({\n      components: [GcdsHeader],\n      html: `<gcds-header lang-href=\"/fr/\" skip-to-href=\"#main\" signature-variant=\"colour\" signature-has-link=\"true\"></gcds-header>`,\n    });\n    expect(page.root).toEqualHtml(`\n      <gcds-header lang-href=\"/fr/\" role=\"banner\" signature-has-link=\"true\" signature-variant=\"colour\" skip-to-href=\"#main\">\n        <mock:shadow-root>\n          <nav class=\"gcds-header__skip-to-nav\" aria-label=\"Skip to\">\n            <gcds-link href=\"#main\">\n              Skip to main content\n            </gcds-link>\n          </nav>\n          <div class=\"gcds-header__brand\">\n            <div class=\"brand__container container--simple\">\n              <section class=\"brand__toggle\">\n                <gcds-lang-toggle href=\"/fr/\" lang=\"en\"></gcds-lang-toggle>\n              </section>\n              <div class=\"brand__signature\">\n                <gcds-signature has-link=\"\" lang=\"en\" type=\"signature\" variant=\"colour\"></gcds-signature>\n              </div>\n            </div>\n          </div>\n          <slot name=\"menu\"></slot>\n        </mock:shadow-root>\n      </gcds-header>\n    `);\n  });\n\n  it('renders with slotted elements', async () => {\n    const page = await newSpecPage({\n      components: [GcdsHeader],\n      html: `\n      <gcds-header>\n        <div slot=\"banner\"></div>\n        <form slot=\"search\"></form>\n        <ul slot=\"menu\"></ul>\n        <ul slot=\"breadcrumbs\"></ul>\n      </gcds-header>`,\n    });\n    expect(page.root).toEqualHtml(`\n      <gcds-header role=\"banner\">\n        <mock:shadow-root>\n          <slot name=\"banner\"></slot>\n          <div class=\"gcds-header__brand\">\n            <div class=\"brand__container\">\n              <div class=\"brand__signature\">\n                <gcds-signature has-link=\"\" lang=\"en\" type=\"signature\" variant=\"colour\"></gcds-signature>\n              </div>\n              <div class=\"brand__search\">\n                <slot name=\"search\"></slot>\n              </div>\n            </div>\n          </div>\n          <slot name=\"menu\"></slot>\n        </mock:shadow-root>\n        <div slot=\"banner\"></div>\n        <form slot=\"search\"></form>\n        <ul slot=\"menu\"></ul>\n        <ul slot=\"breadcrumbs\"></ul>\n      </gcds-header>\n    `);\n  });\n\n  it('renders all slotted elements', async () => {\n    const page = await newSpecPage({\n      components: [GcdsHeader],\n      html: `\n      <gcds-header>\n        <ul slot=\"skip-to-nav\"></ul>\n        <div slot=\"banner\"></div>\n        <img slot=\"signature\"/>\n        <a href=\"/fr/\" slot=\"toggle\">Toggle</a>\n        <form slot=\"search\"></form>\n        <ul slot=\"menu\"></ul>\n        <ul slot=\"breadcrumbs\"></ul>\n      </gcds-header>`,\n    });\n    expect(page.root).toEqualHtml(`\n      <gcds-header role=\"banner\">\n        <mock:shadow-root>\n          <slot name=\"skip-to-nav\"></slot>\n          <slot name=\"banner\"></slot>\n          <div class=\"gcds-header__brand\">\n            <div class=\"brand__container\">\n              <slot name=\"toggle\"></slot>\n              <slot name=\"signature\"></slot>\n              <div class=\"brand__search\">\n                <slot name=\"search\"></slot>\n              </div>\n            </div>\n          </div>\n          <slot name=\"menu\"></slot>\n        </mock:shadow-root>\n        <ul slot=\"skip-to-nav\"></ul>\n        <div slot=\"banner\"></div>\n        <img slot=\"signature\"/>\n        <a href=\"/fr/\" slot=\"toggle\">\n          Toggle\n        </a>\n        <form slot=\"search\"></form>\n        <ul slot=\"menu\"></ul>\n        <ul slot=\"breadcrumbs\"></ul>\n      </gcds-header>\n    `);\n  });\n});\n"]}