{"version":3,"file":"gcds-sr-only.spec.js","sourceRoot":"","sources":["../../../../src/components/gcds-sr-only/test/gcds-sr-only.spec.tsx"],"names":[],"mappings":"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","sourcesContent":["import { newSpecPage } from '@stencil/core/testing';\nimport { GcdsSrOnly } from '../gcds-sr-only';\n\ndescribe('gcds-sr-only', () => {\n  it('renders', async () => {\n    const page = await newSpecPage({\n      components: [GcdsSrOnly],\n      html: `<gcds-sr-only>Hidden text</gcds-sr-only>`,\n    });\n    expect(page.root).toEqualHtml(`\n      <gcds-sr-only>\n        <mock:shadow-root>\n          <p>\n            <slot></slot>\n          </p>\n        </mock:shadow-root>\n        Hidden text\n      </gcds-sr-only>\n    `);\n  });\n\n  it('renders p tag if invalid tag value', async () => {\n    const page = await newSpecPage({\n      components: [GcdsSrOnly],\n      html: `<gcds-sr-only tag=\"aside\">Hidden text</gcds-sr-only>`,\n    });\n    expect(page.root).toEqualHtml(`\n      <gcds-sr-only tag=\"aside\">\n        <mock:shadow-root>\n          <p>\n            <slot></slot>\n          </p>\n        </mock:shadow-root>\n        Hidden text\n      </gcds-sr-only>\n    `);\n  });\n\n  it('renders p tag', async () => {\n    const page = await newSpecPage({\n      components: [GcdsSrOnly],\n      html: `<gcds-sr-only tag=\"p\">Hidden text</gcds-sr-only>`,\n    });\n    expect(page.root).toEqualHtml(`\n      <gcds-sr-only tag=\"p\">\n        <mock:shadow-root>\n          <p>\n            <slot></slot>\n          </p>\n        </mock:shadow-root>\n        Hidden text\n      </gcds-sr-only>\n    `);\n  });\n\n  it('renders span tag', async () => {\n    const page = await newSpecPage({\n      components: [GcdsSrOnly],\n      html: `<gcds-sr-only tag=\"span\">Hidden text</gcds-sr-only>`,\n    });\n    expect(page.root).toEqualHtml(`\n      <gcds-sr-only tag=\"span\">\n        <mock:shadow-root>\n          <span>\n            <slot></slot>\n          </span>\n        </mock:shadow-root>\n        Hidden text\n      </gcds-sr-only>\n    `);\n  });\n\n  it('renders h1 heading tag', async () => {\n    const page = await newSpecPage({\n      components: [GcdsSrOnly],\n      html: `<gcds-sr-only tag=\"h1\">Hidden text</gcds-sr-only>`,\n    });\n    expect(page.root).toEqualHtml(`\n      <gcds-sr-only tag=\"h1\">\n        <mock:shadow-root>\n          <h1>\n            <slot></slot>\n          </h1>\n        </mock:shadow-root>\n        Hidden text\n      </gcds-sr-only>\n    `);\n  });\n\n  it('renders h2 heading tag', async () => {\n    const page = await newSpecPage({\n      components: [GcdsSrOnly],\n      html: `<gcds-sr-only tag=\"h2\">Hidden text</gcds-sr-only>`,\n    });\n    expect(page.root).toEqualHtml(`\n      <gcds-sr-only tag=\"h2\">\n        <mock:shadow-root>\n          <h2>\n            <slot></slot>\n          </h2>\n        </mock:shadow-root>\n        Hidden text\n      </gcds-sr-only>\n    `);\n  });\n\n  it('renders h3 heading tag', async () => {\n    const page = await newSpecPage({\n      components: [GcdsSrOnly],\n      html: `<gcds-sr-only tag=\"h3\">Hidden text</gcds-sr-only>`,\n    });\n    expect(page.root).toEqualHtml(`\n      <gcds-sr-only tag=\"h3\">\n        <mock:shadow-root>\n          <h3>\n            <slot></slot>\n          </h3>\n        </mock:shadow-root>\n        Hidden text\n      </gcds-sr-only>\n    `);\n  });\n\n  it('renders h4 heading tag', async () => {\n    const page = await newSpecPage({\n      components: [GcdsSrOnly],\n      html: `<gcds-sr-only tag=\"h4\">Hidden text</gcds-sr-only>`,\n    });\n    expect(page.root).toEqualHtml(`\n      <gcds-sr-only tag=\"h4\">\n        <mock:shadow-root>\n          <h4>\n            <slot></slot>\n          </h4>\n        </mock:shadow-root>\n        Hidden text\n      </gcds-sr-only>\n    `);\n  });\n\n  it('renders h5 heading tag', async () => {\n    const page = await newSpecPage({\n      components: [GcdsSrOnly],\n      html: `<gcds-sr-only tag=\"h5\">Hidden text</gcds-sr-only>`,\n    });\n    expect(page.root).toEqualHtml(`\n      <gcds-sr-only tag=\"h5\">\n        <mock:shadow-root>\n          <h5>\n            <slot></slot>\n          </h5>\n        </mock:shadow-root>\n        Hidden text\n      </gcds-sr-only>\n    `);\n  });\n\n  it('renders h6 heading tag', async () => {\n    const page = await newSpecPage({\n      components: [GcdsSrOnly],\n      html: `<gcds-sr-only tag=\"h6\">Hidden text</gcds-sr-only>`,\n    });\n    expect(page.root).toEqualHtml(`\n      <gcds-sr-only tag=\"h6\">\n        <mock:shadow-root>\n          <h6>\n            <slot></slot>\n          </h6>\n        </mock:shadow-root>\n        Hidden text\n      </gcds-sr-only>\n    `);\n  });\n});\n"]}