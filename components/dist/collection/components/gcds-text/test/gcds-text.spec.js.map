{"version":3,"file":"gcds-text.spec.js","sourceRoot":"","sources":["../../../../src/components/gcds-text/test/gcds-text.spec.ts"],"names":[],"mappings":"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","sourcesContent":["import { newSpecPage } from '@stencil/core/testing';\nimport { GcdsText } from '../gcds-text';\n\ndescribe('gcds-text', () => {\n  it('renders text', async () => {\n    const { root } = await newSpecPage({\n      components: [GcdsText],\n      html: `\n        <gcds-text>This is some text.</gcds-text>\n      `,\n    });\n    expect(root).toEqualHtml(`\n      <gcds-text>\n        <mock:shadow-root>\n          <p class=\"gcds-text limit role-primary mt-0 mb-400\" part=\"text\">\n            <slot></slot>\n          </p>\n        </mock:shadow-root>\n        This is some text.\n      </gcds-text>\n    `);\n  });\n\n  /**\n    Text roles\n   */\n  it('renders primary text', async () => {\n    const { root } = await newSpecPage({\n      components: [GcdsText],\n      html: `\n        <gcds-text text-role=\"primary\">This is some text.</gcds-text>\n      `,\n    });\n    expect(root).toEqualHtml(`\n      <gcds-text text-role=\"primary\">\n        <mock:shadow-root>\n          <p class=\"gcds-text limit role-primary mt-0 mb-400\" part=\"text\">\n            <slot></slot>\n          </p>\n        </mock:shadow-root>\n        This is some text.\n      </gcds-text>\n    `);\n  });\n\n  it('renders secondary text', async () => {\n    const { root } = await newSpecPage({\n      components: [GcdsText],\n      html: `\n        <gcds-text text-role=\"secondary\">This is some text.</gcds-text>\n      `,\n    });\n    expect(root).toEqualHtml(`\n      <gcds-text text-role=\"secondary\">\n        <mock:shadow-root>\n          <p class=\"gcds-text limit role-secondary mt-0 mb-400\" part=\"text\">\n            <slot></slot>\n          </p>\n        </mock:shadow-root>\n        This is some text.\n      </gcds-text>\n    `);\n  });\n\n  it('renders light text', async () => {\n    const { root } = await newSpecPage({\n      components: [GcdsText],\n      html: `\n        <gcds-text text-role=\"light\">This is some text.</gcds-text>\n      `,\n    });\n    expect(root).toEqualHtml(`\n      <gcds-text text-role=\"light\">\n        <mock:shadow-root>\n          <p class=\"gcds-text limit role-light mt-0 mb-400\" part=\"text\">\n            <slot></slot>\n          </p>\n        </mock:shadow-root>\n        This is some text.\n      </gcds-text>\n    `);\n  });\n\n  /**\n    Character limits\n   */\n  it('renders text with character limit by default', async () => {\n    const { root } = await newSpecPage({\n      components: [GcdsText],\n      html: `\n        <gcds-text>This is some text.</gcds-text>\n      `,\n    });\n    expect(root).toEqualHtml(`\n      <gcds-text>\n        <mock:shadow-root>\n          <p class=\"gcds-text limit role-primary mt-0 mb-400\" part=\"text\">\n            <slot></slot>\n          </p>\n        </mock:shadow-root>\n        This is some text.\n      </gcds-text>\n    `);\n  });\n\n  it('renders text without character limit', async () => {\n    const { root } = await newSpecPage({\n      components: [GcdsText],\n      html: `\n        <gcds-text character-limit=\"false\">This is some text.</gcds-text>\n      `,\n    });\n    expect(root).toEqualHtml(`\n      <gcds-text character-limit=\"false\">\n        <mock:shadow-root>\n          <p class=\"gcds-text role-primary mt-0 mb-400\" part=\"text\">\n            <slot></slot>\n          </p>\n        </mock:shadow-root>\n        This is some text.\n      </gcds-text>\n    `);\n  });\n\n  /**\n    Display\n   */\n  it('renders text as block by default', async () => {\n    const { root } = await newSpecPage({\n      components: [GcdsText],\n      html: `\n        <gcds-text>This is some text.</gcds-text>\n      `,\n    });\n    expect(root).toEqualHtml(`\n      <gcds-text>\n        <mock:shadow-root>\n          <p class=\"gcds-text limit role-primary mt-0 mb-400\" part=\"text\">\n            <slot></slot>\n          </p>\n        </mock:shadow-root>\n        This is some text.\n      </gcds-text>\n    `);\n  });\n\n  it('renders text as flex', async () => {\n    const { root } = await newSpecPage({\n      components: [GcdsText],\n      html: `\n        <gcds-text display=\"flex\">This is some text.</gcds-text>\n      `,\n    });\n    expect(root).toEqualHtml(`\n      <gcds-text class=\"d-flex\" display=\"flex\">\n        <mock:shadow-root>\n          <p class=\"gcds-text limit role-primary mt-0 mb-400\" part=\"text\">\n            <slot></slot>\n          </p>\n        </mock:shadow-root>\n        This is some text.\n      </gcds-text>\n    `);\n  });\n\n  /**\n    Spacing tests\n   */\n  it('renders margin-top', async () => {\n    const { root } = await newSpecPage({\n      components: [GcdsText],\n      html: `\n        <gcds-text margin-top=\"400\">This is some text.</gcds-text>\n      `,\n    });\n    expect(root).toEqualHtml(`\n      <gcds-text margin-top=\"400\">\n        <mock:shadow-root>\n          <p class=\"gcds-text limit role-primary mt-400 mb-400\" part=\"text\">\n            <slot></slot>\n          </p>\n        </mock:shadow-root>\n        This is some text.\n      </gcds-text>\n    `);\n  });\n\n  it('renders margin-bottom', async () => {\n    const { root } = await newSpecPage({\n      components: [GcdsText],\n      html: `\n        <gcds-text margin-bottom=\"600\">This is some text.</gcds-text>\n      `,\n    });\n    expect(root).toEqualHtml(`\n      <gcds-text margin-bottom=\"600\">\n        <mock:shadow-root>\n          <p class=\"gcds-text limit role-primary mt-0 mb-600\" part=\"text\">\n            <slot></slot>\n          </p>\n        </mock:shadow-root>\n        This is some text.\n      </gcds-text>\n    `);\n  });\n\n  /**\n    Size\n   */\n  it('renders body text size by default', async () => {\n    const { root } = await newSpecPage({\n      components: [GcdsText],\n      html: `\n        <gcds-text>This is some text.</gcds-text>\n      `,\n    });\n    expect(root).toEqualHtml(`\n      <gcds-text>\n        <mock:shadow-root>\n          <p class=\"gcds-text limit role-primary mt-0 mb-400\" part=\"text\">\n            <slot></slot>\n          </p>\n        </mock:shadow-root>\n        This is some text.\n      </gcds-text>\n    `);\n  });\n\n  it('renders caption text size', async () => {\n    const { root } = await newSpecPage({\n      components: [GcdsText],\n      html: `\n        <gcds-text size=\"caption\">This is some text.</gcds-text>\n      `,\n    });\n    expect(root).toEqualHtml(`\n      <gcds-text size=\"caption\">\n        <mock:shadow-root>\n          <p class=\"gcds-text limit role-primary mt-0 mb-400\" part=\"text\">\n            <small><slot></slot></small>\n          </p>\n        </mock:shadow-root>\n        This is some text.\n      </gcds-text>\n    `);\n  });\n});\n"]}