{"version":3,"file":"gcds-text.js","sourceRoot":"","sources":["../../../src/components/gcds-text/gcds-text.tsx"],"names":[],"mappings":"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","sourcesContent":["import { Component, Element, Host, Watch, Prop, h } from '@stencil/core';\n\n@Component({\n  tag: 'gcds-text',\n  styleUrl: 'gcds-text.css',\n  shadow: true,\n})\nexport class GcdsText {\n  @Element() el: HTMLElement;\n\n  /**\n   * Props\n   */\n\n  /**\n   * Sets the main style of the text.\n   */\n  @Prop({ mutable: true }) textRole?: 'light' | 'primary' | 'secondary' =\n    'primary';\n\n  @Watch('textRole')\n  validateTextRole(newValue: string) {\n    const values = ['light', 'primary', 'secondary'];\n\n    if (!values.includes(newValue)) {\n      this.textRole = 'primary';\n    }\n  }\n\n  /**\n   * Sets the line length to a maximum amount of characters per line to ensure a comfortable, accessible reading length.\n   */\n  @Prop() characterLimit?: boolean = true;\n\n  /**\n   * Specifies the display behaviour of the text.\n   */\n  @Prop({ mutable: true }) display?:\n    | 'block'\n    | 'flex'\n    | 'inline'\n    | 'inline-block'\n    | 'inline-flex'\n    | 'none' = 'block';\n\n  @Watch('display')\n  validateDisplay(newValue: string) {\n    const values = [\n      'block',\n      'flex',\n      'inline',\n      'inline-block',\n      'inline-flex',\n      'none',\n    ];\n\n    if (!values.includes(newValue)) {\n      this.display = 'block';\n    }\n  }\n\n  /**\n   * Adds margin above the text.\n   */\n  @Prop({ mutable: true }) marginTop?:\n    | '0'\n    | '50'\n    | '100'\n    | '150'\n    | '200'\n    | '250'\n    | '300'\n    | '400'\n    | '450'\n    | '500'\n    | '550'\n    | '600'\n    | '700'\n    | '800'\n    | '900'\n    | '1000' = '0';\n\n  @Watch('marginTop')\n  validateMarginTop(newValue: string) {\n    const values = [\n      '0',\n      '50',\n      '100',\n      '150',\n      '200',\n      '250',\n      '300',\n      '400',\n      '450',\n      '500',\n      '550',\n      '600',\n      '700',\n      '800',\n      '900',\n      '1000',\n    ];\n\n    if (!values.includes(newValue)) {\n      this.marginTop = '0';\n    }\n  }\n\n  /**\n   * Adds margin below the text.\n   */\n  @Prop({ mutable: true }) marginBottom?:\n    | '0'\n    | '50'\n    | '100'\n    | '150'\n    | '200'\n    | '250'\n    | '300'\n    | '400'\n    | '450'\n    | '500'\n    | '550'\n    | '600'\n    | '700'\n    | '800'\n    | '900'\n    | '1000' = '400';\n\n  @Watch('marginBottom')\n  validateMarginBottom(newValue: string) {\n    const values = [\n      '0',\n      '50',\n      '100',\n      '150',\n      '200',\n      '250',\n      '300',\n      '400',\n      '450',\n      '500',\n      '550',\n      '600',\n      '700',\n      '800',\n      '900',\n      '1000',\n    ];\n\n    if (!values.includes(newValue)) {\n      this.marginBottom = '400';\n    }\n  }\n\n  /**\n   * Sets the appropriate HTML tags for the selected size.\n   */\n  @Prop({ mutable: true }) size?: 'body' | 'caption' = 'body';\n\n  @Watch('size')\n  validateSize(newValue: string) {\n    const values = ['body', 'caption'];\n\n    if (!values.includes(newValue)) {\n      this.size = 'body';\n    }\n  }\n\n  componentWillLoad() {\n    // Validate attributes and set defaults\n    this.validateTextRole(this.textRole);\n    this.validateDisplay(this.display);\n    this.validateMarginTop(this.marginTop);\n    this.validateMarginBottom(this.marginBottom);\n    this.validateSize(this.size);\n  }\n\n  render() {\n    const { characterLimit, display, marginTop, marginBottom, size, textRole } =\n      this;\n\n    return (\n      <Host class={`${display != 'block' ? `d-${display}` : ''}`}>\n        <p\n          class={`\n            gcds-text\n            ${textRole ? `role-${textRole}` : ''}\n            ${characterLimit ? 'limit' : ''}\n            ${marginTop ? `mt-${marginTop}` : ''}\n            ${marginBottom ? `mb-${marginBottom}` : ''}\n          `}\n        >\n          {size === 'caption' ? (\n            <small>\n              <slot />\n            </small>\n          ) : (\n            <slot />\n          )}\n        </p>\n      </Host>\n    );\n  }\n}\n"]}