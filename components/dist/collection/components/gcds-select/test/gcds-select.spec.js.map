{"version":3,"file":"gcds-select.spec.js","sourceRoot":"","sources":["../../../../src/components/gcds-select/test/gcds-select.spec.tsx"],"names":[],"mappings":"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","sourcesContent":["import { newSpecPage } from '@stencil/core/testing';\nimport { GcdsSelect } from '../gcds-select';\n\ndescribe('gcds-select', () => {\n  it('renders', async () => {\n    const page = await newSpecPage({\n      components: [GcdsSelect],\n      html: `<gcds-select label=\"select\" select-id=\"select\"></gcds-select>`,\n    });\n    expect(page.root).toEqualHtml(`\n      <gcds-select select-id=\"select\" label=\"select\">\n        <div class=\"gcds-select-wrapper\">\n          <gcds-label label=\"select\" label-for=\"select\" lang=\"en\"></gcds-label>\n          <select id=\"select\" name=\"select\" aria-invalid=\"false\">\n          </select>\n        </div>\n      </gcds-select>\n    `);\n  });\n\n  /**\n   * Disabled test\n   */\n  it('renders disabled', async () => {\n    const page = await newSpecPage({\n      components: [GcdsSelect],\n      html: `<gcds-select label=\"select\" select-id=\"select\" disabled></gcds-select>`,\n    });\n    expect(page.root).toEqualHtml(`\n      <gcds-select select-id=\"select\" label=\"select\" disabled error-message=\"\">\n        <div class=\"gcds-select-wrapper gcds-disabled\">\n          <gcds-label label=\"select\" label-for=\"select\" lang=\"en\"></gcds-label>\n          <select id=\"select\" name=\"select\" aria-invalid=\"false\" disabled>\n          </select>\n        </div>\n      </gcds-select>\n    `);\n  });\n\n  /**\n   * Error message test\n   */\n  it('renders error message', async () => {\n    const page = await newSpecPage({\n      components: [GcdsSelect],\n      html: `<gcds-select label=\"select\" select-id=\"select\" error-message=\"This is an error message.\"></gcds-select>`,\n    });\n    expect(page.root).toEqualHtml(`\n      <gcds-select select-id=\"select\" label=\"select\" error-message=\"This is an error message.\">\n        <div class=\"gcds-select-wrapper gcds-error\">\n          <gcds-label label=\"select\" label-for=\"select\" lang=\"en\"></gcds-label>\n          <gcds-error-message message=\"This is an error message.\" messageId=\"select\"></gcds-error-message>\n          <select id=\"select\" name=\"select\" aria-invalid=\"true\" aria-describedby=\"error-message-select \">\n          </select>\n        </div>\n      </gcds-select>\n    `);\n  });\n\n  /**\n   * Select hint test\n   */\n  it('renders hint', async () => {\n    const page = await newSpecPage({\n      components: [GcdsSelect],\n      html: `<gcds-select label=\"select\" select-id=\"select\" hint=\"This is a hint.\"></gcds-select>`,\n    });\n    expect(page.root).toEqualHtml(`\n      <gcds-select select-id=\"select\" label=\"select\" hint=\"This is a hint.\">\n        <div class=\"gcds-select-wrapper\">\n          <gcds-label label=\"select\" label-for=\"select\" lang=\"en\"></gcds-label>\n          <gcds-hint hint=\"This is a hint.\" hint-id=\"select\"></gcds-hint>\n          <select id=\"select\" name=\"select\" aria-invalid=\"false\" aria-describedby=\"hint-select \">\n          </select>\n        </div>\n      </gcds-select>\n    `);\n  });\n\n  /**\n   * Select ID test\n   */\n  it('renders select id', async () => {\n    const page = await newSpecPage({\n      components: [GcdsSelect],\n      html: `<gcds-select label=\"select\" select-id=\"select\"></gcds-select>`,\n    });\n    expect(page.root).toEqualHtml(`\n      <gcds-select select-id=\"select\" label=\"select\">\n        <div class=\"gcds-select-wrapper\">\n          <gcds-label label=\"select\" label-for=\"select\" lang=\"en\"></gcds-label>\n          <select id=\"select\" name=\"select\" aria-invalid=\"false\">\n          </select>\n        </div>\n      </gcds-select>\n    `);\n  });\n\n  /**\n   * Select label test\n   */\n  it('renders select label', async () => {\n    const page = await newSpecPage({\n      components: [GcdsSelect],\n      html: `<gcds-select label=\"select\" select-id=\"select\"></gcds-select>`,\n    });\n    expect(page.root).toEqualHtml(`\n      <gcds-select select-id=\"select\" label=\"select\">\n        <div class=\"gcds-select-wrapper\">\n          <gcds-label label=\"select\" label-for=\"select\" lang=\"en\"></gcds-label>\n          <select id=\"select\" name=\"select\" aria-invalid=\"false\">\n          </select>\n        </div>\n      </gcds-select>\n    `);\n  });\n\n  /**\n   * Select required test\n   */\n  it('renders required', async () => {\n    const page = await newSpecPage({\n      components: [GcdsSelect],\n      html: `<gcds-select label=\"select\" select-id=\"select\" required></gcds-select>`,\n    });\n    expect(page.root).toEqualHtml(`\n      <gcds-select select-id=\"select\" label=\"select\" required>\n        <div class=\"gcds-select-wrapper\">\n          <gcds-label label=\"select\" label-for=\"select\" lang=\"en\" required=\"\"></gcds-label>\n          <select id=\"select\" name=\"select\" aria-invalid=\"false\" required=\"\">\n          </select>\n        </div>\n      </gcds-select>\n    `);\n  });\n\n  /**\n   * Select with options test\n   */\n  it('renders select with options', async () => {\n    const page = await newSpecPage({\n      components: [GcdsSelect],\n      html: `\n        <gcds-select label=\"select\" select-id=\"select\">\n          <option>This is option 1</option>\n          <option>This is option 2</option>\n          <option>This is option 3</option>\n        </gcds-select>\n      `,\n    });\n    expect(page.root).toEqualHtml(`\n      <gcds-select select-id=\"select\" label=\"select\">\n        <div class=\"gcds-select-wrapper\">\n          <gcds-label label=\"select\" label-for=\"select\" lang=\"en\"></gcds-label>\n          <select id=\"select\" name=\"select\" aria-invalid=\"false\">\n            <option>This is option 1</option>\n            <option>This is option 2</option>\n            <option>This is option 3</option>\n          </select>\n        </div>\n      </gcds-select>\n    `);\n  });\n\n  /**\n   * Select with options and default value test\n   */\n  it('renders select with options and default value', async () => {\n    const page = await newSpecPage({\n      components: [GcdsSelect],\n      html: `\n        <gcds-select label=\"select\" select-id=\"select\" default-value=\"Please select one\">\n          <option>This is option 1</option>\n          <option>This is option 2</option>\n          <option>This is option 3</option>\n        </gcds-select>\n      `,\n    });\n    expect(page.root).toEqualHtml(`\n      <gcds-select select-id=\"select\" label=\"select\" default-value=\"Please select one\">\n        <div class=\"gcds-select-wrapper\">\n          <gcds-label label=\"select\" label-for=\"select\" lang=\"en\"></gcds-label>\n          <select id=\"select\" name=\"select\" aria-invalid=\"false\">\n            <option value=\"\" selected disabled=\"\">Please select one</option>\n            <option>This is option 1</option>\n            <option>This is option 2</option>\n            <option>This is option 3</option>\n          </select>\n        </div>\n      </gcds-select>\n    `);\n  });\n});\n"]}