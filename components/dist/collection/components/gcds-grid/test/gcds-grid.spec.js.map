{"version":3,"file":"gcds-grid.spec.js","sourceRoot":"","sources":["../../../../src/components/gcds-grid/test/gcds-grid.spec.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,WAAW,EAAE,MAAM,uBAAuB,CAAC;AACpD,OAAO,EAAE,QAAQ,EAAE,MAAM,cAAc,CAAC;AAExC,QAAQ,CAAC,WAAW,EAAE,GAAG,EAAE;IACzB,EAAE,CAAC,sCAAsC,EAAE,KAAK,IAAI,EAAE;QACpD,MAAM,EAAE,IAAI,EAAE,GAAG,MAAM,WAAW,CAAC;YACjC,UAAU,EAAE,CAAC,QAAQ,CAAC;YACtB,IAAI,EAAE;;OAEL;SACF,CAAC,CAAC;QACH,MAAM,CAAC,IAAI,CAAC,CAAC,WAAW,CAAC;;;;;;;;KAQxB,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,6BAA6B,EAAE,KAAK,IAAI,EAAE;QAC3C,MAAM,EAAE,IAAI,EAAE,GAAG,MAAM,WAAW,CAAC;YACjC,UAAU,EAAE,CAAC,QAAQ,CAAC;YACtB,IAAI,EAAE;;OAEL;SACF,CAAC,CAAC;QACH,MAAM,CAAC,IAAI,CAAC,CAAC,WAAW,CAAC;;;;;;;;KAQxB,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,kBAAkB,EAAE,KAAK,IAAI,EAAE;QAChC,MAAM,EAAE,IAAI,EAAE,GAAG,MAAM,WAAW,CAAC;YACjC,UAAU,EAAE,CAAC,QAAQ,CAAC;YACtB,IAAI,EAAE;;OAEL;SACF,CAAC,CAAC;QACH,MAAM,CAAC,IAAI,CAAC,CAAC,WAAW,CAAC;;;;;;;;KAQxB,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,gDAAgD,EAAE,KAAK,IAAI,EAAE;QAC9D,MAAM,EAAE,IAAI,EAAE,GAAG,MAAM,WAAW,CAAC;YACjC,UAAU,EAAE,CAAC,QAAQ,CAAC;YACtB,IAAI,EAAE;;OAEL;SACF,CAAC,CAAC;QACH,MAAM,CAAC,IAAI,CAAC,CAAC,WAAW,CAAC;;;;;;;;KAQxB,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["import { newSpecPage } from '@stencil/core/testing';\nimport { GcdsGrid } from '../gcds-grid';\n\ndescribe('gcds-grid', () => {\n  it('renders - desktop, tablet and mobile', async () => {\n    const { root } = await newSpecPage({\n      components: [GcdsGrid],\n      html: `\n        <gcds-grid columns-desktop=\"1fr 1fr 1fr 1fr\" columns-tablet=\"1fr 1fr\" columns=\"1fr\" tag=\"ul\" />\n      `,\n    });\n    expect(root).toEqualHtml(`\n      <gcds-grid columns-desktop=\"1fr 1fr 1fr 1fr\" columns-tablet=\"1fr 1fr\" columns=\"1fr\" tag=\"ul\">\n        <mock:shadow-root>\n          <ul class=\"display-grid gcds-grid\" style=\"--gcds-grid-columns: 1fr; --gcds-grid-columns-tablet: 1fr 1fr; --gcds-grid-columns-desktop: 1fr 1fr 1fr 1fr;\">\n            <slot></slot>\n          </ul>\n        </mock:shadow-root>\n      </gcds-grid>\n    `);\n  });\n\n  it('renders - tablet and mobile', async () => {\n    const { root } = await newSpecPage({\n      components: [GcdsGrid],\n      html: `\n        <gcds-grid columns-tablet=\"1fr 1fr\" columns=\"1fr\" tag=\"ul\" />\n      `,\n    });\n    expect(root).toEqualHtml(`\n      <gcds-grid columns-tablet=\"1fr 1fr\" columns=\"1fr\" tag=\"ul\">\n        <mock:shadow-root>\n          <ul class=\"display-grid gcds-grid\" style=\"--gcds-grid-columns: 1fr; --gcds-grid-columns-tablet: 1fr 1fr;\">\n            <slot></slot>\n          </ul>\n        </mock:shadow-root>\n      </gcds-grid>\n    `);\n  });\n\n  it('renders - mobile', async () => {\n    const { root } = await newSpecPage({\n      components: [GcdsGrid],\n      html: `\n        <gcds-grid columns=\"1fr\" tag=\"ul\" />\n      `,\n    });\n    expect(root).toEqualHtml(`\n      <gcds-grid columns=\"1fr\" tag=\"ul\">\n        <mock:shadow-root>\n          <ul class=\"display-grid gcds-grid\" style=\"--gcds-grid-columns: 1fr;\">\n            <slot></slot>\n          </ul>\n        </mock:shadow-root>\n      </gcds-grid>\n    `);\n  });\n\n  it('renders - div when passed an invalid tag value', async () => {\n    const { root } = await newSpecPage({\n      components: [GcdsGrid],\n      html: `\n        <gcds-grid columns=\"1fr\" tag=\"p\" />\n      `,\n    });\n    expect(root).toEqualHtml(`\n      <gcds-grid columns=\"1fr\" tag=\"p\">\n        <mock:shadow-root>\n          <div class=\"display-grid gcds-grid\" style=\"--gcds-grid-columns: 1fr;\">\n            <slot></slot>\n          </div>\n        </mock:shadow-root>\n      </gcds-grid>\n    `);\n  });\n});\n"]}