{"version":3,"file":"gcds-input.spec.js","sourceRoot":"","sources":["../../../../src/components/gcds-input/test/gcds-input.spec.ts"],"names":[],"mappings":"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","sourcesContent":["import { newSpecPage } from '@stencil/core/testing';\nimport { GcdsInput } from '../gcds-input';\n\n// import '../../../utils/test/elementInternals.mock';\n\ndescribe('gcds-input', () => {\n  it('renders with minimum required properties', async () => {\n    const { root } = await newSpecPage({\n      components: [GcdsInput],\n      html: '<gcds-input label=\"Label\" input-id=\"input-renders\" name=\"input-renders-name\"/>',\n    });\n    expect(root).toEqualHtml(`\n      <gcds-input label=\"Label\" input-id=\"input-renders\" name=\"input-renders-name\">\n        <mock:shadow-root>\n          <div class=\"gcds-input-wrapper\">\n            <gcds-label label-for=\"input-renders\" label=\"Label\" lang=\"en\"></gcds-label>\n            <input\n              type=\"text\"\n              id=\"input-renders\"\n              name=\"input-renders-name\"\n              part=\"input\"\n              aria-labelledby=\"label-for-input-renders\"\n              aria-invalid=\"false\"\n            />\n          </div>\n        </mock:shadow-root>\n      </gcds-input>\n    `);\n  });\n\n  /**\n   * Type tests\n   */\n  it('renders type email', async () => {\n    const { root } = await newSpecPage({\n      components: [GcdsInput],\n      html: '<gcds-input type=\"email\" label=\"Label\" input-id=\"type-email\" name=\"type-email-name\"/>',\n    });\n    expect(root).toEqualHtml(`\n      <gcds-input type=\"email\" label=\"Label\" input-id=\"type-email\" name=\"type-email-name\">\n        <mock:shadow-root>\n          <div class=\"gcds-input-wrapper\">\n            <gcds-label label-for=\"type-email\" label=\"Label\" lang=\"en\"></gcds-label>\n            <input\n              type=\"email\"\n              id=\"type-email\"\n              name=\"type-email-name\"\n              part=\"input\"\n              aria-labelledby=\"label-for-type-email\"\n              aria-invalid=\"false\"\n            />\n          </div>\n        </mock:shadow-root>\n      </gcds-input>\n    `);\n  });\n\n  it('renders type number', async () => {\n    const { root } = await newSpecPage({\n      components: [GcdsInput],\n      html: '<gcds-input type=\"number\" label=\"Label\" input-id=\"type-number\" name=\"type-number-name\"/>',\n    });\n    expect(root).toEqualHtml(`\n      <gcds-input type=\"number\" label=\"Label\" input-id=\"type-number\" name=\"type-number-name\">\n        <mock:shadow-root>\n          <div class=\"gcds-input-wrapper\">\n            <gcds-label label-for=\"type-number\" label=\"Label\" lang=\"en\"></gcds-label>\n            <input\n              type=\"number\"\n              id=\"type-number\"\n              name=\"type-number-name\"\n              part=\"input\"\n              aria-labelledby=\"label-for-type-number\"\n              aria-invalid=\"false\"\n            />\n          </div>\n        </mock:shadow-root>\n      </gcds-input>\n    `);\n  });\n\n  it('renders type password', async () => {\n    const { root } = await newSpecPage({\n      components: [GcdsInput],\n      html: '<gcds-input type=\"password\" label=\"Label\" input-id=\"type-password\" name=\"type-password-name\"/>',\n    });\n    expect(root).toEqualHtml(`\n      <gcds-input type=\"password\" label=\"Label\" input-id=\"type-password\" name=\"type-password-name\">\n        <mock:shadow-root>\n          <div class=\"gcds-input-wrapper\">\n            <gcds-label label-for=\"type-password\" label=\"Label\" lang=\"en\"></gcds-label>\n            <input\n              type=\"password\"\n              id=\"type-password\"\n              name=\"type-password-name\"\n              part=\"input\"\n              aria-labelledby=\"label-for-type-password\"\n              aria-invalid=\"false\"\n            />\n          </div>\n        </mock:shadow-root>\n      </gcds-input>\n    `);\n  });\n\n  it('renders type search', async () => {\n    const { root } = await newSpecPage({\n      components: [GcdsInput],\n      html: '<gcds-input type=\"search\" label=\"Label\" input-id=\"type-search\" name=\"type-search-name\"/>',\n    });\n    expect(root).toEqualHtml(`\n      <gcds-input type=\"search\" label=\"Label\" input-id=\"type-search\" name=\"type-search-name\">\n        <mock:shadow-root>\n          <div class=\"gcds-input-wrapper\">\n            <gcds-label label-for=\"type-search\" label=\"Label\" lang=\"en\"></gcds-label>\n            <input\n              type=\"search\"\n              id=\"type-search\"\n              name=\"type-search-name\"\n              part=\"input\"\n              aria-labelledby=\"label-for-type-search\"\n              aria-invalid=\"false\"\n            />\n          </div>\n        </mock:shadow-root>\n      </gcds-input>\n    `);\n  });\n\n  it('renders type text', async () => {\n    const { root } = await newSpecPage({\n      components: [GcdsInput],\n      html: '<gcds-input type=\"text\" label=\"Label\" input-id=\"type-text\" name=\"type-text-name\"/>',\n    });\n    expect(root).toEqualHtml(`\n      <gcds-input type=\"text\" label=\"Label\" input-id=\"type-text\" name=\"type-text-name\">\n        <mock:shadow-root>\n          <div class=\"gcds-input-wrapper\">\n            <gcds-label label-for=\"type-text\" label=\"Label\" lang=\"en\"></gcds-label>\n            <input\n              type=\"text\"\n              id=\"type-text\"\n              name=\"type-text-name\"\n              part=\"input\"\n              aria-labelledby=\"label-for-type-text\"\n              aria-invalid=\"false\"\n            />\n          </div>\n        </mock:shadow-root>\n      </gcds-input>\n    `);\n  });\n\n  it('renders type url', async () => {\n    const { root } = await newSpecPage({\n      components: [GcdsInput],\n      html: '<gcds-input type=\"url\" label=\"Label\" input-id=\"type-url\" name=\"type-url-name\"/>',\n    });\n    expect(root).toEqualHtml(`\n      <gcds-input type=\"url\" label=\"Label\" input-id=\"type-url\" name=\"type-url-name\">\n        <mock:shadow-root>\n          <div class=\"gcds-input-wrapper\">\n            <gcds-label label-for=\"type-url\" label=\"Label\" lang=\"en\"></gcds-label>\n            <input\n              type=\"url\"\n              id=\"type-url\"\n              name=\"type-url-name\"\n              part=\"input\"\n              aria-labelledby=\"label-for-type-url\"\n              aria-invalid=\"false\"\n            />\n          </div>\n        </mock:shadow-root>\n      </gcds-input>\n    `);\n  });\n\n  /**\n   * Disabled test\n   */\n  it('renders disabled', async () => {\n    const { root } = await newSpecPage({\n      components: [GcdsInput],\n      html: '<gcds-input label=\"Label\" input-id=\"input-disabled\" name=\"input-disabled-name\" disabled />',\n    });\n    expect(root).toEqualHtml(`\n      <gcds-input label=\"Label\" input-id=\"input-disabled\" name=\"input-disabled-name\" disabled=\"\">\n        <mock:shadow-root>\n          <div class=\"gcds-input-wrapper gcds-disabled\">\n            <gcds-label label-for=\"input-disabled\" label=\"Label\" lang=\"en\"></gcds-label>\n            <input\n              type=\"text\"\n              id=\"input-disabled\"\n              name=\"input-disabled-name\"\n              part=\"input\"\n              aria-labelledby=\"label-for-input-disabled\"\n              aria-invalid=\"false\"\n              disabled=\"\"\n            />\n          </div>\n        </mock:shadow-root>\n      </gcds-input>\n    `);\n  });\n\n  /**\n   * Error message test\n   */\n  it('renders error message', async () => {\n    const { root } = await newSpecPage({\n      components: [GcdsInput],\n      html: '<gcds-input label=\"Label\" input-id=\"input-with-error\" name=\"input-with-error-name\" error-message=\"This is an error message.\" />',\n    });\n    expect(root).toEqualHtml(`\n      <gcds-input label=\"Label\" input-id=\"input-with-error\" name=\"input-with-error-name\" error-message=\"This is an error message.\">\n        <mock:shadow-root>\n          <div class=\"gcds-input-wrapper gcds-error\">\n            <gcds-label label-for=\"input-with-error\" label=\"Label\" lang=\"en\"></gcds-label>\n            <gcds-error-message messageId=\"input-with-error\">\n              This is an error message.\n            </gcds-error-message>\n            <input\n              type=\"text\"\n              id=\"input-with-error\"\n              class=\"gcds-error\"\n              name=\"input-with-error-name\"\n              part=\"input\"\n              aria-labelledby=\"label-for-input-with-error\"\n              aria-describedby=\"error-message-input-with-error \"\n              aria-invalid=\"true\"\n            />\n          </div>\n        </mock:shadow-root>\n      </gcds-input>\n    `);\n  });\n\n  /**\n   * Hide label\n   */\n  it('renders with label hidden', async () => {\n    const { root } = await newSpecPage({\n      components: [GcdsInput],\n      html: '<gcds-input label=\"Label\" input-id=\"input-label-hidden\" name=\"input-label-hidden-name\" hide-label />',\n    });\n    expect(root).toEqualHtml(`\n      <gcds-input label=\"Label\" input-id=\"input-label-hidden\" name=\"input-label-hidden-name\" hide-label>\n        <mock:shadow-root>\n          <div class=\"gcds-input-wrapper\">\n            <gcds-label label-for=\"input-label-hidden\" label=\"Label\" hide-label lang=\"en\"></gcds-label>\n            <input\n              type=\"text\"\n              id=\"input-label-hidden\"\n              name=\"input-label-hidden-name\"\n              part=\"input\"\n              aria-labelledby=\"label-for-input-label-hidden\"\n              aria-invalid=\"false\"\n            />\n          </div>\n        </mock:shadow-root>\n      </gcds-input>\n    `);\n  });\n\n  /**\n   * Input hint test\n   */\n  it('renders input hint', async () => {\n    const { root } = await newSpecPage({\n      components: [GcdsInput],\n      html: '<gcds-input label=\"Label\" input-id=\"input-with-hint\" name=\"input-with-hint-name\" hint=\"This is an input hint.\" />',\n    });\n    expect(root).toEqualHtml(`\n      <gcds-input label=\"Label\" input-id=\"input-with-hint\" name=\"input-with-hint-name\" hint=\"This is an input hint.\">\n        <mock:shadow-root>\n          <div class=\"gcds-input-wrapper\">\n            <gcds-label label-for=\"input-with-hint\" label=\"Label\" lang=\"en\"></gcds-label>\n            <gcds-hint hint-id=\"input-with-hint\">This is an input hint.</gcds-hint>\n            <input\n              type=\"text\"\n              id=\"input-with-hint\"\n              name=\"input-with-hint-name\"\n              part=\"input\"\n              aria-labelledby=\"label-for-input-with-hint\"\n              aria-describedby=\"hint-input-with-hint \"\n              aria-invalid=\"false\"\n            />\n          </div>\n        </mock:shadow-root>\n      </gcds-input>\n    `);\n  });\n\n  /**\n   * Input ID test\n   */\n  it('renders input id', async () => {\n    const { root } = await newSpecPage({\n      components: [GcdsInput],\n      html: '<gcds-input label=\"Label\" input-id=\"input-renders-id\" name=\"input-renders-id-name\" />',\n    });\n    expect(root).toEqualHtml(`\n      <gcds-input label=\"Label\" input-id=\"input-renders-id\" name=\"input-renders-id-name\">\n        <mock:shadow-root>\n          <div class=\"gcds-input-wrapper\">\n            <gcds-label label-for=\"input-renders-id\" label=\"Label\" lang=\"en\"></gcds-label>\n            <input\n              type=\"text\"\n              id=\"input-renders-id\"\n              name=\"input-renders-id-name\"\n              part=\"input\"\n              aria-labelledby=\"label-for-input-renders-id\"\n              aria-invalid=\"false\"\n            />\n          </div>\n        </mock:shadow-root>\n      </gcds-input>\n    `);\n  });\n\n  /**\n   * Input label test\n   */\n  it('renders label', async () => {\n    const { root } = await newSpecPage({\n      components: [GcdsInput],\n      html: '<gcds-input label=\"Label\" input-id=\"input-renders-label\" name=\"input-renders-label-name\" />',\n    });\n    expect(root).toEqualHtml(`\n      <gcds-input label=\"Label\" input-id=\"input-renders-label\" name=\"input-renders-label-name\">\n        <mock:shadow-root>\n          <div class=\"gcds-input-wrapper\">\n            <gcds-label label-for=\"input-renders-label\" label=\"Label\" lang=\"en\"></gcds-label>\n            <input\n              type=\"text\"\n              id=\"input-renders-label\"\n              name=\"input-renders-label-name\"\n              part=\"input\"\n              aria-labelledby=\"label-for-input-renders-label\"\n              aria-invalid=\"false\"\n            />\n          </div>\n        </mock:shadow-root>\n      </gcds-input>\n    `);\n  });\n\n  /**\n   * Required test\n   */\n  it('renders required', async () => {\n    const { root } = await newSpecPage({\n      components: [GcdsInput],\n      html: '<gcds-input label=\"Label\" input-id=\"input-required\" required name=\"input-required-name\"/>',\n    });\n    expect(root).toEqualHtml(`\n      <gcds-input label=\"Label\" input-id=\"input-required\" name=\"input-required-name\" required>\n        <mock:shadow-root>\n          <div class=\"gcds-input-wrapper\">\n            <gcds-label label-for=\"input-required\" label=\"Label\" required lang=\"en\"></gcds-label>\n            <input\n              type=\"text\"\n              id=\"input-required\"\n              name=\"input-required-name\"\n              part=\"input\"\n              aria-labelledby=\"label-for-input-required\"\n              aria-invalid=\"false\"\n              required\n            />\n          </div>\n        </mock:shadow-root>\n      </gcds-input>\n    `);\n  });\n\n  /**\n   * Input value test\n   */\n  it('renders input value', async () => {\n    const { root } = await newSpecPage({\n      components: [GcdsInput],\n      html: '<gcds-input label=\"Label\" input-id=\"input-with-value\" value=\"Input value\"  name=\"input-with-value-name\"/>',\n    });\n    expect(root).toEqualHtml(`\n      <gcds-input label=\"Label\" input-id=\"input-with-value\" value=\"Input value\" name=\"input-with-value-name\">\n        <mock:shadow-root>\n          <div class=\"gcds-input-wrapper\">\n            <gcds-label label-for=\"input-with-value\" label=\"Label\" lang=\"en\"></gcds-label>\n            <input\n              type=\"text\"\n              id=\"input-with-value\"\n              name=\"input-with-value-name\"\n              part=\"input\"\n              value=\"Input value\"\n              aria-labelledby=\"label-for-input-with-value\"\n              aria-invalid=\"false\"\n            />\n          </div>\n        </mock:shadow-root>\n      </gcds-input>\n    `);\n  });\n\n  /**\n   * Input name test\n   */\n  it('renders input name', async () => {\n    const { root } = await newSpecPage({\n      components: [GcdsInput],\n      html: '<gcds-input label=\"Label\" input-id=\"input-with-name\" name=\"input-with-name-name\"/>',\n    });\n    expect(root).toEqualHtml(`\n      <gcds-input label=\"Label\" input-id=\"input-with-name\" name=\"input-with-name-name\">\n        <mock:shadow-root>\n          <div class=\"gcds-input-wrapper\">\n            <gcds-label label-for=\"input-with-name\" label=\"Label\" lang=\"en\"></gcds-label>\n            <input\n              type=\"text\"\n              id=\"input-with-name\"\n              name=\"input-with-name-name\"\n              part=\"input\"\n              aria-labelledby=\"label-for-input-with-name\"\n              aria-invalid=\"false\"\n            />\n          </div>\n        </mock:shadow-root>\n      </gcds-input>\n    `);\n  });\n});\n"]}