{"version":3,"file":"gcds-input.spec.js","sourceRoot":"","sources":["../../../../src/components/gcds-input/test/gcds-input.spec.ts"],"names":[],"mappings":"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","sourcesContent":["import { newSpecPage } from '@stencil/core/testing';\nimport { GcdsInput } from '../gcds-input';\n\ndescribe('gcds-input', () => {\n  it('renders with minimum required properties', async () => {\n    const { root } = await newSpecPage({\n      components: [GcdsInput],\n      html: '<gcds-input label=\"Label\" input-id=\"input-renders\" />',\n    });\n    expect(root).toEqualHtml(`\n      <gcds-input label=\"Label\" input-id=\"input-renders\">\n        <div class=\"gcds-input-wrapper\">\n          <gcds-label label-for=\"input-renders\" label=\"Label\" lang=\"en\"></gcds-label>\n          <input\n            type=\"text\"\n            id=\"input-renders\"\n            name=\"input-renders\"\n            aria-labelledby=\"label-for-input-renders\"\n            aria-invalid=\"false\"\n          />\n        </div>\n      </gcds-input>\n    `);\n  });\n\n  /**\n   * Type tests\n   */\n  it('renders type email', async () => {\n    const { root } = await newSpecPage({\n      components: [GcdsInput],\n      html: '<gcds-input type=\"email\" label=\"Label\" input-id=\"type-email\" />',\n    });\n    expect(root).toEqualHtml(`\n      <gcds-input type=\"email\" label=\"Label\" input-id=\"type-email\">\n        <div class=\"gcds-input-wrapper\">\n          <gcds-label label-for=\"type-email\" label=\"Label\" lang=\"en\"></gcds-label>\n          <input\n            type=\"email\"\n            id=\"type-email\"\n            name=\"type-email\"\n            aria-labelledby=\"label-for-type-email\"\n            aria-invalid=\"false\"\n          />\n        </div>\n      </gcds-input>\n    `);\n  });\n\n  it('renders type number', async () => {\n    const { root } = await newSpecPage({\n      components: [GcdsInput],\n      html: '<gcds-input type=\"number\" label=\"Label\" input-id=\"type-number\" />',\n    });\n    expect(root).toEqualHtml(`\n      <gcds-input type=\"number\" label=\"Label\" input-id=\"type-number\">\n        <div class=\"gcds-input-wrapper\">\n          <gcds-label label-for=\"type-number\" label=\"Label\" lang=\"en\"></gcds-label>\n          <input\n            type=\"number\"\n            id=\"type-number\"\n            name=\"type-number\"\n            aria-labelledby=\"label-for-type-number\"\n            aria-invalid=\"false\"\n          />\n        </div>\n      </gcds-input>\n    `);\n  });\n\n  it('renders type password', async () => {\n    const { root } = await newSpecPage({\n      components: [GcdsInput],\n      html: '<gcds-input type=\"password\" label=\"Label\" input-id=\"type-password\" />',\n    });\n    expect(root).toEqualHtml(`\n      <gcds-input type=\"password\" label=\"Label\" input-id=\"type-password\">\n        <div class=\"gcds-input-wrapper\">\n          <gcds-label label-for=\"type-password\" label=\"Label\" lang=\"en\"></gcds-label>\n          <input\n            type=\"password\"\n            id=\"type-password\"\n            name=\"type-password\"\n            aria-labelledby=\"label-for-type-password\"\n            aria-invalid=\"false\"\n          />\n        </div>\n      </gcds-input>\n    `);\n  });\n\n  it('renders type search', async () => {\n    const { root } = await newSpecPage({\n      components: [GcdsInput],\n      html: '<gcds-input type=\"search\" label=\"Label\" input-id=\"type-search\" />',\n    });\n    expect(root).toEqualHtml(`\n      <gcds-input type=\"search\" label=\"Label\" input-id=\"type-search\">\n        <div class=\"gcds-input-wrapper\">\n          <gcds-label label-for=\"type-search\" label=\"Label\" lang=\"en\"></gcds-label>\n          <input\n            type=\"search\"\n            id=\"type-search\"\n            name=\"type-search\"\n            aria-labelledby=\"label-for-type-search\"\n            aria-invalid=\"false\"\n          />\n        </div>\n      </gcds-input>\n    `);\n  });\n\n  it('renders type text', async () => {\n    const { root } = await newSpecPage({\n      components: [GcdsInput],\n      html: '<gcds-input type=\"text\" label=\"Label\" input-id=\"type-text\" />',\n    });\n    expect(root).toEqualHtml(`\n      <gcds-input type=\"text\" label=\"Label\" input-id=\"type-text\">\n        <div class=\"gcds-input-wrapper\">\n          <gcds-label label-for=\"type-text\" label=\"Label\" lang=\"en\"></gcds-label>\n          <input\n            type=\"text\"\n            id=\"type-text\"\n            name=\"type-text\"\n            aria-labelledby=\"label-for-type-text\"\n            aria-invalid=\"false\"\n          />\n        </div>\n      </gcds-input>\n    `);\n  });\n\n  it('renders type url', async () => {\n    const { root } = await newSpecPage({\n      components: [GcdsInput],\n      html: '<gcds-input type=\"url\" label=\"Label\" input-id=\"type-url\" />',\n    });\n    expect(root).toEqualHtml(`\n      <gcds-input type=\"url\" label=\"Label\" input-id=\"type-url\">\n        <div class=\"gcds-input-wrapper\">\n          <gcds-label label-for=\"type-url\" label=\"Label\" lang=\"en\"></gcds-label>\n          <input\n            type=\"url\"\n            id=\"type-url\"\n            name=\"type-url\"\n            aria-labelledby=\"label-for-type-url\"\n            aria-invalid=\"false\"\n          />\n        </div>\n      </gcds-input>\n    `);\n  });\n\n  /**\n   * Disabled test\n   */\n  it('renders disabled', async () => {\n    const { root } = await newSpecPage({\n      components: [GcdsInput],\n      html: '<gcds-input label=\"Label\" input-id=\"input-disabled\" disabled />',\n    });\n    expect(root).toEqualHtml(`\n      <gcds-input label=\"Label\" input-id=\"input-disabled\" disabled=\"\">\n        <div class=\"gcds-input-wrapper gcds-disabled\">\n          <gcds-label label-for=\"input-disabled\" label=\"Label\" lang=\"en\"></gcds-label>\n          <input\n            type=\"text\"\n            id=\"input-disabled\"\n            name=\"input-disabled\"\n            aria-labelledby=\"label-for-input-disabled\"\n            aria-invalid=\"false\"\n            disabled=\"\"\n          />\n        </div>\n      </gcds-input>\n    `);\n  });\n\n  /**\n   * Error message test\n   */\n  it('renders error message', async () => {\n    const { root } = await newSpecPage({\n      components: [GcdsInput],\n      html: '<gcds-input label=\"Label\" input-id=\"input-with-error\" error-message=\"This is an error message.\" />',\n    });\n    expect(root).toEqualHtml(`\n      <gcds-input label=\"Label\" input-id=\"input-with-error\" error-message=\"This is an error message.\">\n        <div class=\"gcds-input-wrapper gcds-error\">\n          <gcds-label label-for=\"input-with-error\" label=\"Label\" lang=\"en\"></gcds-label>\n          <gcds-error-message messageId=\"input-with-error\" message=\"This is an error message.\"></gcds-error-message>\n          <input\n            type=\"text\"\n            id=\"input-with-error\"\n            class=\"gcds-error\"\n            name=\"input-with-error\"\n            aria-labelledby=\"label-for-input-with-error\"\n            aria-describedby=\"error-message-input-with-error \"\n            aria-invalid=\"true\"\n          />\n        </div>\n      </gcds-input>\n    `);\n  });\n\n  /**\n   * Hide label\n   */\n  it('renders with label hidden', async () => {\n    const { root } = await newSpecPage({\n      components: [GcdsInput],\n      html: '<gcds-input label=\"Label\" input-id=\"input-label-hidden\" hide-label />',\n    });\n    expect(root).toEqualHtml(`\n      <gcds-input label=\"Label\" input-id=\"input-label-hidden\" hide-label>\n        <div class=\"gcds-input-wrapper\">\n          <gcds-label label-for=\"input-label-hidden\" label=\"Label\" hide-label lang=\"en\"></gcds-label>\n          <input\n            type=\"text\"\n            id=\"input-label-hidden\"\n            name=\"input-label-hidden\"\n            aria-labelledby=\"label-for-input-label-hidden\"\n            aria-invalid=\"false\"\n          />\n        </div>\n      </gcds-input>\n    `);\n  });\n\n  /**\n   * Input hint test\n   */\n  it('renders input hint', async () => {\n    const { root } = await newSpecPage({\n      components: [GcdsInput],\n      html: '<gcds-input label=\"Label\" input-id=\"input-with-hint\" hint=\"This is an input hint.\" />',\n    });\n    expect(root).toEqualHtml(`\n      <gcds-input label=\"Label\" input-id=\"input-with-hint\" hint=\"This is an input hint.\">\n        <div class=\"gcds-input-wrapper\">\n          <gcds-label label-for=\"input-with-hint\" label=\"Label\" lang=\"en\"></gcds-label>\n          <gcds-hint hint-id=\"input-with-hint\" hint=\"This is an input hint.\"></gcds-hint>\n          <input\n            type=\"text\"\n            id=\"input-with-hint\"\n            name=\"input-with-hint\"\n            aria-labelledby=\"label-for-input-with-hint\"\n            aria-describedby=\"hint-input-with-hint \"\n            aria-invalid=\"false\"\n          />\n        </div>\n      </gcds-input>\n    `);\n  });\n\n  /**\n   * Input ID test\n   */\n  it('renders input id', async () => {\n    const { root } = await newSpecPage({\n      components: [GcdsInput],\n      html: '<gcds-input label=\"Label\" input-id=\"input-renders-id\" />',\n    });\n    expect(root).toEqualHtml(`\n      <gcds-input label=\"Label\" input-id=\"input-renders-id\">\n        <div class=\"gcds-input-wrapper\">\n          <gcds-label label-for=\"input-renders-id\" label=\"Label\" lang=\"en\"></gcds-label>\n          <input\n            type=\"text\"\n            id=\"input-renders-id\"\n            name=\"input-renders-id\"\n            aria-labelledby=\"label-for-input-renders-id\"\n            aria-invalid=\"false\"\n          />\n        </div>\n      </gcds-input>\n    `);\n  });\n\n  /**\n   * Input label test\n   */\n  it('renders label', async () => {\n    const { root } = await newSpecPage({\n      components: [GcdsInput],\n      html: '<gcds-input label=\"Label\" input-id=\"input-renders-label\" />',\n    });\n    expect(root).toEqualHtml(`\n      <gcds-input label=\"Label\" input-id=\"input-renders-label\">\n        <div class=\"gcds-input-wrapper\">\n          <gcds-label label-for=\"input-renders-label\" label=\"Label\" lang=\"en\"></gcds-label>\n          <input\n            type=\"text\"\n            id=\"input-renders-label\"\n            name=\"input-renders-label\"\n            aria-labelledby=\"label-for-input-renders-label\"\n            aria-invalid=\"false\"\n          />\n        </div>\n      </gcds-input>\n    `);\n  });\n\n  /**\n   * Required test\n   */\n  it('renders required', async () => {\n    const { root } = await newSpecPage({\n      components: [GcdsInput],\n      html: '<gcds-input label=\"Label\" input-id=\"input-required\" required />',\n    });\n    expect(root).toEqualHtml(`\n      <gcds-input label=\"Label\" input-id=\"input-required\" required>\n        <div class=\"gcds-input-wrapper\">\n          <gcds-label label-for=\"input-required\" label=\"Label\" required lang=\"en\"></gcds-label>\n          <input\n            type=\"text\"\n            id=\"input-required\"\n            name=\"input-required\"\n            aria-labelledby=\"label-for-input-required\"\n            aria-invalid=\"false\"\n            required\n          />\n        </div>\n      </gcds-input>\n    `);\n  });\n\n  /**\n   * Input value test\n   */\n  it('renders input value', async () => {\n    const { root } = await newSpecPage({\n      components: [GcdsInput],\n      html: '<gcds-input label=\"Label\" input-id=\"input-with-value\" value=\"Input value\" />',\n    });\n    expect(root).toEqualHtml(`\n      <gcds-input label=\"Label\" input-id=\"input-with-value\" value=\"Input value\">\n        <div class=\"gcds-input-wrapper\">\n          <gcds-label label-for=\"input-with-value\" label=\"Label\" lang=\"en\"></gcds-label>\n          <input\n            type=\"text\"\n            id=\"input-with-value\"\n            name=\"input-with-value\"\n            value=\"Input value\"\n            aria-labelledby=\"label-for-input-with-value\"\n            aria-invalid=\"false\"\n          />\n        </div>\n      </gcds-input>\n    `);\n  });\n});\n"]}