{"version":3,"file":"utils.js","sourceRoot":"","sources":["../../../src/utils/menus/utils.ts"],"names":[],"mappings":"AAAA;;;;;GAKG;AACH,MAAM,CAAC,KAAK,UAAU,gBAAgB,CAAC,KAAK,EAAE,GAAG,EAAE,KAAK;EACtD,MAAM,GAAG,GAAG,KAAK,CAAC,GAAG,CAAC;EACtB,MAAM,YAAY,GAAG,KAAK,CAAC,OAAO,CAChC,QAAQ,CAAC,aAAa,IAAI,GAAG;IAC3B,CAAC,CAAC,QAAQ,CAAC,aAAa,CAAC,UAAU,CAAC,aAAa;IACjD,CAAC,CAAC,QAAQ,CAAC,aAAa,CAC3B,CAAC;EACF,MAAM,aAAa,GAAG,KAAK,CAAC,YAAY,CAAC,CAAC;EAE1C,QAAQ,GAAG,EAAE;IACX,aAAa;IACb,KAAK,WAAW;MACd,KAAK,CAAC,cAAc,EAAE,CAAC;MACvB,sCAAsC;MACtC,IAAI,YAAY,GAAG,CAAC,GAAG,KAAK,CAAC,MAAM,GAAG,CAAC,EAAE;QACvC,MAAM,YAAY,CAAC,CAAC,EAAE,KAAK,CAAC,CAAC;QAC7B,oBAAoB;OACrB;WAAM;QACL,MAAM,YAAY,CAAC,YAAY,GAAG,CAAC,EAAE,KAAK,CAAC,CAAC;OAC7C;MACD,MAAM;IAER,WAAW;IACX,KAAK,SAAS;MACZ,KAAK,CAAC,cAAc,EAAE,CAAC;MACvB,sCAAsC;MACtC,IAAI,YAAY,GAAG,CAAC,GAAG,CAAC,EAAE;QACxB,MAAM,YAAY,CAAC,KAAK,CAAC,MAAM,GAAG,CAAC,EAAE,KAAK,CAAC,CAAC;QAC5C,wBAAwB;OACzB;WAAM;QACL,MAAM,YAAY,CAAC,YAAY,GAAG,CAAC,EAAE,KAAK,CAAC,CAAC;OAC7C;MACD,MAAM;IAER,cAAc;IACd,KAAK,YAAY;MACf,KAAK,CAAC,cAAc,EAAE,CAAC;MACvB,IACE,aAAa,CAAC,QAAQ,IAAI,gBAAgB;QAC1C,CAAC,aAAa,CAAC,YAAY,CAAC,MAAM,CAAC,EACnC;QACA,MAAM,cAAc,CAAC,aAAa,EAAE,GAAG,CAAC,CAAC;OAC1C;MACD,MAAM;IAER,oBAAoB;IACpB,KAAK,WAAW,CAAC;IACjB,KAAK,QAAQ;MACX,KAAK,CAAC,cAAc,EAAE,CAAC;MACvB,sCAAsC;MACtC,IACE,aAAa,CAAC,QAAQ,IAAI,gBAAgB;QAC1C,aAAa,CAAC,YAAY,CAAC,MAAM,CAAC,EAClC;QACA,MAAM,cAAc,CAAC,aAAa,EAAE,GAAG,CAAC,CAAC;QACzC,0CAA0C;OAC3C;WAAM,IAAI,aAAa,CAAC,UAAU,CAAC,QAAQ,IAAI,gBAAgB,EAAE;QAChE,MAAM,cAAc,CAAC,aAAa,CAAC,UAAU,EAAE,GAAG,CAAC,CAAC;OACrD;WAAM,IACL,aAAa,CAAC,UAAU,IAAI,GAAG;QAC/B,CAAC,MACC,aAAa,CAAC,UACf,CAAC,UAAU,EAAE,CAAC,IAAI,QAAQ,EAC3B;QACA,MAAM,cAAc,CAAC,KAAK,CAAC,KAAK,CAAC,MAAM,GAAG,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC;OACpD;MACD,MAAM;IAER,wBAAwB;IACxB,KAAK,KAAK;MACR,IAAI,GAAG,CAAC,QAAQ,IAAI,eAAe,EAAE;QACnC,sBAAsB;QACtB,IACE,aAAa,CAAC,QAAQ,IAAI,gBAAgB;UAC1C,aAAa,CAAC,YAAY,CAAC,MAAM,CAAC,EAClC;UACA,KAAK,CAAC,cAAc,EAAE,CAAC;UACvB,MAAM,cAAc,CAAC,aAAa,EAAE,GAAG,CAAC,CAAC;UACzC,oBAAoB;SACrB;aAAM,IAAI,aAAa,CAAC,UAAU,CAAC,QAAQ,IAAI,gBAAgB,EAAE;UAChE,KAAK,CAAC,cAAc,EAAE,CAAC;UACvB,MAAM,cAAc,CAAC,aAAa,CAAC,UAAU,EAAE,GAAG,CAAC,CAAC;SACrD;OACF;MACD,MAAM;IAER,oBAAoB;IACpB,KAAK,OAAO,CAAC;IACb,KAAK,GAAG;MACN,IAAI,aAAa,CAAC,QAAQ,IAAI,gBAAgB,EAAE;QAC9C,KAAK,CAAC,cAAc,EAAE,CAAC;QACvB,MAAM,cAAc,CAAC,aAAa,EAAE,GAAG,CAAC,CAAC;OAC1C;MACD,MAAM;GACT;AACH,CAAC;AAED;;;;GAIG;AACH,KAAK,UAAU,YAAY,CAAC,KAAK,EAAE,KAAK;EACtC,IAAI,KAAK,CAAC,KAAK,CAAC,CAAC,QAAQ,IAAI,eAAe,EAAE;IAC3C,KAAK,CAAC,KAAK,CAA4B,CAAC,SAAS,EAAE,CAAC;GACtD;OAAM,IAAI,KAAK,CAAC,KAAK,CAAC,CAAC,QAAQ,IAAI,gBAAgB,EAAE;IACnD,KAAK,CAAC,KAAK,CAA6B,CAAC,YAAY,EAAE,CAAC;GAC1D;AACH,CAAC;AAED;;;;GAIG;AACH,KAAK,UAAU,cAAc,CAAC,KAAK,EAAE,GAAG;EACtC,MAAM,QAAQ,GAAG,KAAgC,CAAC;EAElD,kBAAkB;EAClB,IAAI,QAAQ,CAAC,YAAY,CAAC,MAAM,CAAC,EAAE;IACjC,MAAM,QAAQ,CAAC,SAAS,EAAE,CAAC;IAC3B,QAAQ,CAAC,YAAY,EAAE,CAAC;IAExB,GAAG,CAAC,kBAAkB,CAAC,GAAG,CAAC,CAAC;IAE5B,iBAAiB;GAClB;OAAM;IACL,MAAM,QAAQ,CAAC,SAAS,EAAE,CAAC;IAE3B,UAAU,CAAC,KAAK,IAAI,EAAE;MACpB,MAAM,YAAY,CAChB,CAAC,EACD,QAAQ,CAAC,aAAa,IAAI,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC,CAAC,QAAQ,CAAC,QAAQ,CACjE,CAAC;IACJ,CAAC,EAAE,EAAE,CAAC,CAAC;IAEP,IAAI,GAAG,CAAC,QAAQ,IAAI,eAAe,EAAE;MACnC,GAAG,CAAC,kBAAkB,CAAC,GAAG,CAAC,CAAC;KAC7B;SAAM;MACL,GAAG,CAAC,kBAAkB,CACpB,QAAQ,CAAC,aAAa,IAAI,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,QAAQ,EAC9C,QAAQ,CAAC,aAAa,IAAI,GAAG,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,IAAI,CAC7C,CAAC;KACH;GACF;AACH,CAAC;AAED;;;;GAIG;AACH,MAAM,CAAC,KAAK,UAAU,WAAW,CAAC,EAAE;EAClC,MAAM,YAAY,GAAe,KAAK,CAAC,IAAI,CAAC,EAAE,CAAC,QAAQ,CAAC,CAAC;EAEzD,YAAY,CAAC,OAAO,CAAC,KAAK,EAAC,IAAI,EAAC,EAAE;IAChC,IACE,IAAI,CAAC,QAAQ,IAAI,gBAAgB;MAChC,IAAgC,CAAC,IAAI,EACtC;MACA,MAAM,aAAa,GAAG,MAAM,WAAW,CAAC,IAAI,CAAC,CAAC;MAC9C,YAAY,CAAC,MAAM,CAAC,YAAY,CAAC,OAAO,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,GAAG,aAAa,CAAC,CAAC;KAC1E;EACH,CAAC,CAAC,CAAC;EAEH,OAAO,YAAY,CAAC;AACtB,CAAC","sourcesContent":["/**\n * Handle event for keyboard control of nav\n * @param {Event} event\n * @param {Element} nav\n * @param {any[]} queue\n */\nexport async function handleKeyDownNav(event, nav, queue) {\n  const key = event.key;\n  const currentIndex = queue.indexOf(\n    document.activeElement == nav\n      ? document.activeElement.shadowRoot.activeElement\n      : document.activeElement,\n  );\n  const activeElement = queue[currentIndex];\n\n  switch (key) {\n    // Down arrow\n    case 'ArrowDown':\n      event.preventDefault();\n      // If on last item, jump to first item\n      if (currentIndex + 1 > queue.length - 1) {\n        await focusNavItem(0, queue);\n        // Jump to next item\n      } else {\n        await focusNavItem(currentIndex + 1, queue);\n      }\n      break;\n\n    // Up arrow\n    case 'ArrowUp':\n      event.preventDefault();\n      // If on first item, jump to last item\n      if (currentIndex - 1 < 0) {\n        await focusNavItem(queue.length - 1, queue);\n        // Jump to previous item\n      } else {\n        await focusNavItem(currentIndex - 1, queue);\n      }\n      break;\n\n    // Right arrow\n    case 'ArrowRight':\n      event.preventDefault();\n      if (\n        activeElement.nodeName == 'GCDS-NAV-GROUP' &&\n        !activeElement.hasAttribute('open')\n      ) {\n        await toggleNavGroup(activeElement, nav);\n      }\n      break;\n\n    // Left arrow || ESC\n    case 'ArrowLeft':\n    case 'Escape':\n      event.preventDefault();\n      // Currently focusing a gcds-nav-group\n      if (\n        activeElement.nodeName == 'GCDS-NAV-GROUP' &&\n        activeElement.hasAttribute('open')\n      ) {\n        await toggleNavGroup(activeElement, nav);\n        // Currently focus within a gcds-nav-group\n      } else if (activeElement.parentNode.nodeName == 'GCDS-NAV-GROUP') {\n        await toggleNavGroup(activeElement.parentNode, nav);\n      } else if (\n        activeElement.parentNode == nav &&\n        (await (\n          activeElement.parentNode as HTMLGcdsTopNavElement\n        ).getNavSize()) == 'mobile'\n      ) {\n        await toggleNavGroup(queue[queue.length - 1], nav);\n      }\n      break;\n\n    // Tab - only in top-nav\n    case 'Tab':\n      if (nav.nodeName != 'GCDS-SIDE-NAV') {\n        // On open nav trigger\n        if (\n          activeElement.nodeName == 'GCDS-NAV-GROUP' &&\n          activeElement.hasAttribute('open')\n        ) {\n          event.preventDefault();\n          await toggleNavGroup(activeElement, nav);\n          // In open nav group\n        } else if (activeElement.parentNode.nodeName == 'GCDS-NAV-GROUP') {\n          event.preventDefault();\n          await toggleNavGroup(activeElement.parentNode, nav);\n        }\n      }\n      break;\n\n    // ENTER || SPACEBAR\n    case 'Enter':\n    case ' ':\n      if (activeElement.nodeName == 'GCDS-NAV-GROUP') {\n        event.preventDefault();\n        await toggleNavGroup(activeElement, nav);\n      }\n      break;\n  }\n}\n\n/**\n * Focus nav element\n * @param {Number} index\n * @param {any[]} queue\n */\nasync function focusNavItem(index, queue) {\n  if (queue[index].nodeName == 'GCDS-NAV-LINK') {\n    (queue[index] as HTMLGcdsNavLinkElement).focusLink();\n  } else if (queue[index].nodeName == 'GCDS-NAV-GROUP') {\n    (queue[index] as HTMLGcdsNavGroupElement).focusTrigger();\n  }\n}\n\n/**\n *\n * @param {Element} group\n * @param {Element} nav\n */\nasync function toggleNavGroup(group, nav) {\n  const navGroup = group as HTMLGcdsNavGroupElement;\n\n  // Close nav group\n  if (navGroup.hasAttribute('open')) {\n    await navGroup.toggleNav();\n    navGroup.focusTrigger();\n\n    nav.updateNavItemQueue(nav);\n\n    // Open nav group\n  } else {\n    await navGroup.toggleNav();\n\n    setTimeout(async () => {\n      await focusNavItem(\n        0,\n        document.activeElement == nav ? nav.children : navGroup.children,\n      );\n    }, 10);\n\n    if (nav.nodeName == 'GCDS-SIDE-NAV') {\n      nav.updateNavItemQueue(nav);\n    } else {\n      nav.updateNavItemQueue(\n        document.activeElement == nav ? nav : navGroup,\n        document.activeElement == nav ? false : true,\n      );\n    }\n  }\n}\n\n/**\n * Return array of child elements of passed element\n * @param {Element} el\n * @return {any[]} indexedItems\n */\nexport async function getNavItems(el) {\n  const indexedItems: Array<any> = Array.from(el.children);\n\n  indexedItems.forEach(async item => {\n    if (\n      item.nodeName == 'GCDS-NAV-GROUP' &&\n      (item as HTMLGcdsNavGroupElement).open\n    ) {\n      const groupChildren = await getNavItems(item);\n      indexedItems.splice(indexedItems.indexOf(item) + 1, 0, ...groupChildren);\n    }\n  });\n\n  return indexedItems;\n}\n"]}