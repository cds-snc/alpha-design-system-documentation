{"version":3,"file":"validator.factory.js","sourceRoot":"","sources":["../../src/validators/validator.factory.ts"],"names":[],"mappings":"AAAA,OAAO,EAGL,gBAAgB,EAChB,iBAAiB,GAClB,MAAM,aAAa,CAAC;AACrB,OAAO,EACL,aAAa,EACb,kBAAkB,EAClB,iBAAiB,EACjB,mBAAmB,GACpB,MAAM,qCAAqC,CAAC;AAC7C,OAAO,EAAE,aAAa,EAAE,MAAM,2CAA2C,CAAC;AAC1E,OAAO,EAAE,gBAAgB,EAAE,MAAM,2CAA2C,CAAC;AAE7E,MAAM,CAAN,IAAY,cAOX;AAPD,WAAY,cAAc;EACxB,iDAA+B,CAAA;EAC/B,2DAAyC,CAAA;EACzC,iDAA+B,CAAA;EAC/B,uDAAqC,CAAA;EACrC,yDAAuC,CAAA;EACvC,6DAA2C,CAAA;AAC7C,CAAC,EAPW,cAAc,KAAd,cAAc,QAOzB;AAED,MAAM,UAAU,YAAY,CAC1B,IAAmD;EAEnD,OAAO,CAAC,IAAI,IAAI,EAAE,CAAC;KAChB,GAAG,CAAC,CAAC,CAAC,EAAE;IACP,IAAI,OAAO,CAAC,KAAK,QAAQ,EAAE;MACzB,OAAO,gBAAgB,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC;KAClC;SAAM,IAAI,CAAC,IAAK,CAAS,CAAC,IAAI,EAAE;MAC/B,CAAC,GAAG,CAAmB,CAAC;MACxB,OAAO,gBAAgB,CAAC,CAAC,CAAC,IAAI,EAAE,CAAC,CAAC,OAAO,CAAC,CAAC;KAC5C;SAAM;MACL,OAAO,CAAiB,CAAC;KAC1B;EACH,CAAC,CAAC;KACD,MAAM,CAAC,iBAAiB,EAAE,gBAAgB,CAAC,CAAC;AACjD,CAAC;AAED,MAAM,UAAU,gBAAgB,CAAC,IAAY,EAAE,OAAY;EACzD,OAAO,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE,CAAC;EACvB,QAAQ,IAAI,EAAE;IACZ,KAAK,cAAc,CAAC,aAAa;MAC/B,OAAO,aAAa,CAAC;IACvB,KAAK,cAAc,CAAC,kBAAkB;MACpC,OAAO,kBAAkB,CAAC;IAC5B,KAAK,cAAc,CAAC,mBAAmB;MACrC,OAAO,mBAAmB,CAAC;IAC7B,KAAK,cAAc,CAAC,aAAa;MAC/B,OAAO,aAAa,CAAC;IACvB,KAAK,cAAc,CAAC,gBAAgB;MAClC,OAAO,gBAAgB,CAAC;IAC1B,KAAK,cAAc,CAAC,iBAAiB;MACnC,OAAO,iBAAiB,CAAC;IAC3B;MACE,OAAO,gBAAgB,CAAC;GAC3B;AACH,CAAC","sourcesContent":["import {\n  Validator,\n  ValidatorEntry,\n  defaultValidator,\n  combineValidators,\n} from './validator';\nimport {\n  requiredField,\n  requiredEmailField,\n  requiredFileInput,\n  requiredSelectField,\n} from './input-validators/input-validators';\nimport { requiredCheck } from './checkbox-validators/checkbox-validators';\nimport { requiredFieldset } from './fieldset-validators/fieldset-validators';\n\nexport enum ValidatorsName {\n  requiredField = 'requiredField',\n  requiredEmailField = 'requiredEmailField',\n  requiredCheck = 'requiredCheck',\n  requiredFieldset = 'requiredFieldset',\n  requiredFileInput = 'requiredFileInput',\n  requiredSelectField = 'requiredSelectField',\n}\n\nexport function getValidator<A>(\n  list: Array<string | ValidatorEntry | Validator<A>>,\n): Validator<A> {\n  return (list || [])\n    .map(v => {\n      if (typeof v === 'string') {\n        return validatorFactory(v, null);\n      } else if (v && (v as any).name) {\n        v = v as ValidatorEntry;\n        return validatorFactory(v.name, v.options);\n      } else {\n        return v as Validator<A>;\n      }\n    })\n    .reduce(combineValidators, defaultValidator);\n}\n\nexport function validatorFactory(name: string, options: any): Validator<any> {\n  options ? options : {};\n  switch (name) {\n    case ValidatorsName.requiredField:\n      return requiredField;\n    case ValidatorsName.requiredEmailField:\n      return requiredEmailField;\n    case ValidatorsName.requiredSelectField:\n      return requiredSelectField;\n    case ValidatorsName.requiredCheck:\n      return requiredCheck;\n    case ValidatorsName.requiredFieldset:\n      return requiredFieldset;\n    case ValidatorsName.requiredFileInput:\n      return requiredFileInput;\n    default:\n      return defaultValidator;\n  }\n}\n"]}