{"version":3,"file":"input-validators.spec.js","sourceRoot":"","sources":["../../../../src/validators/input-validators/test/input-validators.spec.tsx"],"names":[],"mappings":"AAAA,OAAO,EAAE,aAAa,EAAE,iBAAiB,EAAE,MAAM,qBAAqB,CAAC;AACvE,OAAO,EAAE,IAAI,EAAE,MAAM,QAAQ,CAAC;AAQ9B,MAAM,sBAAsB,GAAG,CAAC,IAAc,EAAQ,EAAE;EACtD,MAAM,IAAI,GAAG,IAAI,IAAI,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,EAAE,IAAI,EAAE,IAAI,CAAC,QAAQ,EAAE,CAAY,CAAC;EACvE,IAAI,CAAC,kBAAkB,CAAC,GAAG,IAAI,IAAI,EAAE,CAAC;EACtC,IAAI,CAAC,MAAM,CAAC,GAAG,IAAI,CAAC,IAAI,CAAC;EACzB,OAAO,IAAY,CAAC;AACtB,CAAC,CAAC;AAEF,MAAM,kBAAkB,GAAG,CAAC,KAAiB,EAAE,EAAE;EAC/C,MAAM,QAAQ,GAAa;IACzB,MAAM,EAAE,KAAK,CAAC,MAAM;IACpB,IAAI,CAAC,KAAa;MAChB,OAAO,QAAQ,CAAC,KAAK,CAAC,CAAC;IACzB,CAAC;GACF,CAAC;EACF,KAAK,CAAC,OAAO,CACX,CAAC,IAAI,EAAE,KAAK,EAAE,EAAE,CAAC,CAAC,QAAQ,CAAC,KAAK,CAAC,GAAG,sBAAsB,CAAC,IAAI,CAAC,CAAC,CAClE,CAAC;EAEF,OAAO,QAAQ,CAAC;AAClB,CAAC,CAAC;AAEF,QAAQ,CAAC,0BAA0B,EAAE,GAAG,EAAE;EACxC,MAAM,OAAO,GAA2C;IACtD,EAAE,KAAK,EAAE,kBAAkB,EAAE,GAAG,EAAE,IAAI,EAAE;IACxC,EAAE,KAAK,EAAE,EAAE,EAAE,GAAG,EAAE,KAAK,EAAE;IACzB,EAAE,KAAK,EAAE,GAAG,EAAE,GAAG,EAAE,KAAK,EAAE;GAC3B,CAAC;EACF,OAAO,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE,CAClB,EAAE,CAAC,iBAAiB,CAAC,CAAC,GAAG,QAAQ,CAAC,CAAC,KAAK,EAAE,EAAE,GAAG,EAAE;IAC/C,MAAM,CAAC,aAAa,CAAC,QAAQ,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;EACzD,CAAC,CAAC,CACH,CAAC;AACJ,CAAC,CAAC,CAAC;AACH,QAAQ,CAAC,+BAA+B,EAAE,GAAG,EAAE;EAC7C,MAAM,OAAO,GAA6C;IACxD;MACE,KAAK,EAAE,kBAAkB,CAAC;QACxB,EAAE,IAAI,EAAE,MAAM,EAAE,QAAQ,EAAE,YAAY,EAAE,IAAI,EAAE,WAAW,EAAE;QAC3D,EAAE,IAAI,EAAE,MAAM,EAAE,QAAQ,EAAE,YAAY,EAAE,IAAI,EAAE,WAAW,EAAE;OAC5D,CAAC;MACF,GAAG,EAAE,IAAI;KACV;IACD;MACE,KAAK,EAAE,kBAAkB,CAAC;QACxB,EAAE,IAAI,EAAE,MAAM,EAAE,QAAQ,EAAE,YAAY,EAAE,IAAI,EAAE,WAAW,EAAE;OAC5D,CAAC;MACF,GAAG,EAAE,IAAI;KACV;IACD,EAAE,KAAK,EAAE,kBAAkB,CAAC,EAAE,CAAC,EAAE,GAAG,EAAE,KAAK,EAAE;GAC9C,CAAC;EACF,OAAO,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE,CAClB,EAAE,CAAC,iBAAiB,CAAC,CAAC,GAAG,QAAQ,CAAC,CAAC,KAAK,EAAE,EAAE,GAAG,EAAE;IAC/C,MAAM,CAAC,iBAAiB,CAAC,QAAQ,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;EAC7D,CAAC,CAAC,CACH,CAAC;AACJ,CAAC,CAAC,CAAC","sourcesContent":["import { requiredField, requiredFileInput } from '../input-validators';\nimport { Blob } from 'buffer';\n\ninterface MockFile {\n  name: string;\n  body: string;\n  mimeType: string;\n}\n\nconst createFileFromMockFile = (file: MockFile): File => {\n  const blob = new Blob([file.body], { type: file.mimeType }) as unknown;\n  blob['lastModifiedDate'] = new Date();\n  blob['name'] = file.name;\n  return blob as File;\n};\n\nconst createMockFileList = (files: MockFile[]) => {\n  const fileList: FileList = {\n    length: files.length,\n    item(index: number): File {\n      return fileList[index];\n    },\n  };\n  files.forEach(\n    (file, index) => (fileList[index] = createFileFromMockFile(file)),\n  );\n\n  return fileList;\n};\n\ndescribe('Required input validator', () => {\n  const results: Array<{ value: string; res: boolean }> = [\n    { value: 'Text field value', res: true },\n    { value: '', res: false },\n    { value: ' ', res: false },\n  ];\n  results.forEach(i =>\n    it(`Should return ${i.res} for ${i.value}`, () => {\n      expect(requiredField.validate(i.value)).toEqual(i.res);\n    }),\n  );\n});\ndescribe('Required file input validator', () => {\n  const results: Array<{ value: FileList; res: boolean }> = [\n    {\n      value: createMockFileList([\n        { body: 'test', mimeType: 'text/plain', name: 'test1.txt' },\n        { body: 'test', mimeType: 'text/plain', name: 'test2.txt' },\n      ]),\n      res: true,\n    },\n    {\n      value: createMockFileList([\n        { body: 'test', mimeType: 'text/plain', name: 'test1.txt' },\n      ]),\n      res: true,\n    },\n    { value: createMockFileList([]), res: false },\n  ];\n  results.forEach(i =>\n    it(`Should return ${i.res} for ${i.value}`, () => {\n      expect(requiredFileInput.validate(i.value)).toEqual(i.res);\n    }),\n  );\n});\n"]}