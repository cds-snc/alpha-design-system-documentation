{"version":3,"file":"input-validators.spec.js","sourceRoot":"","sources":["../../../../src/validators/input-validators/test/input-validators.spec.tsx"],"names":[],"mappings":"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","sourcesContent":["import {\n  requiredField,\n  requiredFileInput,\n  requiredDateInput,\n} from '../input-validators';\nimport { Blob } from 'buffer';\nimport { dateInputErrorMessage } from '../input-validators';\n\ninterface MockFile {\n  name: string;\n  body: string;\n  mimeType: string;\n}\n\nconst createFileFromMockFile = (file: MockFile): File => {\n  const blob = new Blob([file.body], { type: file.mimeType }) as unknown;\n  blob['lastModifiedDate'] = new Date();\n  blob['name'] = file.name;\n  return blob as File;\n};\n\nconst createMockFileList = (files: MockFile[]) => {\n  const fileList: FileList = {\n    length: files.length,\n    item(index: number): File {\n      return fileList[index];\n    },\n    [Symbol.iterator]: function (): IterableIterator<File> {\n      throw new Error('Function not implemented.');\n    },\n  };\n  files.forEach(\n    (file, index) => (fileList[index] = createFileFromMockFile(file)),\n  );\n\n  return fileList;\n};\n\ndescribe('Required input validator', () => {\n  const results: Array<{ value: string; res: boolean }> = [\n    { value: 'Text field value', res: true },\n    { value: '', res: false },\n    { value: ' ', res: false },\n  ];\n  results.forEach(i =>\n    it(`Should return ${i.res} for ${i.value}`, () => {\n      expect(requiredField.validate(i.value)).toEqual(i.res);\n    }),\n  );\n});\ndescribe('Required file input validator', () => {\n  const results: Array<{ value: FileList; res: boolean }> = [\n    {\n      value: createMockFileList([\n        { body: 'test', mimeType: 'text/plain', name: 'test1.txt' },\n        { body: 'test', mimeType: 'text/plain', name: 'test2.txt' },\n      ]),\n      res: true,\n    },\n    {\n      value: createMockFileList([\n        { body: 'test', mimeType: 'text/plain', name: 'test1.txt' },\n      ]),\n      res: true,\n    },\n    { value: createMockFileList([]), res: false },\n  ];\n  results.forEach(i =>\n    it(`Should return ${i.res} for ${i.value}`, () => {\n      expect(requiredFileInput.validate(i.value)).toEqual(i.res);\n    }),\n  );\n});\n\ndescribe('Required date input validator', () => {\n  const results: Array<{ value: string; res: object }> = [\n    { value: '1991-03-04', res: { valid: true } },\n    { value: '1992-02-29', res: { valid: true } },\n    { value: '1991-03', res: { valid: true } },\n    {\n      value: '--',\n      res: {\n        valid: false,\n        errors: { day: true, month: true, year: true },\n        reason: { en: dateInputErrorMessage.en.all, fr: dateInputErrorMessage.fr.all },\n      },\n    },\n    {\n      value: '-',\n      res: {\n        valid: false,\n        errors: { day: true, month: true, year: true },\n        reason: { en: dateInputErrorMessage.en.all, fr: dateInputErrorMessage.fr.all },\n      },\n    },\n    {\n      value: '1991-03-',\n      res: {\n        valid: false,\n        errors: { day: true, month: false, year: false },\n        reason: {\n          en: dateInputErrorMessage.en.missingday,\n          fr: dateInputErrorMessage.fr.missingday,\n        },\n      },\n    },\n    {\n      value: '1991--04',\n      res: {\n        valid: false,\n        errors: { day: false, month: true, year: false },\n        reason: {\n          en: dateInputErrorMessage.en.missingmonth,\n          fr: dateInputErrorMessage.fr.missingmonth,\n        },\n      },\n    },\n    {\n      value: '1991-',\n      res: {\n        valid: false,\n        errors: { day: false, month: true, year: false },\n        reason: {\n          en: dateInputErrorMessage.en.missingmonth,\n          fr: dateInputErrorMessage.fr.missingmonth,\n        },\n      },\n    },\n    {\n      value: '-03-04',\n      res: {\n        valid: false,\n        errors: { day: false, month: false, year: true },\n        reason: {\n          en: dateInputErrorMessage.en.missingyear,\n          fr: dateInputErrorMessage.fr.missingyear,\n        },\n      },\n    },\n    {\n      value: '-03',\n      res: {\n        valid: false,\n        errors: { day: false, month: false, year: true },\n        reason: {\n          en: dateInputErrorMessage.en.missingyear,\n          fr: dateInputErrorMessage.fr.missingyear,\n        },\n      },\n    },\n    {\n      value: '1991--',\n      res: {\n        valid: false,\n        errors: { day: true, month: true, year: false },\n        reason: {\n          en: dateInputErrorMessage.en.missingmonthday,\n          fr: dateInputErrorMessage.fr.missingmonthday,\n        },\n      },\n    },\n    {\n      value: '-03-',\n      res: {\n        valid: false,\n        errors: { day: true, month: false, year: true },\n        reason: {\n          en: dateInputErrorMessage.en.missingdayyear,\n          fr: dateInputErrorMessage.fr.missingdayyear,\n        },\n      },\n    },\n    {\n      value: '--04',\n      res: {\n        valid: false,\n        errors: { day: false, month: true, year: true },\n        reason: {\n          en: dateInputErrorMessage.en.missingmonthyear,\n          fr: dateInputErrorMessage.fr.missingmonthyear,\n        },\n      },\n    },\n    {\n      value: '19991-03-04',\n      res: {\n        valid: false,\n        errors: { day: false, month: false, year: true },\n        reason: {\n          en: dateInputErrorMessage.en.invalidyearlength,\n          fr: dateInputErrorMessage.fr.invalidyearlength,\n        },\n      },\n    },\n    {\n      value: '-991-03-04',\n      res: {\n        valid: false,\n        errors: { day: false, month: false, year: true },\n        reason: {\n          en: dateInputErrorMessage.en.missingyear,\n          fr: dateInputErrorMessage.fr.missingyear,\n        },\n      },\n    },\n    {\n      value: '1991-35-04',\n      res: {\n        valid: false,\n        errors: { day: true, month: false, year: false },\n        reason: {\n          en: dateInputErrorMessage.en.invalidday,\n          fr: dateInputErrorMessage.fr.invalidday,\n        },\n      },\n    },\n    {\n      value: '1991-03-34',\n      res: {\n        valid: false,\n        errors: { day: true, month: false, year: false },\n        reason: {\n          en: dateInputErrorMessage.en.invalidday,\n          fr: dateInputErrorMessage.fr.invalidday,\n        },\n      },\n    },\n  ];\n  results.forEach(i =>\n    it(`Should return ${i.res['valid']} for ${i.value}`, () => {\n      expect(requiredDateInput.validate(i.value)).toEqual(i.res);\n    }),\n  );\n});\n"]}