{"version":3,"file":"fieldset-validators.js","sourceRoot":"","sources":["../../../src/validators/fieldset-validators/fieldset-validators.ts"],"names":[],"mappings":"AAEA,MAAM,CAAC,MAAM,gBAAgB,GAAsB;EACjD,QAAQ,EAAE,CAAC,EAAU,EAAE,EAAE;IACvB,MAAM,EAAE,GAAG,QAAQ,CAAC,aAAa,CAAC,IAAI,EAAE,EAAE,CAAC,CAAC;IAC5C,MAAM,UAAU,GAAG,EAAE,CAAC,QAAQ,CAAC;IAE/B,MAAM,OAAO,GAAG,wBAAwB,CAAC,EAAE,EAAE,UAAU,CAAC,CAAC;IAEzD,OAAO,CAAC,OAAO,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;EAClC,CAAC;EACD,YAAY,EAAE;IACZ,EAAE,EAAE,+BAA+B;IACnC,EAAE,EAAE,uCAAuC;GAC5C;CACF,CAAC;AAEF,MAAM,UAAU,wBAAwB,CAAC,OAAO,EAAE,QAAQ;EACxD,IAAI,OAAO,GAAG,EAAE,CAAC;EAEjB,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,QAAQ,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;IACxC,QAAQ,QAAQ,CAAC,CAAC,CAAC,CAAC,QAAQ,EAAE;MAC5B,KAAK,eAAe,CAAC,CAAC;QACpB,MAAM,qBAAqB,GAAG,wBAAwB,CACpD,QAAQ,CAAC,CAAC,CAAC,EACX,QAAQ,CAAC,CAAC,CAAC,CAAC,QAAQ,CACrB,CAAC;QACF,OAAO,GAAG,OAAO,CAAC,MAAM,CAAC,qBAAqB,CAAC,CAAC;QAChD,MAAM;OACP;MAED,KAAK,eAAe,CAAC;MACrB,KAAK,YAAY,CAAC,CAAC;QACjB,yCAAyC;QACzC,MAAM,SAAS,GAAG,QAAQ,CAAC,CAAC,CAAC,CAAC,YAAY,CAAC,MAAM,CAAC,CAAC;QACnD,mCAAmC;QACnC,MAAM,cAAc,GAAG,OAAO,CAAC,gBAAgB,CAAC,SAAS,SAAS,GAAG,CAAC,CAAC;QACvE,IAAI,eAAe,GAAG,KAAK,CAAC;QAE5B,uDAAuD;QACvD,IAAI,cAAc,CAAC,MAAM,GAAG,CAAC,EAAE;UAC7B,oBAAoB;UACpB,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,cAAc,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;YAC9C,IAAI,cAAc,CAAC,CAAC,CAAC,CAAC,YAAY,CAAC,SAAS,CAAC,EAAE;cAC7C,eAAe,GAAG,IAAI,CAAC;aACxB;WACF;UACD,OAAO,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC;SAC/B;aAAM;UACL,2BAA2B;UAC3B,OAAO,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,YAAY,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC;SAClE;QACD,MAAM;OACP;MAED,KAAK,YAAY,CAAC;MAClB,KAAK,eAAe,CAAC;MACrB,KAAK,aAAa,CAAC;MACnB,KAAK,oBAAoB;QACvB,qBAAqB;QACrB,MAAM;KACT;GACF;EAED,OAAO,OAAO,CAAC;AACjB,CAAC","sourcesContent":["import { Validator } from '../validator';\n\nexport const requiredFieldset: Validator<string> = {\n  validate: (id: string) => {\n    const el = document.querySelector(`#${id}`);\n    const elChildren = el.children;\n\n    const isValid = validateFieldsetElements(el, elChildren);\n\n    return !isValid.includes(false);\n  },\n  errorMessage: {\n    en: 'Choose an option to continue.',\n    fr: 'Choisissez une option pour continuer.',\n  },\n};\n\nexport function validateFieldsetElements(element, nodeList) {\n  let isValid = [];\n\n  for (let i = 0; i < nodeList.length; i++) {\n    switch (nodeList[i].nodeName) {\n      case 'GCDS-FIELDSET': {\n        const validFieldsetChildren = validateFieldsetElements(\n          nodeList[i],\n          nodeList[i].children,\n        );\n        isValid = isValid.concat(validFieldsetChildren);\n        break;\n      }\n\n      case 'GCDS-CHECKBOX':\n      case 'GCDS-RADIO': {\n        // Radio/checkbox can share name property\n        const inputName = nodeList[i].getAttribute('name');\n        // Find all inputs with shared name\n        const sameNameInputs = element.querySelectorAll(`[name=${inputName}]`);\n        let childGroupValid = false;\n\n        // Check if there is more than one input with this name\n        if (sameNameInputs.length > 1) {\n          // Validate as group\n          for (let c = 0; c < sameNameInputs.length; c++) {\n            if (sameNameInputs[c].hasAttribute('checked')) {\n              childGroupValid = true;\n            }\n          }\n          isValid.push(childGroupValid);\n        } else {\n          // Validate as single input\n          isValid.push(nodeList[i].hasAttribute('checked') ? true : false);\n        }\n        break;\n      }\n\n      case 'GCDS-INPUT':\n      case 'GCDS-TEXTAREA':\n      case 'GCDS-SELECT':\n      case 'GCDS-FILE-UPLOADER':\n        // Do nothing for now\n        break;\n    }\n  }\n\n  return isValid;\n}\n"]}