{"file":"validator.factory.js","mappings":"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","names":[],"sources":["src/validators/validator.ts","src/validators/input-validators/input-validators.ts","src/validators/checkbox-validators/checkbox-validators.ts","src/validators/fieldset-validators/fieldset-validators.ts","src/validators/validator.factory.ts"],"sourcesContent":["export interface Validator<A> {\n  validate: (x: A) => boolean;\n  errorMessage?: object;\n}\n\nexport interface ValidatorEntry {\n  name: string;\n  options?: any;\n}\n\nexport interface GcdsErrorInterface {\n  id: string;\n  message: string;\n}\n\nexport const defaultValidator: Validator<any> = {\n  validate: (_x: any) => true,\n};\n\nexport function combineValidators<A>(\n  v1: Validator<A>,\n  v2: Validator<A>,\n): Validator<A> {\n  let combined: Validator<A>;\n\n  combined = {\n    validate: (x: A) => {\n      const res1: boolean = v1.validate(x);\n      const res2: boolean = v2.validate(x);\n\n      if (!res1) {\n        combined.errorMessage = v1.errorMessage;\n      } else if (!res2) {\n        combined.errorMessage = v2.errorMessage;\n      }\n\n      return res1 && res2;\n    },\n  };\n  return combined;\n}\n\nexport function requiredValidator(element, type, subtype?) {\n  if (element.required) {\n    switch (type) {\n      // Components all validate the \"value\" property\n      case 'input':\n        switch (subtype) {\n          case 'email':\n            if (element.validator) {\n              element.validator.unshift('requiredEmailField');\n            } else {\n              element.validator = ['requiredEmailField'];\n            }\n            break;\n          default:\n            if (element.validator) {\n              element.validator.unshift('requiredField');\n            } else {\n              element.validator = ['requiredField'];\n            }\n            break;\n        }\n        break;\n      case 'select':\n        if (element.validator) {\n          element.validator.unshift('requiredSelectField');\n        } else {\n          element.validator = ['requiredSelectField'];\n        }\n        break;\n      case 'textarea':\n        if (element.validator) {\n          element.validator.unshift('requiredField');\n        } else {\n          element.validator = ['requiredField'];\n        }\n        break;\n      case 'file':\n        if (element.validator) {\n          element.validator.unshift('requiredFileInput');\n        } else {\n          element.validator = ['requiredFileInput'];\n        }\n        break;\n      case 'checkbox':\n        if (element.validator) {\n          element.validator.unshift('requiredCheck');\n        } else {\n          element.validator = ['requiredCheck'];\n        }\n        break;\n      case 'fieldset':\n        if (element.validator) {\n          element.validator.unshift('requiredFieldset');\n        } else {\n          element.validator = ['requiredFieldset'];\n        }\n        break;\n    }\n  }\n}\n\n/*\nExample of parameter validator\n\nexport function getLengthValidator(min: number, max: number): Validator<string> {\n    // Create errorMessage object\n    let errorMessage = {};\n    if (min && max) {\n        errorMessage[\"en\"] = `You must enter between ${min} and ${max} characters`;\n        errorMessage[\"fr\"] = `French You must enter between ${min} and ${max} characters`;\n    } else if (min) {\n        errorMessage[\"en\"] = `You must enter at least ${min} characters`;\n        errorMessage[\"fr\"] = `French You must enter at least ${min} characters`;\n    } else if (max) {\n        errorMessage[\"en\"] = `You must enter less than ${max} characters`;\n        errorMessage[\"fr\"] = `French You must enter less than ${max} characters`;\n    }\n    return {\n        validate: (value: string) => {\n            value = value || '';\n            if (min && max) {\n                return min <= value.length && value.length <= max;\n            }\n            if (min) {\n                return min <= value.length;\n            }\n            if (max) {\n                return value.length <= max;\n            }\n            return true;\n        },\n        errorMessage\n    };\n}\n*/\n","import { Validator } from '../validator';\n\nconst emailPattern =\n  /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n\nexport const requiredField: Validator<string> = {\n  validate: (value: string) => value != null && value.trim() != '',\n  errorMessage: {\n    en: 'Enter information to continue.',\n    fr: 'Saisissez des renseignements pour continuer.',\n  },\n};\n\nexport const requiredEmailField: Validator<string> = {\n  validate: (value: string) =>\n    value != null &&\n    value.trim() != '' &&\n    (value.toLowerCase().match(emailPattern) ? true : false),\n  errorMessage: {\n    en: 'Enter a valid email address to continue. Use a standard format. Example: name@address.ca.',\n    fr: 'Saisissez votre adresse courriel pour continuer. Utilisez un format standard. Exemple: nom@adresse.ca.',\n  },\n};\n\nexport const requiredFileInput: Validator<FileList> = {\n  validate: (value: FileList) => value.length > 0,\n  errorMessage: {\n    en: 'You must upload a file to continue.',\n    fr: 'Vous devez téléverser un fichier pour continuer.',\n  },\n};\n\nexport const requiredSelectField: Validator<string> = {\n  validate: (value: string) => value != null && value.trim() != '',\n  errorMessage: {\n    en: 'Choose an option to continue.',\n    fr: 'Choisissez une option pour continuer.',\n  },\n};\n","import { Validator } from '../validator';\n\nexport const requiredCheck: Validator<boolean> = {\n  validate: (value: boolean) => value,\n  errorMessage: {\n    en: 'You must check the box to continue.',\n    fr: 'Vous devez cocher la case pour continuer.',\n  },\n};\n","import { Validator } from '../validator';\n\nexport const requiredFieldset: Validator<string> = {\n  validate: (id: string) => {\n    const el = document.querySelector(`#${id}`);\n    const elChildren = el.children;\n\n    const isValid = validateFieldsetElements(el, elChildren);\n\n    return !isValid.includes(false);\n  },\n  errorMessage: {\n    en: 'Choose an option to continue.',\n    fr: 'Choisissez une option pour continuer.',\n  },\n};\n\nexport function validateFieldsetElements(element, nodeList) {\n  let isValid = [];\n\n  for (let i = 0; i < nodeList.length; i++) {\n    switch (nodeList[i].nodeName) {\n      case 'GCDS-FIELDSET': {\n        const validFieldsetChildren = validateFieldsetElements(\n          nodeList[i],\n          nodeList[i].children,\n        );\n        isValid = isValid.concat(validFieldsetChildren);\n        break;\n      }\n\n      case 'GCDS-CHECKBOX':\n      case 'GCDS-RADIO': {\n        // Radio/checkbox can share name property\n        const inputName = nodeList[i].getAttribute('name');\n        // Find all inputs with shared name\n        const sameNameInputs = element.querySelectorAll(`[name=${inputName}]`);\n        let childGroupValid = false;\n\n        // Check if there is more than one input with this name\n        if (sameNameInputs.length > 1) {\n          // Validate as group\n          for (let c = 0; c < sameNameInputs.length; c++) {\n            if (sameNameInputs[c].hasAttribute('checked')) {\n              childGroupValid = true;\n            }\n          }\n          isValid.push(childGroupValid);\n        } else {\n          // Validate as single input\n          isValid.push(nodeList[i].hasAttribute('checked') ? true : false);\n        }\n        break;\n      }\n\n      case 'GCDS-INPUT':\n      case 'GCDS-TEXTAREA':\n      case 'GCDS-SELECT':\n      case 'GCDS-FILE-UPLOADER':\n        // Do nothing for now\n        break;\n    }\n  }\n\n  return isValid;\n}\n","import {\n  Validator,\n  ValidatorEntry,\n  defaultValidator,\n  combineValidators,\n} from './validator';\nimport {\n  requiredField,\n  requiredEmailField,\n  requiredFileInput,\n  requiredSelectField,\n} from './input-validators/input-validators';\nimport { requiredCheck } from './checkbox-validators/checkbox-validators';\nimport { requiredFieldset } from './fieldset-validators/fieldset-validators';\n\nexport enum ValidatorsName {\n  requiredField = 'requiredField',\n  requiredEmailField = 'requiredEmailField',\n  requiredCheck = 'requiredCheck',\n  requiredFieldset = 'requiredFieldset',\n  requiredFileInput = 'requiredFileInput',\n  requiredSelectField = 'requiredSelectField',\n}\n\nexport function getValidator<A>(\n  list: Array<string | ValidatorEntry | Validator<A>>,\n): Validator<A> {\n  return (list || [])\n    .map(v => {\n      if (typeof v === 'string') {\n        return validatorFactory(v, null);\n      } else if (v && (v as any).name) {\n        v = v as ValidatorEntry;\n        return validatorFactory(v.name, v.options);\n      } else {\n        return v as Validator<A>;\n      }\n    })\n    .reduce(combineValidators, defaultValidator);\n}\n\nexport function validatorFactory(name: string, options: any): Validator<any> {\n  options ? options : {};\n  switch (name) {\n    case ValidatorsName.requiredField:\n      return requiredField;\n    case ValidatorsName.requiredEmailField:\n      return requiredEmailField;\n    case ValidatorsName.requiredSelectField:\n      return requiredSelectField;\n    case ValidatorsName.requiredCheck:\n      return requiredCheck;\n    case ValidatorsName.requiredFieldset:\n      return requiredFieldset;\n    case ValidatorsName.requiredFileInput:\n      return requiredFileInput;\n    default:\n      return defaultValidator;\n  }\n}\n"],"version":3}