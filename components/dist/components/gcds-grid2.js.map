{"file":"gcds-grid2.js","mappings":";;;AAAA,MAAM,WAAW,GAAG,0+FAA0+F,CAAC;AAC//F,uBAAe,WAAW;;MCeb,QAAQ;;;;;;;;;wBAuBU,KAAK;uBAKS,MAAM;8BAMd,KAAK;mBAKjB,KAAK;;;;;;;;IAkC5B,MAAM;QACJ,MAAM,EACJ,YAAY,EACZ,UAAU,EACV,OAAO,EACP,cAAc,EACd,aAAa,EACb,SAAS,EACT,QAAQ,EACR,OAAO,EACP,cAAc,EACd,cAAc,EACd,YAAY,EACZ,YAAY,EACZ,UAAU,EACV,GAAG,GACJ,GAAG,IAAI,CAAC;QAET,MAAM,GAAG,GAAG,GAAG,CAAC;QAChB,MAAM,UAAU,GAAG;;QAEf,YAAY,GAAG,iBAAiB,YAAY,EAAE,GAAG,EAAE;QACnD,UAAU,GAAG,eAAe,UAAU,EAAE,GAAG,EAAE;QAE7C,CAAC,OAAO,IAAI,aAAa,IAAI,cAAc,MAAM,SAAS;cACtD,wBAAwB;cACxB,WAAW,OAAO,EACxB;QACE,cAAc,GAAG,kBAAkB,GAAG,EAAE;QACxC,cAAc,GAAG,mBAAmB,cAAc,EAAE,GAAG,EAAE;QACzD,YAAY,GAAG,iBAAiB,YAAY,EAAE,GAAG,EAAE;QACnD,YAAY,GAAG,iBAAiB,YAAY,EAAE,GAAG,EAAE;QACnD,UAAU,GAAG,eAAe,UAAU,EAAE,GAAG,EAAE;KAChD,CAAC;;QAGF,SAAS,aAAa;YACpB,MAAM,iBAAiB,GAAG,EAAE,CAAC;YAE7B,IAAI,OAAO,EAAE;gBACX,iBAAiB,CAAC,qBAAqB,CAAC,GAAG,OAAO,CAAC;aACpD;YAED,IAAI,aAAa,EAAE;gBACjB,iBAAiB,CAAC,4BAA4B,CAAC,GAAG,aAAa,CAAC;aACjE;YAED,IAAI,cAAc,EAAE;gBAClB,iBAAiB,CAAC,6BAA6B,CAAC,GAAG,cAAc,CAAC;aACnE;YAED,OAAO,iBAAiB,CAAC;SAC1B;QAED,QACE,EAAC,IAAI,QACF,SAAS,IACR,sBAAgB,IAAI,EAAE,SAAS,EAAE,QAAQ,EAAE,QAAQ,IACjD,EAAC,GAAG,IAAC,KAAK,EAAE,UAAU,EAAE,KAAK,EAAE,aAAa,EAAE,IAC5C,eAAQ,CACJ,CACS,KAEjB,EAAC,GAAG,IAAC,KAAK,EAAE,UAAU,EAAE,KAAK,EAAE,aAAa,EAAE,IAC5C,eAAQ,CACJ,CACP,CACI,EACP;KACH;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","names":[],"sources":["src/components/gcds-grid/gcds-grid.css?tag=gcds-grid&encapsulation=shadow","src/components/gcds-grid/gcds-grid.tsx"],"sourcesContent":[":host .gcds-grid {\n  margin: 0;\n  padding: 0;\n  grid-template-columns: var(--gcds-grid-columns, 1fr);\n  gap: var(--gcds-grid-gap);\n  box-sizing: border-box;\n\n  /* Display */\n  &.display-grid-with-cols {\n    display: grid;\n    grid-template-columns: 1fr;\n  }\n\n  &.display-grid {\n    display: grid;\n  }\n\n  &.display-inline-grid {\n    display: inline-grid;\n  }\n\n  /* Align content */\n  &.align-content-center {\n    align-content: center;\n  }\n\n  &.align-content-end {\n    align-content: end;\n  }\n\n  &.align-content-space-around {\n    align-content: space-around;\n  }\n\n  &.align-content-space-between {\n    align-content: space-between;\n  }\n\n  &.align-content-space-evenly {\n    align-content: space-evenly;\n  }\n\n  &.align-content-start {\n    align-content: start;\n  }\n\n  &.align-content-stretch {\n    align-content: stretch;\n  }\n\n  /* Justify content */\n  &.justify-content-center {\n    justify-content: center;\n  }\n\n  &.justify-content-end {\n    justify-content: end;\n  }\n\n  &.justify-content-space-around {\n    justify-content: space-around;\n  }\n\n  &.justify-content-space-between {\n    justify-content: space-between;\n  }\n\n  &.justify-content-space-evenly {\n    justify-content: space-evenly;\n  }\n\n  &.justify-content-start {\n    justify-content: start;\n  }\n\n  &.justify-content-stretch {\n    justify-content: stretch;\n  }\n\n  /* Place content */\n  &.place-content-center {\n    place-content: center;\n  }\n\n  &.place-content-end {\n    place-content: end;\n  }\n\n  &.place-content-space-around {\n    place-content: space-around;\n  }\n\n  &.place-content-space-between {\n    place-content: space-between;\n  }\n\n  &.place-content-space-evenly {\n    place-content: space-evenly;\n  }\n\n  &.place-content-start {\n    place-content: start;\n  }\n\n  &.place-content-stretch {\n    place-content: stretch;\n  }\n\n  /* Align items */\n  &.align-items-baseline {\n    align-items: baseline;\n  }\n\n  &.align-items-center {\n    align-items: center;\n  }\n\n  &.align-items-end {\n    align-items: end;\n  }\n\n  &.align-items-start {\n    align-items: start;\n  }\n\n  &.align-items-stretch {\n    align-items: stretch;\n  }\n\n  /* Justify items */\n  &.justify-items-center {\n    justify-items: center;\n  }\n\n  &.justify-items-end {\n    justify-items: end;\n  }\n\n  &.justify-items-start {\n    justify-items: start;\n  }\n\n  &.justify-items-stretch {\n    justify-items: stretch;\n  }\n\n  /* Place items */\n  &.place-items-center {\n    place-items: center;\n  }\n\n  &.place-items-end {\n    place-items: end;\n  }\n\n  &.place-items-start {\n    place-items: start;\n  }\n\n  &.place-items-stretch {\n    place-items: stretch;\n  }\n\n  /* Equal row height */\n  &.equal-row-height {\n    grid-auto-rows: 1fr;\n    align-items: stretch;\n  }\n}\n\n@media screen and (min-width: 48em) {\n  :host .gcds-grid {\n    grid-template-columns: var(\n      --gcds-grid-columns-tablet,\n      var(--gcds-grid-columns, 1fr)\n    );\n\n    /* Grid with cols */\n    &.display-grid-with-cols {\n      grid-template-columns: repeat(\n        var(--gcds-grid-columns-default-tablet),\n        minmax(0, 1fr)\n      );\n    }\n  }\n}\n\n@media screen and (min-width: 64em) {\n  :host .gcds-grid {\n    grid-template-columns: var(\n      --gcds-grid-columns-desktop,\n      var(--gcds-grid-columns-tablet, var(--gcds-grid-columns, 1fr))\n    );\n\n    /* Grid with cols */\n    &.display-grid-with-cols {\n      grid-template-columns: repeat(\n        var(--gcds-grid-columns-default-desktop),\n        minmax(0, 1fr)\n      );\n    }\n  }\n}\n","import { Component, Element, Host, Prop, h } from '@stencil/core';\n\nexport type ContentValues =\n  | 'center'\n  | 'end'\n  | 'space-around'\n  | 'space-between'\n  | 'space-evenly'\n  | 'start'\n  | 'stretch';\n\n@Component({\n  tag: 'gcds-grid',\n  styleUrl: 'gcds-grid.css',\n  shadow: true,\n})\nexport class GcdsGrid {\n  @Element() el: HTMLElement;\n\n  /**\n   * Props\n   */\n\n  /**\n   * Defines the columns of the grid\n   * Option to set different layouts for desktop | tablet | default (includes mobile)\n   */\n  @Prop() columns?: string;\n  @Prop() columnsTablet?: string;\n  @Prop() columnsDesktop?: string;\n\n  /**\n   * Defines grid container size\n   */\n  @Prop() container?: 'full' | 'xl' | 'lg' | 'md' | 'sm' | 'xs';\n\n  /**\n   * Defines if grid container is centered or not\n   */\n  @Prop() centered?: boolean = false;\n\n  /**\n   * Defines element as grid or inline-grid container\n   */\n  @Prop() display?: 'grid' | 'inline-grid' = 'grid';\n\n  /**\n   * Sets all grid items to have an equal height,\n   * based on the tallest item.\n   */\n  @Prop() equalRowHeight?: boolean = false;\n\n  /**\n   * Set tag for grid container\n   */\n  @Prop() tag?: string = 'div';\n\n  /**\n   * If total grid size is less than the size of its grid container,\n   * this property aligns the grid along the block (column) axis\n   */\n  @Prop() alignContent?: ContentValues;\n\n  /**\n   * If total grid size is less than the size of its grid container,\n   * this property aligns the grid along the inline (row) axis\n   */\n  @Prop() justifyContent?: ContentValues;\n\n  /**\n   * Sets both the align-content + justify-content properties\n   */\n  @Prop() placeContent?: ContentValues;\n\n  /**\n   * Aligns grid items along the block (column) axis\n   */\n  @Prop() alignItems?: 'baseline' | 'center' | 'end' | 'start' | 'stretch';\n\n  /**\n   * Aligns grid items along the inline (row) axis\n   */\n  @Prop() justifyItems?: 'center' | 'end' | 'start' | 'stretch';\n\n  /**\n   * Sets both the align-items + justify-items properties\n   */\n  @Prop() placeItems?: 'center' | 'end' | 'start' | 'stretch';\n\n  render() {\n    const {\n      alignContent,\n      alignItems,\n      columns,\n      columnsDesktop,\n      columnsTablet,\n      container,\n      centered,\n      display,\n      equalRowHeight,\n      justifyContent,\n      justifyItems,\n      placeContent,\n      placeItems,\n      tag,\n    } = this;\n\n    const Tag = tag;\n    const classNames = `\n      gcds-grid\n      ${alignContent ? `align-content-${alignContent}` : ''}\n      ${alignItems ? `align-items-${alignItems}` : ''}\n      ${\n        (columns || columnsTablet || columnsDesktop) === undefined\n          ? `display-grid-with-cols`\n          : `display-${display}`\n      }\n      ${equalRowHeight ? 'equal-row-height' : ''}\n      ${justifyContent ? `justify-content-${justifyContent}` : ''}\n      ${justifyItems ? `justify-items-${justifyItems}` : ''}\n      ${placeContent ? `place-content-${placeContent}` : ''}\n      ${placeItems ? `place-items-${placeItems}` : ''}\n    `;\n\n    // Set CSS variables in style attribute based on passed column properties\n    function handleColumns() {\n      const responsiveColumns = {};\n\n      if (columns) {\n        responsiveColumns['--gcds-grid-columns'] = columns;\n      }\n\n      if (columnsTablet) {\n        responsiveColumns['--gcds-grid-columns-tablet'] = columnsTablet;\n      }\n\n      if (columnsDesktop) {\n        responsiveColumns['--gcds-grid-columns-desktop'] = columnsDesktop;\n      }\n\n      return responsiveColumns;\n    }\n\n    return (\n      <Host>\n        {container ? (\n          <gcds-container size={container} centered={centered}>\n            <Tag class={classNames} style={handleColumns()}>\n              <slot />\n            </Tag>\n          </gcds-container>\n        ) : (\n          <Tag class={classNames} style={handleColumns()}>\n            <slot />\n          </Tag>\n        )}\n      </Host>\n    );\n  }\n}\n"],"version":3}