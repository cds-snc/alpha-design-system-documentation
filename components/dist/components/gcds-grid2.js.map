{"file":"gcds-grid2.js","mappings":";;;AAAA,MAAM,WAAW,GAAG,gzHAAgzH;;MCOvzH,QAAQ;;;;;;;;;oBAuBU,KAAK;mBAKS,MAAM;;eA2B1B,KAAK;;;;;;;;EAuD5B,MAAM;IACJ,MAAM,EACJ,YAAY,EACZ,UAAU,EACV,OAAO,EACP,cAAc,EACd,aAAa,EACb,SAAS,EACT,QAAQ,EACR,OAAO,EACP,GAAG,EACH,cAAc,EACd,YAAY,EACZ,YAAY,EACZ,UAAU,EACV,GAAG,GACJ,GAAG,IAAI,CAAC;IAET,MAAM,GAAG,GAAG,GAAG,CAAC;IAChB,MAAM,UAAU,GAAG;;QAEf,YAAY,GAAG,iBAAiB,YAAY,EAAE,GAAG,EAAE;QACnD,UAAU,GAAG,eAAe,UAAU,EAAE,GAAG,EAAE;QAC7C,GAAG,GAAG,OAAO,GAAG,EAAE,GAAG,EAAE;QACvB,OAAO,GAAG,WAAW,OAAO,EAAE,GAAG,EAAE;QACnC,cAAc,GAAG,mBAAmB,cAAc,EAAE,GAAG,EAAE;QACzD,YAAY,GAAG,iBAAiB,YAAY,EAAE,GAAG,EAAE;QACnD,YAAY,GAAG,iBAAiB,YAAY,EAAE,GAAG,EAAE;QACnD,UAAU,GAAG,eAAe,UAAU,EAAE,GAAG,EAAE;KAChD,CAAC;;IAGF,SAAS,aAAa;MACpB,MAAM,iBAAiB,GAAG,EAAE,CAAC;MAE7B,IAAI,cAAc,EAAE;QAClB,iBAAiB,CAAC,6BAA6B,CAAC,GAAG,cAAc,CAAC;OACnE;MACD,IAAI,aAAa,EAAE;QACjB,iBAAiB,CAAC,4BAA4B,CAAC,GAAG,aAAa,CAAC;OACjE;MACD,IAAI,OAAO,EAAE;QACX,iBAAiB,CAAC,qBAAqB,CAAC,GAAG,OAAO,CAAC;OACpD;MAED,OAAO,iBAAiB,CAAC;KAC1B;IAED,QACE,EAAC,IAAI,QACF,SAAS,IACR,sBAAgB,IAAI,EAAE,SAAS,EAAE,QAAQ,EAAE,QAAQ,IACjD,EAAC,GAAG,IAAC,KAAK,EAAE,UAAU,EAAE,KAAK,EAAE,aAAa,EAAE,IAC5C,eAAQ,CACJ,CACS,KAEjB,EAAC,GAAG,IAAC,KAAK,EAAE,UAAU,EAAE,KAAK,EAAE,aAAa,EAAE,IAC5C,eAAQ,CACJ,CACP,CACI,EACP;GACH;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","names":[],"sources":["src/components/gcds-grid/gcds-grid.css?tag=gcds-grid&encapsulation=shadow","src/components/gcds-grid/gcds-grid.tsx"],"sourcesContent":[":host .gcds-grid {\n  margin: 0;\n  padding: 0;\n  grid-template-columns: var(--gcds-grid-columns, 1fr);\n\n  /* Display */\n  &.display-grid {\n    display: grid;\n  }\n\n  &.display-inline-grid {\n    display: inline-grid;\n  }\n\n  &.gap-0 {\n    gap: var(--gcds-grid-gap-0);\n  }\n\n  &.gap-50 {\n    gap: var(--gcds-grid-gap-50);\n  }\n\n  &.gap-100 {\n    gap: var(--gcds-grid-gap-100);\n  }\n\n  &.gap-150 {\n    gap: var(--gcds-grid-gap-150);\n  }\n\n  &.gap-200 {\n    gap: var(--gcds-grid-gap-200);\n  }\n\n  &.gap-250 {\n    gap: var(--gcds-grid-gap-250);\n  }\n\n  &.gap-300 {\n    gap: var(--gcds-grid-gap-300);\n  }\n\n  &.gap-400 {\n    gap: var(--gcds-grid-gap-400);\n  }\n\n  &.gap-450 {\n    gap: var(--gcds-grid-gap-450);\n  }\n\n  &.gap-500 {\n    gap: var(--gcds-grid-gap-500);\n  }\n\n  &.gap-550 {\n    gap: var(--gcds-grid-gap-550);\n  }\n\n  &.gap-600 {\n    gap: var(--gcds-grid-gap-600);\n  }\n\n  &.gap-700 {\n    gap: var(--gcds-grid-gap-700);\n  }\n\n  &.gap-800 {\n    gap: var(--gcds-grid-gap-800);\n  }\n\n  &.gap-900 {\n    gap: var(--gcds-grid-gap-900);\n  }\n\n  &.gap-1000 {\n    gap: var(--gcds-grid-gap-1000);\n  }\n\n  /* Align content */\n  &.align-content-center {\n    align-content: center;\n  }\n\n  &.align-content-end {\n    align-content: end;\n  }\n\n  &.align-content-space-around {\n    align-content: space-around;\n  }\n\n  &.align-content-space-between {\n    align-content: space-between;\n  }\n\n  &.align-content-space-evenly {\n    align-content: space-evenly;\n  }\n\n  &.align-content-start {\n    align-content: start;\n  }\n\n  &.align-content-stretch {\n    align-content: stretch;\n  }\n\n  /* Justify content */\n  &.justify-content-center {\n    justify-content: center;\n  }\n\n  &.justify-content-end {\n    justify-content: end;\n  }\n\n  &.justify-content-space-around {\n    justify-content: space-around;\n  }\n\n  &.justify-content-space-between {\n    justify-content: space-between;\n  }\n\n  &.justify-content-space-evenly {\n    justify-content: space-evenly;\n  }\n\n  &.justify-content-start {\n    justify-content: start;\n  }\n\n  &.justify-content-stretch {\n    justify-content: stretch;\n  }\n\n  /* Place content */\n  &.place-content-center {\n    place-content: center;\n  }\n\n  &.place-content-end {\n    place-content: end;\n  }\n\n  &.place-content-space-around {\n    place-content: space-around;\n  }\n\n  &.place-content-space-between {\n    place-content: space-between;\n  }\n\n  &.place-content-space-evenly {\n    place-content: space-evenly;\n  }\n\n  &.place-content-start {\n    place-content: start;\n  }\n\n  &.place-content-stretch {\n    place-content: stretch;\n  }\n\n  /* Align items */\n  &.align-items-baseline {\n    align-items: baseline;\n  }\n\n  &.align-items-center {\n    align-items: center;\n  }\n\n  &.align-items-end {\n    align-items: end;\n  }\n\n  &.align-items-start {\n    align-items: start;\n  }\n\n  &.align-items-stretch {\n    align-items: stretch;\n  }\n\n  /* Justify items */\n  &.justify-items-center {\n    justify-items: center;\n  }\n\n  &.justify-items-end {\n    justify-items: end;\n  }\n\n  &.justify-items-start {\n    justify-items: start;\n  }\n\n  &.justify-items-stretch {\n    justify-items: stretch;\n  }\n\n  /* Place items */\n  &.place-items-center {\n    place-items: center;\n  }\n\n  &.place-items-end {\n    place-items: end;\n  }\n\n  &.place-items-start {\n    place-items: start;\n  }\n\n  &.place-items-stretch {\n    place-items: stretch;\n  }\n}\n\n@media screen and (min-width: 48em) {\n  :host .gcds-grid {\n    grid-template-columns: var(--gcds-grid-columns-tablet, var(--gcds-grid-columns, 1fr));\n  }\n}\n@media screen and (min-width: 64em) {\n  :host .gcds-grid {\n    grid-template-columns: var(--gcds-grid-columns-desktop, var(--gcds-grid-columns-tablet, var(--gcds-grid-columns, 1fr)));\n  }\n}\n","import { Component, Element, Host, Prop, h } from '@stencil/core';\n\n@Component({\n  tag: 'gcds-grid',\n  styleUrl: 'gcds-grid.css',\n  shadow: true,\n})\nexport class GcdsGrid {\n  @Element() el: HTMLElement;\n\n  /**\n   * Props\n   */\n\n  /**\n   * Defines the columns of the grid\n   * Option to set different layouts for desktop | tablet | default (includes mobile)\n   */\n  @Prop() columns!: string;\n  @Prop() columnsTablet?: string;\n  @Prop() columnsDesktop?: string;\n\n  /**\n   * Defines grid container size\n   */\n  @Prop() container?: 'full' | 'xl' | 'lg' | 'md' | 'sm' | 'xs';\n\n  /**\n   * Defines if grid container is centered or not\n   */\n  @Prop() centered?: boolean = false;\n\n  /**\n   * Defines element as grid or inline-grid container\n   */\n  @Prop() display?: 'grid' | 'inline-grid' = 'grid';\n\n  /**\n   * Shorthand for column-gap + row-gap\n   * Specifies the width of the gutters between columns and rows\n   */\n  @Prop() gap?:\n    | '0'\n    | '50'\n    | '100'\n    | '150'\n    | '200'\n    | '250'\n    | '300'\n    | '400'\n    | '450'\n    | '500'\n    | '550'\n    | '600'\n    | '700'\n    | '800'\n    | '900'\n    | '1000';\n\n  /**\n   * Set tag for grid container\n   */\n  @Prop() tag?: string = 'div';\n\n  /**\n   * If total grid size is less than the size of its grid container,\n   * this property aligns the grid along the block (column) axis\n   */\n  @Prop() alignContent?:\n    | 'center'\n    | 'end'\n    | 'space-around'\n    | 'space-between'\n    | 'space-evenly'\n    | 'start'\n    | 'stretch';\n\n  /**\n   * If total grid size is less than the size of its grid container,\n   * this property aligns the grid along the inline (row) axis\n   */\n  @Prop() justifyContent?:\n    | 'center'\n    | 'end'\n    | 'space-around'\n    | 'space-between'\n    | 'space-evenly'\n    | 'start'\n    | 'stretch';\n\n  /**\n   * Sets both the align-content + justify-content properties\n   */\n  @Prop() placeContent?:\n    | 'center'\n    | 'end'\n    | 'space-around'\n    | 'space-between'\n    | 'space-evenly'\n    | 'start'\n    | 'stretch';\n\n  /**\n   * Aligns grid items along the block (column) axis\n   */\n  @Prop() alignItems?: 'baseline' | 'center' | 'end' | 'start' | 'stretch';\n\n  /**\n   * Aligns grid items along the inline (row) axis\n   */\n  @Prop() justifyItems?: 'center' | 'end' | 'start' | 'stretch';\n\n  /**\n   * Sets both the align-items + justify-items properties\n   */\n  @Prop() placeItems?: 'center' | 'end' | 'start' | 'stretch';\n\n  render() {\n    const {\n      alignContent,\n      alignItems,\n      columns,\n      columnsDesktop,\n      columnsTablet,\n      container,\n      centered,\n      display,\n      gap,\n      justifyContent,\n      justifyItems,\n      placeContent,\n      placeItems,\n      tag,\n    } = this;\n\n    const Tag = tag;\n    const classNames = `\n      gcds-grid\n      ${alignContent ? `align-content-${alignContent}` : ''}\n      ${alignItems ? `align-items-${alignItems}` : ''}\n      ${gap ? `gap-${gap}` : ''}\n      ${display ? `display-${display}` : ''}\n      ${justifyContent ? `justify-content-${justifyContent}` : ''}\n      ${justifyItems ? `justify-items-${justifyItems}` : ''}\n      ${placeContent ? `place-content-${placeContent}` : ''}\n      ${placeItems ? `place-items-${placeItems}` : ''}\n    `;\n\n    // Set CSS variables in style attribute based on passed column properties\n    function handleColumns() {\n      const responsiveColumns = {};\n\n      if (columnsDesktop) {\n        responsiveColumns['--gcds-grid-columns-desktop'] = columnsDesktop;\n      }\n      if (columnsTablet) {\n        responsiveColumns['--gcds-grid-columns-tablet'] = columnsTablet;\n      }\n      if (columns) {\n        responsiveColumns['--gcds-grid-columns'] = columns;\n      }\n\n      return responsiveColumns;\n    }\n\n    return (\n      <Host>\n        {container ? (\n          <gcds-container size={container} centered={centered}>\n            <Tag class={classNames} style={handleColumns()}>\n              <slot />\n            </Tag>\n          </gcds-container>\n        ) : (\n          <Tag class={classNames} style={handleColumns()}>\n            <slot />\n          </Tag>\n        )}\n      </Host>\n    );\n  }\n}\n"],"version":3}