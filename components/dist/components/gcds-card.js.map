{"file":"gcds-card.js","mappings":";;;;;;;AAAA,MAAM,IAAI,GAAG;AACb,EAAE,EAAE,EAAE;AACN,IAAI,MAAM,EAAE,SAAS;AACrB,GAAG;AACH,EAAE,EAAE,EAAE;AACN,IAAI,MAAM,EAAE,WAAW;AACvB,GAAG;AACH,CAAC;;ACPD,MAAM,WAAW,GAAG,2uCAA2uC,CAAC;AAChwC,uBAAe,WAAW;;MCgBbA,UAAQ;;;;;oBAMgC,MAAM;;4BAUD,GAAG;;;;;;;;;;;IAmC3D,UAAU;QACR,MAAM,QAAQ,GAAG,IAAI,gBAAgB,CAAC,SAAS;YAC7C,IAAI,SAAS,CAAC,CAAC,CAAC,CAAC,QAAQ,IAAI,IAAI,CAAC,EAAE,CAAC,IAAI,EAAE;gBACzC,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,EAAE,CAAC,IAAI,CAAC;aAC1B;SACF,CAAC,CAAC;QACH,QAAQ,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE,EAAE,cAAc,CAAC,CAAC;KAC3C;IAED,MAAM,iBAAiB;;QAErB,IAAI,CAAC,IAAI,GAAG,cAAc,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;QAEpC,IAAI,CAAC,UAAU,EAAE,CAAC;KACnB;IAED,IAAY,aAAa;QACvB,OAAO,CAAC,CAAC,IAAI,CAAC,EAAE,CAAC,aAAa,CAAC,iBAAiB,CAAC,CAAC;KACnD;IAED,MAAM;QACJ,MAAM,EACJ,IAAI,EACJ,SAAS,EACT,YAAY,EACZ,IAAI,EACJ,WAAW,EACX,GAAG,EACH,MAAM,EACN,MAAM,EACN,aAAa,EACb,IAAI,GACL,GAAG,IAAI,CAAC;QAET,MAAM,OAAO,GAAG,YAAY,CAAC;QAE7B,MAAM,UAAU,GAAG,EAAE,CAAC;QAEtB,IAAI,GAAG,EAAE;YACP,UAAU,CAAC,kBAAkB,CAAC,GAAG,gBAAgB,CAAC;SACnD;QAED,QACE,EAAC,IAAI,QACH,WAAK,KAAK,EAAE,wBAAwB,IAAI,EAAE,IACvC,MAAM,KACL,WACE,GAAG,EAAE,MAAM,EACX,GAAG,EAAE,MAAM,GAAG,MAAM,GAAG,EAAE,EACzB,KAAK,EAAC,kBAAkB,GACxB,CACH,EACA,GAAG,KACF,iBACE,EAAE,EAAC,gBAAgB,EACnB,KAAK,EAAC,gBAAgB,eACZ,WAAW,EACrB,IAAI,EAAC,SAAS,IAEd,wBAAeC,IAAI,CAAC,IAAI,CAAC,CAAC,MAAM,CAAgB,EAC/C,GAAG,CACM,CACb,EACA,OAAO,IAAI,GAAG,IACb,EAAC,OAAO,kBAAC,KAAK,EAAC,kBAAkB,IAAK,UAAU,GAC9C,iBAAW,IAAI,EAAE,IAAI,IAAG,SAAS,CAAa,CACtC,KAEV,+BAAW,IAAI,EAAE,IAAI,EAAE,KAAK,EAAC,kBAAkB,IAAK,UAAU,GAC3D,SAAS,CACA,CACb,EACA,WAAW,KACV,iBAAW,KAAK,EAAC,wBAAwB,IAAE,WAAW,CAAa,CACpE,EACA,aAAa,KACZ,kBACE,WAAK,KAAK,EAAC,mBAAmB,GAAO,EACrC,YAAM,IAAI,EAAC,QAAQ,GAAQ,CAC1B,CACJ,CACG,CACD,EACP;KACH;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","names":["GcdsCard","i18n"],"sources":["src/components/gcds-card/i18n/i18n.js","src/components/gcds-card/gcds-card.css?tag=gcds-card&encapsulation=shadow","src/components/gcds-card/gcds-card.tsx"],"sourcesContent":["const I18N = {\n  en: {\n    tagged: 'Tagged:',\n  },\n  fr: {\n    tagged: 'Baliser :',\n  },\n};\n\nexport default I18N;\n","@layer reset, default, slot, link, hover;\n\n@layer reset {\n  :host {\n    display: block;\n\n    * {\n      padding: 0;\n      margin: 0;\n      box-sizing: border-box;\n    }\n\n    slot {\n      display: initial;\n    }\n  }\n}\n\n@layer default {\n  :host .gcds-card {\n    border: var(--gcds-card-border);\n    border-radius: var(--gcds-card-border-radius);\n    background-color: var(--gcds-card-background-color);\n    display: block;\n    padding: var(--gcds-card-padding);\n    height: 100%;\n    color: var(--gcds-card-color);\n    position: relative;\n\n    > *:not(slot):not(.gcds-card__spacer) {\n      display: block;\n      margin: var(--gcds-card-margin);\n    }\n\n    .gcds-card__image {\n      width: 100%;\n    }\n\n    .gcds-card__title {\n      font: var(--gcds-card-title-font);\n      width: fit-content;\n    }\n  }\n}\n\n@layer slot {\n  :host .gcds-card:has(slot) {\n    display: flex;\n    flex-direction: column;\n\n    .gcds-card__spacer {\n      flex: 1;\n    }\n\n    ::slotted(*) {\n      color: var(--gcds-card-slot-color);\n      font: var(--gcds-card-slot-font) !important;\n      z-index: 2;\n    }\n  }\n}\n\n@layer link {\n  :host .gcds-card.gcds-card--link gcds-link::part(link):after {\n    position: absolute;\n    top: 0;\n    right: 0;\n    bottom: 0;\n    left: 0;\n    z-index: 1;\n    pointer-events: auto;\n    content: '';\n  }\n}\n\n@layer hover {\n  @media (hover: hover) {\n    :host .gcds-card {\n      &.gcds-card--link:hover {\n        background-color: var(--gcds-card-hover-background-color);\n        cursor: pointer;\n        box-shadow: var(--gcds-card-hover-box-shadow);\n      }\n    }\n  }\n}\n","import {\n  Element,\n  Component,\n  Host,\n  Prop,\n  h,\n  Fragment,\n  State,\n} from '@stencil/core';\nimport { assignLanguage, observerConfig } from '../../utils/utils';\nimport i18n from './i18n/i18n';\n\n@Component({\n  tag: 'gcds-card',\n  styleUrl: 'gcds-card.css',\n  shadow: true,\n})\nexport class GcdsCard {\n  @Element() el: HTMLElement;\n\n  /**\n   * The type attribute specifies how the card renders as a link\n   */\n  @Prop({ reflect: true }) type: 'link' | 'action' = 'link';\n\n  /**\n   * The card title attribute specifies the title that appears on the card\n   */\n  @Prop({ reflect: true }) cardTitle!: string;\n\n  /**\n   * The title element attribute specifies HTML element the title renders as\n   */\n  @Prop() titleElement: 'h3' | 'h4' | 'h5' | 'h6' | 'a' = 'a';\n\n  /**\n   * The href attribute specifies the URL of the page the link goes to\n   */\n  @Prop({ reflect: true }) href!: string;\n\n  /**\n   * The description attribute specifies the body of text that appears on the card\n   */\n  @Prop({ reflect: true }) description: string;\n\n  /**\n   * The tag attribute specifies the tag text that appears above the card title\n   */\n  @Prop({ reflect: true }) tag: string;\n\n  /**\n   * The img src attribute specifies the path to the image\n   */\n  @Prop({ reflect: true }) imgSrc: string;\n\n  /**\n   * The img alt attribute specifies the alt text for the image provided, if none, image will be decorative\n   */\n  @Prop({ reflect: true }) imgAlt: string;\n\n  /**\n   * Language of rendered component\n   */\n  @State() lang: string;\n\n  /*\n   * Observe lang attribute change\n   */\n  updateLang() {\n    const observer = new MutationObserver(mutations => {\n      if (mutations[0].oldValue != this.el.lang) {\n        this.lang = this.el.lang;\n      }\n    });\n    observer.observe(this.el, observerConfig);\n  }\n\n  async componentWillLoad() {\n    // Define lang attribute\n    this.lang = assignLanguage(this.el);\n\n    this.updateLang();\n  }\n\n  private get hasCardFooter() {\n    return !!this.el.querySelector('[slot=\"footer\"]');\n  }\n\n  render() {\n    const {\n      type,\n      cardTitle,\n      titleElement,\n      href,\n      description,\n      tag,\n      imgSrc,\n      imgAlt,\n      hasCardFooter,\n      lang,\n    } = this;\n\n    const Element = titleElement;\n\n    const taggedAttr = {};\n\n    if (tag) {\n      taggedAttr['aria-describedby'] = 'gcds-card__tag';\n    }\n\n    return (\n      <Host>\n        <div class={`gcds-card gcds-card--${type}`}>\n          {imgSrc && (\n            <img\n              src={imgSrc}\n              alt={imgAlt ? imgAlt : ''}\n              class=\"gcds-card__image\"\n            />\n          )}\n          {tag && (\n            <gcds-text\n              id=\"gcds-card__tag\"\n              class=\"gcds-card__tag\"\n              text-role=\"secondary\"\n              size=\"caption\"\n            >\n              <gcds-sr-only>{i18n[lang].tagged}</gcds-sr-only>\n              {tag}\n            </gcds-text>\n          )}\n          {Element != 'a' ? (\n            <Element class=\"gcds-card__title\" {...taggedAttr}>\n              <gcds-link href={href}>{cardTitle}</gcds-link>\n            </Element>\n          ) : (\n            <gcds-link href={href} class=\"gcds-card__title\" {...taggedAttr}>\n              {cardTitle}\n            </gcds-link>\n          )}\n          {description && (\n            <gcds-text class=\"gcds-card__description\">{description}</gcds-text>\n          )}\n          {hasCardFooter && (\n            <>\n              <div class=\"gcds-card__spacer\"></div>\n              <slot name=\"footer\"></slot>\n            </>\n          )}\n        </div>\n      </Host>\n    );\n  }\n}\n"],"version":3}