{"file":"gcds-checkbox.js","mappings":"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","names":["GcdsCheckbox"],"sources":["src/components/gcds-checkbox/gcds-checkbox.css?tag=gcds-checkbox&encapsulation=scoped","src/components/gcds-checkbox/gcds-checkbox.tsx"],"sourcesContent":[":host {\n  .gcds-checkbox {\n    max-width: 90%;\n    font: var(--gcds-checkbox-font);\n    color: var(--gcds-checkbox-default-text);\n    margin: var(--gcds-checkbox-margin);\n    padding: 0;\n    transition: color ease-in-out 0.15s;\n    position: relative;\n\n    &:focus-within {\n      color: var(--gcds-checkbox-focus-text);\n\n      gcds-hint {\n        color: currentColor;\n      }\n    }\n\n    &.gcds-checkbox--disabled {\n      color: var(--gcds-checkbox-disabled-text);\n\n      input[type=checkbox] + gcds-label {\n        color: var(--gcds-checkbox-disabled-text);\n\n        &:before {\n          border-color: currentcolor;\n          background-color: var(--gcds-checkbox-disabled-background);\n          cursor: not-allowed;\n        }\n\n        &:after {\n          cursor: not-allowed;\n        }\n      }\n\n      gcds-hint {\n        color: currentColor;\n      }\n    }\n\n    &.gcds-checkbox--error:not(:focus-within) input[type=checkbox] + gcds-label {\n      &:before {\n        border-color: var(--gcds-checkbox-danger-border);\n      }\n\n      &:after {\n        color: var(--gcds-checkbox-danger-border);\n      }\n    }\n\n    input[type=checkbox] {\n      height: var(--gcds-checkbox-input-height-and-width);\n      width: var(--gcds-checkbox-input-height-and-width);\n      left: 0;\n      opacity: 0;\n      position: absolute;\n      top: var(--gcds-checkbox-top);\n\n      &:checked + gcds-label:after {\n        opacity: 1;\n      }\n\n      &+ gcds-label {\n        width: fit-content;\n\n        &:before,\n        &:after {\n          cursor: pointer;\n          position: absolute;\n          content: \"\";\n          box-sizing: border-box;\n        }\n\n        &:before {\n          border: var(--gcds-checkbox-input-border-width) solid currentcolor;\n          height: var(--gcds-checkbox-input-height-and-width);\n          width: var(--gcds-checkbox-input-height-and-width);\n          left: 0;\n          top: var(--gcds-checkbox-top);\n          border-radius: var(--gcds-checkbox-input-border-radius);\n          transition: border-color ease-in-out .15s, box-shadow ease-in-out .15s, outline ease-in-out .15s;\n        }\n\n        &:after {\n          border: var(--gcds-checkbox-check-border-width) solid;\n          border-left: 0;\n          border-top: 0;\n          height: var(--gcds-checkbox-check-height);\n          width: var(--gcds-checkbox-check-width);\n          color: currentcolor;\n          left: var(--gcds-checkbox-check-left);\n          opacity: 0;\n          top: var(--gcds-checkbox-check-top);\n          transform: rotate(40deg);\n          transition: opacity .2s ease-in-out;\n        }\n      }\n\n      &:focus + gcds-label {\n        &:before {\n          outline: var( --gcds-checkbox-focus-outline-width) solid currentcolor;\n          outline-offset: var(--gcds-checkbox-input-border-width);\n          box-shadow: var(--gcds-checkbox-focus-box-shadow);\n          background: var(--gcds-checkbox-focus-background);\n        }\n\n        &:after {\n          color: var(--gcds-checkbox-focus-text);\n        }\n      }\n    }\n\n    gcds-label,\n    gcds-hint {\n      display: block;\n      padding: var(--gcds-checkbox-label-padding);\n    }\n\n    gcds-hint {\n      font: var(--gcds-checkbox-hint-font);\n      line-height: var(--gcds-checkbox-hint-line-height);\n    }\n\n    gcds-error-message {\n      display:inline-block;\n      padding: var(--gcds-checkbox-error-padding);\n    }\n  }\n}\n","import {\n  Component,\n  Element,\n  Event,\n  EventEmitter,\n  Listen,\n  Method,\n  State,\n  Prop,\n  Watch,\n  Host,\n  h,\n} from '@stencil/core';\nimport {\n  assignLanguage,\n  elementGroupCheck,\n  inheritAttributes,\n  observerConfig,\n} from '../../utils/utils';\nimport {\n  Validator,\n  defaultValidator,\n  ValidatorEntry,\n  getValidator,\n  requiredValidator,\n} from '../../validators';\n\n@Component({\n  tag: 'gcds-checkbox',\n  styleUrl: 'gcds-checkbox.css',\n  shadow: false,\n  scoped: true,\n})\nexport class GcdsCheckbox {\n  @Element() el: HTMLElement;\n\n  private shadowElement?: HTMLElement;\n\n  _validator: Validator<unknown> = defaultValidator;\n\n  /**\n   * Props\n   */\n\n  /**\n   * Id attribute for an input element.\n   */\n  @Prop({ reflect: true, mutable: true }) checkboxId!: string;\n  /**\n   * Form field label\n   */\n  @Prop({ reflect: true, mutable: false }) label!: string;\n\n  /**\n   * Name attribute for an input element.\n   */\n  @Prop({ reflect: true, mutable: false }) name!: string;\n\n  /**\n   * Specifies if a form field is required or not.\n   */\n  @Prop({ reflect: true, mutable: false }) required: boolean;\n  /**\n   * Specifies if an input element is disabled or not.\n   */\n  @Prop({ reflect: true, mutable: true }) disabled: boolean;\n\n  @Watch('disabled')\n  validateDisabledCheckbox() {\n    if (this.required) {\n      this.disabled = false;\n    }\n  }\n\n  /**\n   * Value for an input element.\n   */\n  @Prop({ reflect: true, mutable: false }) value: string;\n\n  /**\n   * Specifies if an input element is checked.\n   */\n  @Prop({ reflect: true, mutable: true }) checked: boolean;\n\n  /**\n   * Error message for an invalid input element.\n   */\n  @Prop({ reflect: true, mutable: true }) errorMessage: string;\n  @Watch('errorMessage')\n  validateErrorMessage() {\n    if (this.disabled) {\n      this.errorMessage = '';\n    } else if (!this.hasError && this.errorMessage) {\n      this.hasError = true;\n    } else if (this.errorMessage == '') {\n      this.hasError = false;\n    }\n  }\n\n  /**\n   * Hint displayed below the label.\n   */\n  @Prop({ reflect: true, mutable: false }) hint: string;\n\n  /**\n   * Array of validators\n   */\n  @Prop({ mutable: true }) validator: Array<\n    string | ValidatorEntry | Validator<string>\n  >;\n\n  @Watch('validator')\n  validateValidator() {\n    if (this.validator && !this.validateOn) {\n      this.validateOn = 'blur';\n    }\n  }\n\n  /**\n   * Set event to call validator\n   */\n  @Prop({ mutable: true }) validateOn: 'blur' | 'submit' | 'other';\n\n  /**\n   * Event listener for gcds-fieldset errors\n   */\n  @Listen('gcdsGroupError', { target: 'body' })\n  gcdsGroupError(e) {\n    if (e.srcElement.contains(this.el) && elementGroupCheck(this.name)) {\n      this.hasError = true;\n      this.parentError = e.detail;\n    } else if (!elementGroupCheck(this.name)) {\n      this.hasError = false;\n      this.parentError = '';\n    }\n  }\n\n  @Listen('gcdsGroupErrorClear', { target: 'body' })\n  gcdsGroupErrorClear(e) {\n    if (e.srcElement.contains(this.el) && this.hasError) {\n      this.hasError = false;\n      this.parentError = '';\n    }\n  }\n\n  /**\n   * Custom callback function on click event\n   */\n  @Prop() clickHandler: Function;\n\n  /**\n   * Custom callback function on focus event\n   */\n  @Prop() focusHandler: Function;\n\n  /**\n   * Custom callback function on blur event\n   */\n  @Prop() blurHandler: Function;\n\n  /**\n   * State to handle when errors are passed down to component\n   */\n  @State() parentError: string;\n\n  /**\n   * Set additional HTML attributes not available in component properties\n   */\n  @State() inheritedAttributes: Object = {};\n\n  /**\n   * Specifies if the checkbox is invalid.\n   */\n  @State() hasError: boolean;\n  @Watch('hasError')\n  validateHasError() {\n    if (this.disabled) {\n      this.hasError = false;\n    }\n  }\n\n  /**\n   * Language of rendered component\n   */\n  @State() lang: string;\n\n  /**\n   * Events\n   */\n\n  /**\n   * Emitted when the checkbox has focus.\n   */\n  @Event() gcdsFocus!: EventEmitter<void>;\n\n  private onFocus = e => {\n    if (this.focusHandler) {\n      this.focusHandler(e);\n    }\n\n    this.gcdsFocus.emit();\n  };\n\n  /**\n   * Emitted when the checkbox loses focus.\n   */\n  @Event() gcdsBlur!: EventEmitter<void>;\n\n  private onBlur = e => {\n    if (this.blurHandler) {\n      this.blurHandler(e);\n    } else {\n      if (this.validateOn == 'blur') {\n        this.validate();\n      }\n    }\n\n    this.gcdsBlur.emit();\n  };\n\n  /**\n   * Update value based on user input.\n   */\n  @Event() gcdsChange: EventEmitter;\n\n  /**\n   * Call any active validators\n   */\n  @Method()\n  async validate() {\n    if (\n      !this._validator.validate(this.checked) &&\n      this._validator.errorMessage\n    ) {\n      this.errorMessage = this._validator.errorMessage[this.lang];\n      this.gcdsError.emit({\n        id: `#${this.checkboxId}`,\n        message: `${this.label} - ${this.errorMessage}`,\n      });\n    } else {\n      this.errorMessage = '';\n      this.gcdsValid.emit({ id: `#${this.checkboxId}` });\n    }\n  }\n\n  /**\n   * Emitted when the input has a validation error.\n   */\n  @Event() gcdsError!: EventEmitter<object>;\n\n  /**\n   * Emitted when the input has a validation error.\n   */\n  @Event() gcdsValid!: EventEmitter<object>;\n\n  @Listen('submit', { target: 'document' })\n  submitListener(e) {\n    if (e.target == this.el.closest('form')) {\n      if (this.validateOn && this.validateOn != 'other') {\n        this.validate();\n      }\n\n      if (this.hasError) {\n        e.preventDefault();\n      }\n    }\n  }\n\n  /*\n   * Observe lang attribute change\n   */\n  updateLang() {\n    const observer = new MutationObserver(mutations => {\n      if (mutations[0].oldValue != this.el.lang) {\n        this.lang = this.el.lang;\n      }\n    });\n    observer.observe(this.el, observerConfig);\n  }\n\n  async componentWillLoad() {\n    // Define lang attribute\n    this.lang = assignLanguage(this.el);\n\n    this.updateLang();\n\n    this.validateDisabledCheckbox();\n    this.validateHasError();\n    this.validateErrorMessage();\n    this.validateValidator();\n\n    // Assign required validator if needed\n    requiredValidator(this.el, 'checkbox');\n\n    if (this.validator) {\n      this._validator = getValidator(this.validator);\n    }\n\n    this.inheritedAttributes = inheritAttributes(this.el, this.shadowElement);\n  }\n\n  componentWillUpdate() {\n    if (this.validator) {\n      this._validator = getValidator(this.validator);\n    }\n  }\n\n  private onChange = () => {\n    this.checked = !this.checked;\n\n    this.gcdsChange.emit(this.checked);\n  };\n\n  render() {\n    const {\n      lang,\n      checkboxId,\n      label,\n      name,\n      required,\n      disabled,\n      value,\n      checked,\n      hint,\n      errorMessage,\n      hasError,\n      parentError,\n      inheritedAttributes,\n    } = this;\n\n    const attrsInput = {\n      name,\n      disabled,\n      required,\n      value,\n      checked,\n      ...inheritedAttributes,\n    };\n\n    const attrsLabel = {\n      label,\n      required,\n    };\n\n    if (hint || errorMessage || parentError) {\n      const hintID = hint ? `hint-${checkboxId} ` : '';\n      const errorID = errorMessage ? `error-message-${checkboxId} ` : '';\n      const parentErrorID = parentError ? `parent-error-${checkboxId} ` : '';\n      attrsInput['aria-describedby'] = `${hintID}${errorID}${parentErrorID}${\n        attrsInput['aria-describedby']\n          ? `${attrsInput['aria-describedby']}`\n          : ''\n      }`;\n    }\n\n    if (hasError) {\n      attrsInput['aria-invalid'] = 'true';\n    }\n\n    return (\n      <Host>\n        <div\n          class={`gcds-checkbox ${disabled ? 'gcds-checkbox--disabled' : ''} ${\n            hasError ? 'gcds-checkbox--error' : ''\n          }`}\n        >\n          <input\n            id={checkboxId}\n            type=\"checkbox\"\n            {...attrsInput}\n            onBlur={e => this.onBlur(e)}\n            onFocus={e => this.onFocus(e)}\n            onChange={() => this.onChange()}\n            onClick={e => {\n              this.clickHandler && this.clickHandler(e);\n            }}\n            ref={element => (this.shadowElement = element as HTMLElement)}\n          />\n\n          <gcds-label\n            {...attrsLabel}\n            label-for={checkboxId}\n            lang={lang}\n          ></gcds-label>\n\n          {hint ? <gcds-hint hint={hint} hint-id={checkboxId} /> : null}\n\n          {errorMessage ? (\n            <gcds-error-message messageId={checkboxId} message={errorMessage} />\n          ) : null}\n\n          {parentError ? (\n            <span id={`parent-error-${checkboxId}`} hidden>\n              {parentError}\n            </span>\n          ) : null}\n        </div>\n      </Host>\n    );\n  }\n}\n"],"version":3}