{"file":"gcds-phase-banner.js","mappings":";;;;AAAA,MAAM,IAAI,GAAG;AACb,EAAE,EAAE,EAAE;AACN,IAAI,KAAK,EAAE,QAAQ;AACnB,GAAG;AACH,EAAE,EAAE,EAAE;AACN,IAAI,KAAK,EAAE,UAAU;AACrB,GAAG;AACH,CAAC;;ACPD,MAAM,kBAAkB,GAAG,m8DAAm8D;;MCSj9DA,iBAAe;;;;;sBAUqB,SAAS;qBAKQ,IAAI;;;;;;;;;;EAmBpE,UAAU;IACR,MAAM,QAAQ,GAAG,IAAI,gBAAgB,CAAC,SAAS;MAC7C,IAAI,SAAS,CAAC,CAAC,CAAC,CAAC,QAAQ,IAAI,IAAI,CAAC,EAAE,CAAC,IAAI,EAAE;QACzC,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,EAAE,CAAC,IAAI,CAAC;OAC1B;KACF,CAAC,CAAC;IACH,QAAQ,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE,EAAE,cAAc,CAAC,CAAC;GAC3C;EAED,MAAM,iBAAiB;;IAErB,IAAI,CAAC,IAAI,GAAG,cAAc,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;IAEpC,IAAI,CAAC,UAAU,EAAE,CAAC;GACnB;EAED,MAAM;IACJ,MAAM,EAAE,UAAU,EAAE,SAAS,EAAE,OAAO,EAAE,IAAI,EAAE,GAAG,IAAI,CAAC;IAEtD,QACE,EAAC,IAAI,QACH,WACE,KAAK,EAAE,kCAAkC,UAAU,IACjD,OAAO,GAAG,kBAAkB,GAAG,EACjC,EAAE,EACF,IAAI,EAAC,QAAQ,gBACDC,IAAI,CAAC,IAAI,CAAC,CAAC,KAAK,IAE5B,sBAAgB,IAAI,EAAE,SAAS,EAAE,QAAQ,UACvC,WAAK,KAAK,EAAC,iBAAiB,IAC1B,cAAQ,KAAK,EAAC,yBAAyB,IACrC,YAAM,IAAI,EAAC,kBAAkB,GAAG,CACzB,EAET,WAAK,KAAK,EAAC,iBAAiB,IAC1B,YAAM,IAAI,EAAC,aAAa,GAAG,EAC3B,YAAM,IAAI,EAAC,YAAY,GAAG,CACtB,EAEN,cAAQ,KAAK,EAAC,0BAA0B,IACtC,YAAM,IAAI,EAAC,mBAAmB,GAAG,CAC1B,CACL,CACS,CACb,CACD,EACP;GACH;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","names":["GcdsPhaseBanner","i18n"],"sources":["src/components/gcds-phase-banner/i18n/i18n.js","src/components/gcds-phase-banner/gcds-phase-banner.css?tag=gcds-phase-banner&encapsulation=shadow","src/components/gcds-phase-banner/gcds-phase-banner.tsx"],"sourcesContent":["const I18N = {\n  en: {\n    label: 'Banner',\n  },\n  fr: {\n    label: 'BanniÃ¨re',\n  },\n};\n\nexport default I18N;\n",":host .gcds-phase-banner {\n  font: var(--gcds-phase-banner-font);\n  line-height: var(--gcds-phase-banner-line-height);\n\n  slot {\n    display: initial;\n  }\n\n  /* Is Fixed */\n  &.banner-is-fixed {\n    position: sticky;\n    top: 0;\n    width: 100%;\n    z-index: 9999;\n  }\n\n  /* Role */\n  &.banner--role-primary {\n    background-color: var(--gcds-phase-banner-primary-background);\n    color: var(--gcds-phase-banner-primary-text);\n  }\n\n  &.banner--role-secondary {\n    background-color: var(--gcds-phase-banner-secondary-background);\n    color: var(--gcds-phase-banner-secondary-text);\n  }\n\n  /* General Styling */\n  .banner__content {\n    padding: var(--gcds-phase-banner-padding);\n\n    @media only screen and (min-width: 35em) {\n      display: flex;\n    }\n  }\n\n  .banner__icon {\n    display: flex;\n    margin: 0;\n\n    &.icon--left {\n      margin-inline-end: var(--gcds-phase-banner-icon-margin);\n    }\n\n    &.icon--right {\n      margin-inline-start: var(--gcds-phase-banner-icon-margin);\n    }\n\n    @media only screen and (max-width: 34.99em) {\n      display: none;\n    }\n\n    ::slotted(img),\n    ::slotted(svg) {\n      max-height: var(--gcds-phase-banner-icon-max-height);\n    }\n  }\n\n  .banner__details {\n    display: flex;\n    flex-wrap: wrap;\n    align-items: baseline;\n\n    ::slotted(a),\n    ::slotted(gcds-button) {\n      flex: 0 0 auto;\n    }\n\n    ::slotted(span),\n    ::slotted(small),\n    ::slotted(a) {\n      font-size: 80% !important;\n    }\n\n    ::slotted(p) {\n      font: var(--gcds-phase-banner-font);\n      margin: 0;\n    }\n\n    ::slotted(a) {\n      color: inherit;\n    }\n\n    ::slotted(gcds-button) {\n      margin: var(--gcds-phase-banner-details-cta-margin);\n      transform: scale(90%);\n    }\n  }\n}\n","import { Component, Element, Host, Prop, State, h } from '@stencil/core';\nimport { assignLanguage, observerConfig } from '../../utils/utils';\nimport i18n from './i18n/i18n';\n\n@Component({\n  tag: 'gcds-phase-banner',\n  styleUrl: 'gcds-phase-banner.css',\n  shadow: true,\n})\nexport class GcdsPhaseBanner {\n  @Element() el: HTMLElement;\n\n  /**\n   * Props\n   */\n\n  /**\n   * Defines banner role.\n   */\n  @Prop() bannerRole?: 'primary' | 'secondary' = 'primary';\n\n  /**\n   * Defines the container width of the phase banner content\n   */\n  @Prop() container?: 'full' | 'xl' | 'lg' | 'md' | 'sm' | 'xs' = 'xl';\n\n  /**\n   * Defines if the banner's position is fixed.\n   */\n  @Prop() isFixed?: boolean;\n\n  /**\n   * Language of rendered component\n   */\n  @State() lang: string;\n\n  /**\n   * Events\n   */\n\n  /*\n   * Observe lang attribute change\n   */\n  updateLang() {\n    const observer = new MutationObserver(mutations => {\n      if (mutations[0].oldValue != this.el.lang) {\n        this.lang = this.el.lang;\n      }\n    });\n    observer.observe(this.el, observerConfig);\n  }\n\n  async componentWillLoad() {\n    // Define lang attribute\n    this.lang = assignLanguage(this.el);\n\n    this.updateLang();\n  }\n\n  render() {\n    const { bannerRole, container, isFixed, lang } = this;\n\n    return (\n      <Host>\n        <div\n          class={`gcds-phase-banner banner--role-${bannerRole} ${\n            isFixed ? 'banner--is-fixed' : ''\n          }`}\n          role=\"status\"\n          aria-label={i18n[lang].label}\n        >\n          <gcds-container size={container} centered>\n            <div class=\"banner__content\">\n              <figure class=\"banner__icon icon--left\">\n                <slot name=\"banner-icon-left\" />\n              </figure>\n\n              <div class=\"banner__details\">\n                <slot name=\"banner-text\" />\n                <slot name=\"banner-cta\" />\n              </div>\n\n              <figure class=\"banner__icon icon--right\">\n                <slot name=\"banner-icon-right\" />\n              </figure>\n            </div>\n          </gcds-container>\n        </div>\n      </Host>\n    );\n  }\n}\n"],"version":3}