{"file":"gcds-radio.js","mappings":"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","names":["GcdsRadio"],"sources":["src/components/gcds-radio/gcds-radio.css?tag=gcds-radio&encapsulation=scoped","src/components/gcds-radio/gcds-radio.tsx"],"sourcesContent":[":host {\n  .gcds-radio {\n    max-width: 90%;\n    font: var(--gcds-radio-font);\n    color: var(--gcds-radio-default-text);\n    margin: var(--gcds-radio-margin);\n    padding: 0;\n    border: 0;\n    transition: color ease-in-out .15s;\n    position: relative;\n\n    &:focus-within {\n      color: var(--gcds-radio-focus-text);\n\n      gcds-hint {\n        color: currentColor;\n      }\n    }\n\n    &.gcds-radio--disabled {\n      color: var(--gcds-radio-disabled-text);\n\n      input[type=radio]+gcds-label {\n        color: var(--gcds-radio-disabled-text);\n\n        &:before {\n          border-color: var(--gcds-radio-disabled-border);\n          background-color: var(--gcds-radio-disabled-background);\n          cursor: not-allowed;\n        }\n\n        &:after {\n          cursor: not-allowed;\n        }\n      }\n\n      gcds-hint {\n        color: currentColor;\n      }\n    }\n\n    &.gcds-radio--error:not(:focus-within) input[type=radio] + gcds-label {\n      &:before {\n        border-color: var(--gcds-radio-danger-border);\n      }\n\n      &:after {\n        color: var(--gcds-radio-danger-border);\n        background-color: var(--gcds-radio-danger-border);\n      }\n    }\n\n    input[type=radio] {\n      height: var(--gcds-radio-input-height);\n      width: var(--gcds-radio-input-width);\n      left: 0;\n      opacity: 0;\n      position: absolute;\n      top: var(--gcds-radio-top);\n\n      &:checked + gcds-label:after {\n        opacity: 1;\n      }\n\n      &+ gcds-label {\n        width: fit-content;\n\n        &:before,\n        &:after {\n          position: absolute;\n          cursor: pointer;\n          border-radius: var(--gcds-radio-border-radius);\n          content: \"\";\n          box-sizing: border-box;\n        }\n\n        &:before {\n          border: var(--gcds-radio-input-border-width) solid currentcolor;\n          height: var(--gcds-radio-input-height-and-width);\n          width: var(--gcds-radio-input-height-and-width);\n          left: 0;\n          top: var(--gcds-radio-top);\n          transition: border-color ease-in-out .15s, box-shadow ease-in-out .15s, outline ease-in-out .15s;\n        }\n\n        &:after {\n          height: var(--gcds-radio-check-height-and-width);\n          width: var(--gcds-radio-check-height-and-width);\n          color: currentcolor;\n          left: var(--gcds-radio-check-left);\n          opacity: 0;\n          top: var(--gcds-radio-check-top);\n          background-color: currentcolor;\n          transition: opacity .2s ease-in-out;\n        }\n      }\n\n      &:focus + gcds-label {\n        color: var(--gcds-radio-focus-text);\n\n        &:before {\n          outline: var( --gcds-radio-focus-outline-width) solid currentcolor;\n          outline-offset: var(--gcds-radio-input-border-width);\n          box-shadow: var(--gcds-radio-focus-box-shadow);\n          background: var(--gcds-radio-focus-background);\n        }\n\n        &:after {\n          color: var(--gcds-radio-focus-text);\n          background-color: currentcolor;\n        }\n      }\n    }\n\n    gcds-label,\n    gcds-hint {\n      display: block;\n      padding: var(--gcds-radio-label-padding);\n    }\n\n    gcds-hint {\n      font: var(--gcds-radio-hint-font);\n    }\n  }\n}\n","import {\n  Component,\n  Element,\n  Event,\n  EventEmitter,\n  State,\n  Prop,\n  Listen,\n  Watch,\n  Host,\n  h,\n} from '@stencil/core';\nimport {\n  assignLanguage,\n  elementGroupCheck,\n  inheritAttributes,\n  observerConfig,\n} from '../../utils/utils';\n\n@Component({\n  tag: 'gcds-radio',\n  styleUrl: 'gcds-radio.css',\n  shadow: false,\n  scoped: true,\n})\nexport class GcdsRadio {\n  @Element() el: HTMLElement;\n\n  private shadowElement?: HTMLInputElement;\n\n  /**\n   * Props\n   */\n\n  /**\n   * Id attribute for an input element.\n   */\n  @Prop({ reflect: true, mutable: true }) radioId!: string;\n\n  /**\n   * Form field label\n   */\n  @Prop({ reflect: true, mutable: false }) label!: string;\n\n  /**\n   * Name attribute for an input element.\n   */\n  @Prop({ reflect: true, mutable: false }) name!: string;\n\n  /**\n   * Specifies if a form field is required or not.\n   */\n  @Prop({ reflect: true, mutable: false }) required: boolean;\n\n  /**\n   * Specifies if an input element is disabled or not.\n   */\n  @Prop({ reflect: true, mutable: true }) disabled: boolean;\n\n  /**\n   * Specifies if an input element is checked.\n   */\n  @Prop({ reflect: true, mutable: true }) checked: boolean;\n\n  /**\n   * Value for an input element.\n   */\n  @Prop({ reflect: true, mutable: false }) value: string;\n\n  /**\n   * Hint displayed below the label.\n   */\n  @Prop({ reflect: true, mutable: false }) hint: string;\n\n  /**\n   * Custom callback function on click event\n   */\n  @Prop() clickHandler: Function;\n\n  /**\n   * Custom callback function on focus event\n   */\n  @Prop() focusHandler: Function;\n\n  /**\n   * Custom callback function on blur event\n   */\n  @Prop() blurHandler: Function;\n\n  /**\n   * Specifies if the radio is invalid.\n   */\n  @State() hasError: boolean;\n  @Watch('hasError')\n  validateHasError() {\n    if (this.disabled) {\n      this.hasError = false;\n    }\n  }\n\n  /**\n   * State to handle when errors are passed down to component\n   */\n  @State() parentError: string;\n\n  /**\n   * Set additional HTML attributes not available in component properties\n   */\n  @State() inheritedAttributes: Object = {};\n\n  /**\n   * Language of rendered component\n   */\n  @State() lang: string;\n\n  /**\n   * Events\n   */\n\n  /**\n   * Emitted when the radio button is checked\n   */\n  @Event() gcdsRadioChange!: EventEmitter<void>;\n\n  /**\n   * Emitted when the radio has focus.\n   */\n  @Event() gcdsFocus!: EventEmitter<void>;\n\n  private onFocus = e => {\n    if (this.focusHandler) {\n      this.focusHandler(e);\n    }\n\n    this.gcdsFocus.emit();\n  };\n\n  /**\n   * Emitted when the radio loses focus.\n   */\n  @Event() gcdsBlur!: EventEmitter<void>;\n\n  private onBlur = e => {\n    if (this.blurHandler) {\n      this.blurHandler(e);\n    }\n\n    this.gcdsBlur.emit();\n  };\n\n  /*\n   * Observe lang attribute change\n   */\n  updateLang() {\n    const observer = new MutationObserver(mutations => {\n      if (mutations[0].oldValue != this.el.lang) {\n        this.lang = this.el.lang;\n      }\n    });\n    observer.observe(this.el, observerConfig);\n  }\n\n  async componentWillLoad() {\n    // Define lang attribute\n    this.lang = assignLanguage(this.el);\n\n    this.updateLang();\n\n    this.inheritedAttributes = inheritAttributes(this.el, this.shadowElement);\n  }\n\n  private onChange = name => {\n    this.gcdsRadioChange.emit(name);\n    this.checked = this.shadowElement.checked;\n  };\n\n  @Listen('gcdsRadioChange', { target: 'document' })\n  gcdsradioChangeEventHandler(event) {\n    if (event.detail == this.name && event.srcElement != this.shadowElement) {\n      if (this.checked) {\n        this.checked = false;\n      }\n    }\n  }\n\n  /**\n   * Event listener for gcds-fieldset errors\n   */\n  @Listen('gcdsGroupError', { target: 'body' })\n  gcdsGroupError(e) {\n    if (e.srcElement.contains(this.el) && elementGroupCheck(this.name)) {\n      this.hasError = true;\n      this.parentError = e.detail;\n    } else if (!elementGroupCheck(this.name)) {\n      this.hasError = false;\n      this.parentError = '';\n    }\n  }\n  @Listen('gcdsGroupErrorClear', { target: 'body' })\n  gcdsGroupErrorClear(e) {\n    if (e.srcElement.contains(this.el) && this.hasError) {\n      this.hasError = false;\n      this.parentError = '';\n    }\n  }\n\n  render() {\n    const {\n      lang,\n      radioId,\n      label,\n      name,\n      required,\n      disabled,\n      value,\n      checked,\n      hint,\n      hasError,\n      parentError,\n      inheritedAttributes,\n    } = this;\n\n    const attrsInput = {\n      name,\n      disabled,\n      required,\n      value,\n      checked,\n      ...inheritedAttributes,\n    };\n\n    if (hint || parentError) {\n      const hintID = hint ? `hint-${radioId} ` : '';\n      const errorID = parentError ? `parent-error-${radioId} ` : '';\n      attrsInput['aria-describedby'] = `${hintID}${errorID}${\n        attrsInput['aria-describedby']\n          ? `${attrsInput['aria-describedby']}`\n          : ''\n      }`;\n    }\n\n    if (hasError) {\n      attrsInput['aria-invalid'] = 'true';\n    }\n\n    return (\n      <Host>\n        <div\n          class={`gcds-radio ${disabled ? 'gcds-radio--disabled' : ''} ${\n            hasError ? 'gcds-radio--error' : ''\n          }`}\n        >\n          <input\n            id={radioId}\n            type=\"radio\"\n            {...attrsInput}\n            onChange={() => this.onChange(name)}\n            onBlur={e => this.onBlur(e)}\n            onFocus={e => this.onFocus(e)}\n            onClick={e => {\n              this.clickHandler && this.clickHandler(e);\n            }}\n            ref={element => (this.shadowElement = element as HTMLInputElement)}\n          />\n\n          <gcds-label\n            label={label}\n            label-for={radioId}\n            lang={lang}\n          ></gcds-label>\n\n          {hint ? <gcds-hint hint={hint} hint-id={radioId} /> : null}\n\n          {parentError && (\n            <span id={`parent-error-${radioId}`} hidden>\n              {parentError}\n            </span>\n          )}\n        </div>\n      </Host>\n    );\n  }\n}\n"],"version":3}